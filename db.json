{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/tree13.png","path":"images/tree13.png","modified":0,"renderable":0},{"_id":"source/images/tree12.png","path":"images/tree12.png","modified":0,"renderable":0},{"_id":"source/images/tree14.png","path":"images/tree14.png","modified":0,"renderable":0},{"_id":"source/images/tree11.png","path":"images/tree11.png","modified":0,"renderable":0},{"_id":"source/images/tree18.png","path":"images/tree18.png","modified":0,"renderable":0},{"_id":"source/images/tree15.png","path":"images/tree15.png","modified":0,"renderable":0},{"_id":"source/images/tree16.png","path":"images/tree16.png","modified":0,"renderable":0},{"_id":"source/images/tree17.png","path":"images/tree17.png","modified":0,"renderable":0},{"_id":"source/images/tree19.png","path":"images/tree19.png","modified":0,"renderable":0},{"_id":"source/images/tree20.png","path":"images/tree20.png","modified":0,"renderable":0},{"_id":"source/images/tree10.png","path":"images/tree10.png","modified":0,"renderable":0},{"_id":"source/images/tree1.png","path":"images/tree1.png","modified":0,"renderable":0},{"_id":"source/images/tree2.png","path":"images/tree2.png","modified":0,"renderable":0},{"_id":"source/images/tree3.png","path":"images/tree3.png","modified":0,"renderable":0},{"_id":"source/images/tree4.png","path":"images/tree4.png","modified":0,"renderable":0},{"_id":"source/images/tree6.png","path":"images/tree6.png","modified":0,"renderable":0},{"_id":"source/images/tree5.png","path":"images/tree5.png","modified":0,"renderable":0},{"_id":"source/images/tree7.png","path":"images/tree7.png","modified":0,"renderable":0},{"_id":"source/images/tree8.png","path":"images/tree8.png","modified":0,"renderable":0},{"_id":"source/images/tree9.png","path":"images/tree9.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1536727543797},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1534980119000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1534980119000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1534980119000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1534980119000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1534980119000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1534980119000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1534980119000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1534980119000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1534980119000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1534980119000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1534980119000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1534980119000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1534980119000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1534980119000},{"_id":"themes/next/_config.yml","hash":"32b4f24c7d58433f947e375d6f5fe5ff5e3a9ca2","modified":1536665663191},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1534980119000},{"_id":"source/_posts/001-two-sum.md","hash":"9e11809a57f5eaa621e99d30d66705aa12a09dbd","modified":1535079914000},{"_id":"source/_posts/003-longest-substring-without-repeatint-characters.md","hash":"8d377532e3850d37b866edbb0222b207eaada8fa","modified":1536718630618},{"_id":"source/_posts/007-reverse-integer.md","hash":"580e5315710a796c660af94d3008aecc1ddfdbd8","modified":1535079910000},{"_id":"source/_posts/122-best-time-to-bssII.md","hash":"4ff32c245cd1fed08e93f024051d770d21e5a68e","modified":1536718630618},{"_id":"source/_posts/189-rotate-array.md","hash":"256ff0d76c2e29e857e0ee447dcc3151ea5e572e","modified":1536718630619},{"_id":"source/_posts/709-to-lower-case.md","hash":"e00798fe4d0f91a3495758e82594a3d737b7a6f1","modified":1535079921000},{"_id":"source/_posts/848-shifting-letters.md","hash":"e81824f49cc3722ea95c8d62fd65e1c510894a18","modified":1535079923000},{"_id":"source/_posts/88-merge-sorted-array.md","hash":"25fff3e349a3290e2a8fb9c6d7b4e0b716ac055b","modified":1538125824431},{"_id":"source/_posts/bff.md","hash":"59caa7b1130964d2aada8d9ec096e5eec33346b3","modified":1540985226919},{"_id":"source/_posts/es6-thunk.md","hash":"bf23c6af717c4fa95857ce5a812f74ce2250474d","modified":1540277104701},{"_id":"source/_posts/cat.md","hash":"d84a67265678ef7aa78c88a4b967ef8b28f62e02","modified":1540814319665},{"_id":"source/_posts/commands.md","hash":"d188928a7282d235c7a25ac1982e303fd22ccef3","modified":1540534838431},{"_id":"source/_posts/hello-world.md","hash":"f7fea3304acb8e278a3e8ae38da10fbdf671f3e8","modified":1534986932000},{"_id":"source/_posts/git-submodule.md","hash":"5904a103630317e288a4e6a8b0a809b94865fd13","modified":1538029362006},{"_id":"source/_posts/insomnia.md","hash":"fda0ed4197f5f0b401ee11f83759d5337d824a88","modified":1540207843124},{"_id":"source/_posts/js-async.md","hash":"83fc957425f2a48ba6d25c09f8449f0d5a7735c0","modified":1536726503481},{"_id":"source/_posts/ideals30.md","hash":"0fab806f6d98e79b2ce37d4ad45beab18f2f3576","modified":1538029241288},{"_id":"source/_posts/js-var-and-let.md","hash":"8980363b084a63b3a6900f7b97f729f38b105f53","modified":1538125771461},{"_id":"source/_posts/js-prototype.md","hash":"a349b73901aa12f40f6a4efd024c1d5e778041c5","modified":1538125888943},{"_id":"source/_posts/leaf-nodes.md","hash":"4df6c8e51d11ae8747112df7f9a29ed593952ff5","modified":1539769127241},{"_id":"source/_posts/lodash-get.md","hash":"d8c6c1e0ba598cebdd466cc694128a83a6ca0856","modified":1538050259399},{"_id":"source/_posts/myfriend-kong.md","hash":"de8ffbfb4c86f185ac6bc672c981449f09c6dd0c","modified":1539830121026},{"_id":"source/_posts/node-sass.md","hash":"bbf57df7fcd2324f812e2c2046805de87b82164f","modified":1538111446917},{"_id":"source/_posts/promiseaplus.md","hash":"19db7eed83792bdd1c51536f1e3e9db6dbc67778","modified":1535294332000},{"_id":"source/_posts/phrase.md","hash":"b5916c7f8c7ca23ea5aaf6bfa591a06e37d5c202","modified":1538220496521},{"_id":"source/_posts/pseudo.md","hash":"54f4f29585d0ff8cf7529cea0a18c2f3964233aa","modified":1536718630619},{"_id":"source/_posts/single-number.md","hash":"35e505a1b0649ad8ee78a96fec55074162d98639","modified":1538125781584},{"_id":"source/_posts/postgraduate.md","hash":"d50c0c5cdba9d72da76865914e665dfe1bcc40a2","modified":1540553626436},{"_id":"source/_posts/sass.md","hash":"0b1a8fc968ce34eecd1f44703b29a92284349f1b","modified":1536825457482},{"_id":"source/_posts/vue-mixin.md","hash":"4749ce3342ed2a74b8d7daf1ac23849e61951551","modified":1540468047756},{"_id":"source/_posts/taiwan-local-mask.md","hash":"25323e7390be255decee37cc03b1083bdcdb6d0d","modified":1539173186494},{"_id":"source/_posts/vue-router-code.md","hash":"457e8d909fa3d910c1b6fb6677bda3e164c40cbb","modified":1538038796126},{"_id":"source/_posts/vuex.md","hash":"0a1ad27957703eda39f6fa1f8745e8d480c17619","modified":1539862612560},{"_id":"source/tags/index.md","hash":"98b2880064fbc44dab31243df74e7409208e0b3c","modified":1534984007000},{"_id":"source/_posts/webpack.md","hash":"e7ae89813aeb1eaf5f7d3ddab12c6cd02c86029a","modified":1537237876342},{"_id":"source/_posts/zhoujiang.md","hash":"9c94d8953dccc5e976b0f9e0f886bf1dcc658907","modified":1540535262924},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1539767534333},{"_id":"source/images/tree13.png","hash":"13ceef402ecabb03a524e2431722e98778b793bc","modified":1539767539916},{"_id":"source/images/tree12.png","hash":"042777e74dd4124a1f17bdbe0d37004cfaed4bf9","modified":1539767284447},{"_id":"source/images/tree14.png","hash":"100cfe2b3c2342953bfc87889594d43d4d8ad296","modified":1539767592218},{"_id":"source/images/tree11.png","hash":"9dd6f5da3228fd9a5563ca82c30dd0910ef1f436","modified":1539767191069},{"_id":"source/images/tree18.png","hash":"233ffc24315d1d98554a84223dd74ce0e7ccf5b2","modified":1539767850256},{"_id":"source/images/tree15.png","hash":"8f33848ee32426f224abfa855399915eec2c8c95","modified":1539767649328},{"_id":"source/images/tree16.png","hash":"759932ea13ae17ec738a8c43131631de983ce448","modified":1539767727963},{"_id":"source/images/tree17.png","hash":"2db1eddbaec7b6c59ce77cb5f4abe81ab824a9b6","modified":1539767802849},{"_id":"source/images/tree19.png","hash":"68ea54ae00dc76d2ec449fa95d4daeb2e564953d","modified":1539767873544},{"_id":"source/images/tree20.png","hash":"876963784cb2aef25193b4432ca3a434619ba5d0","modified":1539767896710},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1534980119000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1534980119000},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"4cb81cdfd84106bbe75ce4700972554714bd4001","modified":1536662477062},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1534980043000},{"_id":"themes/next/.git/index","hash":"403441e19ce10ccb342b262700f6f530840270c2","modified":1536741322802},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1534980119000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1534980119000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1534980119000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1534980119000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1534980119000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1534980119000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1534980119000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1534980119000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1534980119000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1534980119000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1534980119000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1534980119000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1534980119000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1534980119000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1534980119000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1534980119000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1534980119000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1534980119000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1534980119000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1534980119000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1534980119000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1534980119000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1534980119000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1534980119000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1534980119000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1534980119000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1534980119000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1534980119000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1534980119000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1534980119000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1534980119000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1534980119000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1534980119000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1534980119000},{"_id":"source/images/tree10.png","hash":"1ff735763e3b1f9bdbc13ed60f3ac6377b6c4fc4","modified":1539767119921},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534980119000},{"_id":"source/images/tree1.png","hash":"b14d361a0c15ab6b32fe75e1646c053f22c1143f","modified":1539765743931},{"_id":"source/images/tree2.png","hash":"25537c54527aa4dd1bcd3e96026f6a74f9ed0895","modified":1539765796046},{"_id":"source/images/tree3.png","hash":"492cc4669bbdaedf20fc8d06603b5d4561265c95","modified":1539765993208},{"_id":"source/images/tree4.png","hash":"279a787051582b9c627c76e1828b401417b22caa","modified":1539766029791},{"_id":"source/images/tree6.png","hash":"80724711120fa7adb1a2288a323fcc746ee4bac0","modified":1539766174737},{"_id":"source/images/tree5.png","hash":"26b4adfc9fdfefdfb27e7074b1efe5403506a7e4","modified":1539766140034},{"_id":"source/images/tree7.png","hash":"332529467d3ba807d24cc838074ca51561372065","modified":1539766199825},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1534980043000},{"_id":"source/images/tree8.png","hash":"4e36dbc4d715324849d40f7c1e5364388d960a7b","modified":1539766232076},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1534980043000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1534980043000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1534980043000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1534980043000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1534980043000},{"_id":"source/images/tree9.png","hash":"9cf2c60d979935c9a1dac89aa28b17219bae8fcc","modified":1539766258079},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1534980043000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1534980043000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1534980043000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1534980043000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1534980043000},{"_id":"themes/next/.git/logs/HEAD","hash":"8e8fcd1ddaad02c534cf33222a7c3aeb27591600","modified":1536661763354},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534980119000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534980119000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1534980119000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1534980119000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1534980119000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1534980119000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1534980119000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1534980119000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1534980119000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1534980119000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1534980119000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1534980119000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1534980119000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1534980119000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1534980119000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1534980119000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1534980119000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1534980119000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1534980119000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1534980119000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1534980119000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1534980119000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1534980119000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1534980119000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1534980119000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1534980119000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1534980119000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1534980119000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1534980119000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1534980119000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1534980119000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1534980119000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1534980119000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1534980119000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1534980119000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1534980119000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534980119000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534980119000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534980119000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534980119000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534980119000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534980119000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534980119000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534980119000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534980119000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534980119000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534980119000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534980119000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534980119000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534980119000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1534980119000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534980119000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534980119000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534980119000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534980119000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534980119000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534980119000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534980119000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534980119000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534980119000},{"_id":"themes/next/.git/objects/72/7dc78be8196de5d5dd0760e94a5ef671c957f8","hash":"cb09f38f725af338cc9d3c527416fb0c68f025af","modified":1536661759260},{"_id":"themes/next/.git/objects/39/782cf38765f0dee58e0656c31272787e2b3245","hash":"d0ab91f58804e39a5342ee9008a54ff346bc9d5e","modified":1536661759258},{"_id":"themes/next/.git/objects/7c/457cf0a82493f163fbb3cac6eab626590221bc","hash":"ad375070cd215c844885aa65c84c21b56518def7","modified":1536661759257},{"_id":"themes/next/.git/objects/2a/24afb7b412dcef2e5939ac6b7b691c6d51b8e6","hash":"767d68d63ddbf730aa4b31f4c36df526a54c71be","modified":1536661759259},{"_id":"themes/next/.git/objects/54/c40f22e562895492305ae2b69761508b43ecc1","hash":"7902ec78627fc0566a5def17bd91b7bcf00c7c37","modified":1536661763353},{"_id":"themes/next/.git/objects/b9/a4485f83344b956103f9f91e7d65bcdc7f76f7","hash":"5f4fd9274f72c65144879773ec0388e117e2708b","modified":1536661759258},{"_id":"themes/next/.git/objects/c0/089fe7209b2468418357bcb32b408219ac29af","hash":"b361ed15908ab871048912cff8fa3a3216db7157","modified":1536661759259},{"_id":"themes/next/.git/objects/ba/9d8e9a96893714df63bbc8afa1904751830e23","hash":"ce823aa569112c9af27afca18fb847b240eeb6b6","modified":1536661754172},{"_id":"themes/next/.git/refs/heads/master","hash":"13af4e6a06ac54f9f28ca489ea4869c8f406c9c4","modified":1536661763354},{"_id":"themes/next/.git/objects/f6/461bd6dce94095b6c47bad9af19809fed92ee4","hash":"75719e593e976e88ae104c3c01c8d589a1115050","modified":1536661754173},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1534980119000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1534980119000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1534980119000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1534980119000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1534980119000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1534980119000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1534980119000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1534980119000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1534980119000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1534980119000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1534980119000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1534980119000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1534980119000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1534980119000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1534980119000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1534980119000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1534980119000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1534980119000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1534980119000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1534980119000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1534980119000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1534980119000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1534980119000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1534980119000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1534980119000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1534980119000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1534980119000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1534980119000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1534980119000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1534980119000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1534980119000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1534980119000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1534980119000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1534980119000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1534980119000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1534980119000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1534980119000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1534980119000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1534980119000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534980119000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1534980119000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1534980119000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1534980119000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1534980119000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1534980119000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1534980119000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1534980119000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1534980119000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1534980119000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1534980119000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1534980119000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1534980119000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1534980119000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1534980119000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1534980119000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1534980119000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1534980119000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1534980119000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1534980119000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1534980119000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1534980119000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1534980119000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1534980119000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1534980119000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1534980119000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1534980119000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1534980119000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1534980119000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534980119000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534980119000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534980119000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534980119000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"8e8fcd1ddaad02c534cf33222a7c3aeb27591600","modified":1536661763354},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1534980119000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1534980119000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1534980119000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1534980119000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1534980119000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1534980119000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1534980119000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1534980119000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1534980119000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1534980119000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1534980119000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1534980119000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1534980119000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1534980119000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1534980119000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1534980119000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1534980119000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1534980119000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1534980119000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534980119000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"bd213fdaaab86c5ba2c5e085a243d94932ef4037","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"a5f087c3efc0629dbbe73e997b9bc13e893e3e54","modified":1534981528000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1534980119000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1534980119000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534980119000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1534980119000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1534980119000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1534980119000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1534980119000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1534980119000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1534980119000},{"_id":"themes/next/.git/objects/pack/pack-c612b977fdee8f070a000761134eeb6350850a38.idx","hash":"baccc333989b5a1b1719965c6c3a9891cce61ff6","modified":1534980119000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1534980119000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1534980119000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1534980119000},{"_id":"themes/next/.git/objects/pack/pack-c612b977fdee8f070a000761134eeb6350850a38.pack","hash":"1310fd9358c94811f585a7fa3724d7431f130898","modified":1534980119000},{"_id":"public/tags/index.html","hash":"74cd8216419aaa640794ba0063258f8777963f06","modified":1540898890189},{"_id":"public/2018/10/29/bff/index.html","hash":"1e19353ba205f1d03d812ad4f8b639cf1bfd6885","modified":1540985246679},{"_id":"public/2018/10/23/zhoujiang/index.html","hash":"6d55a25ceb29cfe8d99e1a194bb1dbbd50138cca","modified":1540898890190},{"_id":"public/2018/10/22/insomnia/index.html","hash":"e3cf9a4a63d01c502dae0f4f916e90fcd1435479","modified":1540898890190},{"_id":"public/2018/10/10/taiwan-local-mask/index.html","hash":"9d66e4deb4b4beee164261257cb9b1a4fa990015","modified":1540898890190},{"_id":"public/2018/09/29/phrase/index.html","hash":"65d4f20bcb60a44932c2662e936014773a87a96a","modified":1540898890190},{"_id":"public/2018/09/20/ideals30/index.html","hash":"e145b9688dba03176bfb5208bcbc3f1116bde477","modified":1540898890190},{"_id":"public/2018/08/23/001-two-sum/index.html","hash":"10c4bb0bc2e27235ddc717395df087fa3f9edf67","modified":1540898890190},{"_id":"public/2018/08/23/hello-world/index.html","hash":"af75208074acf97316433cc2052349632dc0dd92","modified":1540898890190},{"_id":"public/archives/index.html","hash":"7b2136f647a11565822dcf9490b29b39f01fd78b","modified":1540898890190},{"_id":"public/archives/page/4/index.html","hash":"462ea8b47fcf73f0687b28f7bf1c5944d468b913","modified":1540898890190},{"_id":"public/archives/2018/index.html","hash":"510205eb12f1661686ab559baa9bf5165bbeb834","modified":1540898890190},{"_id":"public/archives/2018/page/4/index.html","hash":"b22cabfb2039fcfbe3f50becae4e36c1b678a833","modified":1540898890190},{"_id":"public/archives/2018/08/page/2/index.html","hash":"2dda8c48c1d5007731985a10eda040c8a4219673","modified":1540898890191},{"_id":"public/archives/2018/09/index.html","hash":"87195cb22cff09ea149ef5a6e28e93f20c252ecf","modified":1540898890191},{"_id":"public/archives/2018/09/page/2/index.html","hash":"6effe6785c7cede7d6968aa4c910b11167fac8dc","modified":1540898890191},{"_id":"public/archives/2018/10/index.html","hash":"8bd7e8e665b86433d51afd685c4b22e68d5a7a5e","modified":1540898890191},{"_id":"public/archives/2018/10/page/2/index.html","hash":"42ebbc19927542bb56af4c758ba8f1190a597292","modified":1540898890191},{"_id":"public/tags/leetcode/index.html","hash":"567185db49924334c54e011eabc9f2a3ac719a2c","modified":1540898890191},{"_id":"public/tags/javascript/index.html","hash":"dd3ce22210ece676b103935832ae9b531bca9f8c","modified":1540898890191},{"_id":"public/tags/javascript/page/2/index.html","hash":"2539f48f6b73e296dbce05005d9a61f2f808ba9c","modified":1540898890191},{"_id":"public/tags/字符串/index.html","hash":"494d07595febf919ee0fee246780f4e281ec0883","modified":1540898890191},{"_id":"public/tags/数学/index.html","hash":"4d59e26e6a729835d839ba3c043544a673e2331f","modified":1540898890191},{"_id":"public/tags/数组/index.html","hash":"951083a473a2c2506a830a6d13e4b15dbc7aa996","modified":1540898890191},{"_id":"public/tags/服务/index.html","hash":"385df56f1e902a4cf30a8e7cb1bd0cb309c45b05","modified":1540898890191},{"_id":"public/tags/后端/index.html","hash":"1030aa14fec936e5a387f11f470fd9a59d314e37","modified":1540898890197},{"_id":"public/tags/随笔/index.html","hash":"65a5b470f9891e6e369a35736f0a20ed5410c645","modified":1540898890198},{"_id":"public/tags/碎片/index.html","hash":"c48c2af74f0ee2b2367eaa2aa9615f7bd54f05b0","modified":1540898890198},{"_id":"public/tags/generator/index.html","hash":"56c03b8c44bf9818505ec6ed94dc749bf559e1b0","modified":1540898890198},{"_id":"public/tags/shell/index.html","hash":"5f4bc6bea0cb18ae89f6fa33ef912c278113c770","modified":1540898890198},{"_id":"public/tags/Git/index.html","hash":"eddcf7f2f0851255b07f0d2cbfe9913b3d8f7446","modified":1540898890198},{"_id":"public/tags/promise/index.html","hash":"e1da5a8326e81b57704f18373b7628bd24c1843b","modified":1540898890198},{"_id":"public/tags/async-await/index.html","hash":"62a78ce882f4a495d0eba0fb2172255d3ccbcad7","modified":1540898890198},{"_id":"public/tags/面试/index.html","hash":"684783263ea55a866de1d3d026d19d17dd3aaf41","modified":1540898890198},{"_id":"public/tags/树/index.html","hash":"c62cd6a99c9b7ab892015477a2dfc80c11262c8b","modified":1540898890198},{"_id":"public/tags/数据结构/index.html","hash":"380f62108a295a427678c91c503deae33b495e92","modified":1540898890198},{"_id":"public/tags/原型/index.html","hash":"f7563114ab92e4e0e7e6cab26ed700ff6343fc7f","modified":1540898890198},{"_id":"public/tags/lodash/index.html","hash":"ac6175ae63b7b34a588127a99de0564589957c89","modified":1540898890198},{"_id":"public/tags/源码/index.html","hash":"975056fc1d637fba36134184a7a96aeaf16fc454","modified":1540898890199},{"_id":"public/tags/记事/index.html","hash":"418ffb867993f0fcb33a68d6b946b4e2bd90c123","modified":1540898890199},{"_id":"public/tags/node/index.html","hash":"38216169339c2ca1178fa03cd741ca83f7478a0a","modified":1540898890199},{"_id":"public/tags/sass/index.html","hash":"4f40c6a19100ee14128c0c331bee27c79d221df0","modified":1540898890199},{"_id":"public/tags/伪元素/index.html","hash":"a73768f7e3a597a3dc33e99fbb655849cddaa6a1","modified":1540898890199},{"_id":"public/tags/css/index.html","hash":"a7a8bff9e50abcbe5e70fd5f6df006909ba75cda","modified":1540898890199},{"_id":"public/tags/伪类/index.html","hash":"35f9b6c9d54d00bcaa8c24dcec2c427b8be85c6e","modified":1540898890199},{"_id":"public/tags/整数/index.html","hash":"0eea01d72d38a018ae6d4e95d0bcde56190396ae","modified":1540898890199},{"_id":"public/tags/去重/index.html","hash":"370beaf61bc37aef2e882795cf6c5f90f0a6242d","modified":1540898890199},{"_id":"public/tags/vue/index.html","hash":"42ba05d4bb0f4c85afc8584e24672727f1e874b9","modified":1540898890199},{"_id":"public/tags/mixin/index.html","hash":"2f2d44704e3ec798349079a2c78ecde8eb08b88b","modified":1540898890199},{"_id":"public/tags/护肤/index.html","hash":"a6ce7a1d588a0d98e943f50f104cc20e887472fa","modified":1540898890200},{"_id":"public/tags/面膜/index.html","hash":"1ee58c9b7b25c140d1cda4d0d5cc4f7c134d3258","modified":1540898890200},{"_id":"public/tags/台湾/index.html","hash":"6331debf4abe193c3a5597b4e3b33c9c524f5eaa","modified":1540898890200},{"_id":"public/tags/vuex/index.html","hash":"46e458d7feda9dc3f1b3c04f0c490c0f07f54b9e","modified":1540898890200},{"_id":"public/tags/vue-router/index.html","hash":"d055d0ba693d252edff16ace603a8151cd1dff99","modified":1540898890200},{"_id":"public/tags/webpack/index.html","hash":"2c5bdb0cf9d6fc76edb9ca2617144935e9bff269","modified":1540898890200},{"_id":"public/2018/10/28/cat/index.html","hash":"ac5ebb21f170739d089e07f9cb94341390090c3e","modified":1540898890200},{"_id":"public/2018/10/25/postgraduate/index.html","hash":"292131633d9cdd7fc16de1cf84ee405a6d31f81d","modified":1540898890200},{"_id":"public/2018/10/24/vue-mixin/index.html","hash":"f5b9ab815b0325d83f15e216b28edf785f4a1f41","modified":1540898890200},{"_id":"public/2018/10/19/es6-thunk/index.html","hash":"768c2aaa97e399459993853c2bc579eb8354dbd4","modified":1540898890200},{"_id":"public/2018/10/17/vuex/index.html","hash":"17fef5fd495cdc9323f992018c5612aa34682779","modified":1540898890200},{"_id":"public/2018/10/16/myfriend-kong/index.html","hash":"506b12e544d8e58164f85dc9ffb6872369f0b027","modified":1540898890200},{"_id":"public/2018/10/11/leaf-nodes/index.html","hash":"a21fc0e13f5b87c5fbd59bb4353f5e40ffb794a6","modified":1540898890200},{"_id":"public/2018/10/09/commands/index.html","hash":"a7432e15922dfc311b645d98e36e658120016ffc","modified":1540898890200},{"_id":"public/2018/09/28/node-sass/index.html","hash":"826eddb778a1ff2e02813b931bfe0d518ecf6ed7","modified":1540898890200},{"_id":"public/2018/09/27/vue-router-code/index.html","hash":"a952fef19f20cac6f5af5bae76fdd53d0f9df44a","modified":1540898890200},{"_id":"public/2018/09/26/lodash-get/index.html","hash":"df79070f22c1c9a0c102e8552a1c3c7e9672909e","modified":1540898890200},{"_id":"public/2018/09/25/js-var-and-let/index.html","hash":"ad27a0b0baa9c8a39fe384cd20f1e115d56d8ee6","modified":1540898890200},{"_id":"public/2018/09/24/single-number/index.html","hash":"26604b581f0d402acfc4e8501bd72f1a7fb5997c","modified":1540898890200},{"_id":"public/2018/09/23/js-prototype/index.html","hash":"2901990cc0ae17b95a59f5049929e394e02dcbb7","modified":1540898890200},{"_id":"public/2018/09/14/webpack/index.html","hash":"6900472edaa002f3d1b4cd2e3301a7ed9c9a611f","modified":1540898890200},{"_id":"public/2018/09/13/sass/index.html","hash":"b0b01dc9044fd4a234435d5c74736af295d51ac9","modified":1540898890201},{"_id":"public/2018/09/12/git-submodule/index.html","hash":"0fe940b7d0d43894c6882ad7f0d5335511e56823","modified":1540898890201},{"_id":"public/2018/09/11/003-longest-substring-without-repeatint-characters/index.html","hash":"6c5c58b98f6c3480fe7ee7e23680dfe75f541bcb","modified":1540898890201},{"_id":"public/2018/08/30/122-best-time-to-bssII/index.html","hash":"12b63433b06d18ba33a636e3b8f467859eca1b54","modified":1540898890201},{"_id":"public/2018/08/29/189-rotate-array/index.html","hash":"cb174268902d7c9efd6d5e2c3194b3ae062f0a37","modified":1540898890201},{"_id":"public/2018/08/28/pseudo/index.html","hash":"f61bb24441899cf69ca3badab5f7ca88f4f8f97f","modified":1540898890201},{"_id":"public/2018/08/27/js-async/index.html","hash":"7de6b4a8aa92b2e2cb550bcf38182df5ff795ff7","modified":1540898890201},{"_id":"public/2018/08/26/88-merge-sorted-array/index.html","hash":"6024a68fba713593b7eacd77f4804b07bda58ab5","modified":1540898890201},{"_id":"public/2018/08/25/promiseaplus/index.html","hash":"a22093aab9bca0e374b5a3f14f62d1d41a08fa98","modified":1540898890201},{"_id":"public/2018/08/24/848-shifting-letters/index.html","hash":"2d449cb0b13b30813e6e250465014812b29ecd0e","modified":1540898890201},{"_id":"public/2018/08/23/709-to-lower-case/index.html","hash":"7fe966cdef5a7b853acf8d5997dc99dba4925092","modified":1540898890201},{"_id":"public/2018/08/23/007-reverse-integer/index.html","hash":"acd2088dd33c48e60739b687e22cae292a354092","modified":1540898890201},{"_id":"public/archives/page/2/index.html","hash":"158590b9b3891261f9ae1caf82846a3e3d31126d","modified":1540898890201},{"_id":"public/archives/page/3/index.html","hash":"72721e7d72a784f7aaee5c6d02e5216d3d1eaae1","modified":1540898890201},{"_id":"public/archives/2018/page/2/index.html","hash":"35480e073db44c8177dea03762a7d83fd299f199","modified":1540898890201},{"_id":"public/archives/2018/page/3/index.html","hash":"f17caa46e4ba6a543ade1c9b4e5c7fec687545f9","modified":1540898890201},{"_id":"public/archives/2018/08/index.html","hash":"1524286d656a112a8b82230837dfd00f9d3ac1c2","modified":1540898890201},{"_id":"public/index.html","hash":"2263196bb4d4d089c8167499457315835dc088fd","modified":1540985246680},{"_id":"public/page/2/index.html","hash":"121808b6dd304eeca0169088109b9824a9378121","modified":1540898890201},{"_id":"public/page/3/index.html","hash":"46dea9c64e365c1b56d2a29854f15ae03e86e01e","modified":1540898890201},{"_id":"public/page/4/index.html","hash":"0dee5710fa9eb242014c0899fe8e05509e0de8b8","modified":1540898890201},{"_id":"public/images/tree13.png","hash":"13ceef402ecabb03a524e2431722e98778b793bc","modified":1540898890218},{"_id":"public/images/tree12.png","hash":"042777e74dd4124a1f17bdbe0d37004cfaed4bf9","modified":1540898890218},{"_id":"public/images/tree14.png","hash":"100cfe2b3c2342953bfc87889594d43d4d8ad296","modified":1540898890218},{"_id":"public/images/tree11.png","hash":"9dd6f5da3228fd9a5563ca82c30dd0910ef1f436","modified":1540898890218},{"_id":"public/images/tree18.png","hash":"233ffc24315d1d98554a84223dd74ce0e7ccf5b2","modified":1540898890219},{"_id":"public/images/tree15.png","hash":"8f33848ee32426f224abfa855399915eec2c8c95","modified":1540898890219},{"_id":"public/images/tree16.png","hash":"759932ea13ae17ec738a8c43131631de983ce448","modified":1540898890219},{"_id":"public/images/tree17.png","hash":"2db1eddbaec7b6c59ce77cb5f4abe81ab824a9b6","modified":1540898890219},{"_id":"public/images/tree19.png","hash":"68ea54ae00dc76d2ec449fa95d4daeb2e564953d","modified":1540898890219},{"_id":"public/images/tree20.png","hash":"876963784cb2aef25193b4432ca3a434619ba5d0","modified":1540898890219},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1540898890219},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1540898890219},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1540898890219},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1540898890219},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1540898890219},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1540898890219},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1540898890219},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1540898890219},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1540898890219},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1540898890219},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1540898890219},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1540898890220},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540898890220},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540898890220},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1540898890220},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1540898890220},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1540898890220},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1540898890220},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1540898890220},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1540898890220},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1540898890220},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1540898890220},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1540898890220},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1540898890220},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1540898890220},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1540898890220},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1540898890220},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1540898890220},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1540898890220},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1540898890221},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1540898890221},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1540898890221},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1540898890221},{"_id":"public/images/tree10.png","hash":"1ff735763e3b1f9bdbc13ed60f3ac6377b6c4fc4","modified":1540898890717},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1540898890717},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1540898890720},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1540898890727},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1540898890727},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1540898890728},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1540898890728},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1540898890728},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1540898890728},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1540898890728},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1540898890728},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1540898890728},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1540898890728},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1540898890728},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1540898890728},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1540898890728},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1540898890728},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1540898890728},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1540898890729},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1540898890729},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1540898890729},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1540898890729},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1540898890729},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1540898890730},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1540898890730},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1540898890730},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1540898890730},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1540898890730},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1540898890730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1540898890730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1540898890730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1540898890730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1540898890730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1540898890730},{"_id":"public/css/main.css","hash":"8e19673d2c0827632af58554c006340e54f49a74","modified":1540898890730},{"_id":"public/images/tree1.png","hash":"b14d361a0c15ab6b32fe75e1646c053f22c1143f","modified":1540898890731},{"_id":"public/images/tree3.png","hash":"492cc4669bbdaedf20fc8d06603b5d4561265c95","modified":1540898890731},{"_id":"public/images/tree4.png","hash":"279a787051582b9c627c76e1828b401417b22caa","modified":1540898890731},{"_id":"public/images/tree5.png","hash":"26b4adfc9fdfefdfb27e7074b1efe5403506a7e4","modified":1540898890731},{"_id":"public/images/tree7.png","hash":"332529467d3ba807d24cc838074ca51561372065","modified":1540898890731},{"_id":"public/images/tree6.png","hash":"80724711120fa7adb1a2288a323fcc746ee4bac0","modified":1540898890731},{"_id":"public/images/tree8.png","hash":"4e36dbc4d715324849d40f7c1e5364388d960a7b","modified":1540898890731},{"_id":"public/images/tree9.png","hash":"9cf2c60d979935c9a1dac89aa28b17219bae8fcc","modified":1540898890732},{"_id":"public/images/tree2.png","hash":"25537c54527aa4dd1bcd3e96026f6a74f9ed0895","modified":1540898890732},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1540898890732},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1540898890732},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1540898890732},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1540898890744},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1540898890745},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1540898890745},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1540898890745},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1540898890745},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1540898890746},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1540898890746},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1540898890746},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1540898890752},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1540898890752},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1540898890755},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1540898890755},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1540898890762},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1540898890762},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1540898890764},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1540898890764},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1540898890764},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1540898890764},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1540898890764},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1540898890768},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1540898890768},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1540898890769},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1540898890771},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1540898890772},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1540898890775},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1540898890776},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1540898890778},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1540898890789},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1540898890792}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2018-08-22T23:56:44.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-23 07:56:44\ntype: \"tags\"\n---\n","updated":"2018-08-23T00:26:47.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjnvnetmz00018b05scwnt15g","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"【LeetCode】1. two Sum","date":"2018-08-23T00:53:08.000Z","_content":"\n> 题目连接: https://leetcode.com/problems/two-sum/description/\n\n### 题目描述\n\n- 输入: 整数数组 nums，目标和 target\n- 输出: 输出 nums 中想加和为 target 的两个数的坐标索引\n\n### demo\n\n- 输入: [2, 7, 11, 15], 9\n- 输出: [0, 1]   // 2 + 7 === 9\n\n### 代码\n\n```\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    var result = [];\n    for(var i = 0; i < nums.length; i++) {\n        var index = nums.slice(i + 1).indexOf(target - nums[i]);\n        if (index > -1){\n            result.push(i);\n            result.push(index + i + 1);\n            delete index;\n            break;\n        }\n    }\n    return result;\n};\n```\n","source":"_posts/001-two-sum.md","raw":"---\ntitle: 【LeetCode】1. two Sum\ndate: 2018-08-23 08:53:08\ntags: ['leetcode', 'javascript']\n---\n\n> 题目连接: https://leetcode.com/problems/two-sum/description/\n\n### 题目描述\n\n- 输入: 整数数组 nums，目标和 target\n- 输出: 输出 nums 中想加和为 target 的两个数的坐标索引\n\n### demo\n\n- 输入: [2, 7, 11, 15], 9\n- 输出: [0, 1]   // 2 + 7 === 9\n\n### 代码\n\n```\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    var result = [];\n    for(var i = 0; i < nums.length; i++) {\n        var index = nums.slice(i + 1).indexOf(target - nums[i]);\n        if (index > -1){\n            result.push(i);\n            result.push(index + i + 1);\n            delete index;\n            break;\n        }\n    }\n    return result;\n};\n```\n","slug":"001-two-sum","published":1,"updated":"2018-08-24T03:05:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetmu00008b05a0sfncad","content":"<blockquote>\n<p>题目连接: <a href=\"https://leetcode.com/problems/two-sum/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/two-sum/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><ul>\n<li>输入: 整数数组 nums，目标和 target</li>\n<li>输出: 输出 nums 中想加和为 target 的两个数的坐标索引</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><ul>\n<li>输入: [2, 7, 11, 15], 9</li>\n<li>输出: [0, 1]   // 2 + 7 === 9</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number[]&#125; nums</span><br><span class=\"line\"> * @param &#123;number&#125; target</span><br><span class=\"line\"> * @return &#123;number[]&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var twoSum = function(nums, target) &#123;</span><br><span class=\"line\">    var result = [];</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        var index = nums.slice(i + 1).indexOf(target - nums[i]);</span><br><span class=\"line\">        if (index &gt; -1)&#123;</span><br><span class=\"line\">            result.push(i);</span><br><span class=\"line\">            result.push(index + i + 1);</span><br><span class=\"line\">            delete index;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>题目连接: <a href=\"https://leetcode.com/problems/two-sum/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/two-sum/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><ul>\n<li>输入: 整数数组 nums，目标和 target</li>\n<li>输出: 输出 nums 中想加和为 target 的两个数的坐标索引</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><ul>\n<li>输入: [2, 7, 11, 15], 9</li>\n<li>输出: [0, 1]   // 2 + 7 === 9</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number[]&#125; nums</span><br><span class=\"line\"> * @param &#123;number&#125; target</span><br><span class=\"line\"> * @return &#123;number[]&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var twoSum = function(nums, target) &#123;</span><br><span class=\"line\">    var result = [];</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        var index = nums.slice(i + 1).indexOf(target - nums[i]);</span><br><span class=\"line\">        if (index &gt; -1)&#123;</span><br><span class=\"line\">            result.push(i);</span><br><span class=\"line\">            result.push(index + i + 1);</span><br><span class=\"line\">            delete index;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"【Leetcode】3. Longest Substring Without Repeating Characters","date":"2018-09-11T13:58:34.000Z","_content":"\n> 题目链接：https://leetcode.com/problems/longest-substring-without-repeating-characters/description/\n\n## 题目描述\n\n给定一个字符串，找出不含有重复字符的最长子串的长度\n\n## 输入输出\n\n**示例1：**\n- 输入：\"abcabcbb\"\n- 输出：3\n\n**示例2：**\n- 输入：\"bbbbb\"\n- 输出：1\n\n## 思路\n\n前几天做了一道通过滑动窗口解决道问题，这里依然借用这个思想。\n\n首先有一个 map 对象，来存字符串中出现的单个字符最近的坐标（可以理解为最接近right的坐标）。如果 left 和 right 中出现了重复字符，则 left 指针移动道重复字符后一位，当 right 和 left 的距离大于 sum， 则 sum = right - left\n\n## 代码\n\n```javascript\n\n/**\n * 时间复杂度 O(n)\n * 空间复杂度 O(n)\n */\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    var map = {};\n    var left = sum = 0;\n    var right = -1;\n    \n    while(right++ < s.length - 1 && left <= s.length) {\n        // 如果当前字符在 无重复字符串中已存在，则 左指针从重复字符的下一位开始\n        // 同时重复字符的坐标变更\n        if(map[s[right]] && map[s[right]] >= left) {\n            left = map[s[right]];\n            map[s[right]] = right + 1;\n        }\n        // 如果不存在，则添加到 map 中\n        else {\n            map[s[right]] = right + 1;\n            if(right - left + 1 > sum) {\n                sum = right - left + 1;\n            } \n        }\n    }\n    return sum;\n};\n\n```\n","source":"_posts/003-longest-substring-without-repeatint-characters.md","raw":"---\ntitle: 【Leetcode】3. Longest Substring Without Repeating Characters\ndate: 2018-09-11 21:58:34\ntags: ['leetcode', 'javascript', '字符串']\n---\n\n> 题目链接：https://leetcode.com/problems/longest-substring-without-repeating-characters/description/\n\n## 题目描述\n\n给定一个字符串，找出不含有重复字符的最长子串的长度\n\n## 输入输出\n\n**示例1：**\n- 输入：\"abcabcbb\"\n- 输出：3\n\n**示例2：**\n- 输入：\"bbbbb\"\n- 输出：1\n\n## 思路\n\n前几天做了一道通过滑动窗口解决道问题，这里依然借用这个思想。\n\n首先有一个 map 对象，来存字符串中出现的单个字符最近的坐标（可以理解为最接近right的坐标）。如果 left 和 right 中出现了重复字符，则 left 指针移动道重复字符后一位，当 right 和 left 的距离大于 sum， 则 sum = right - left\n\n## 代码\n\n```javascript\n\n/**\n * 时间复杂度 O(n)\n * 空间复杂度 O(n)\n */\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    var map = {};\n    var left = sum = 0;\n    var right = -1;\n    \n    while(right++ < s.length - 1 && left <= s.length) {\n        // 如果当前字符在 无重复字符串中已存在，则 左指针从重复字符的下一位开始\n        // 同时重复字符的坐标变更\n        if(map[s[right]] && map[s[right]] >= left) {\n            left = map[s[right]];\n            map[s[right]] = right + 1;\n        }\n        // 如果不存在，则添加到 map 中\n        else {\n            map[s[right]] = right + 1;\n            if(right - left + 1 > sum) {\n                sum = right - left + 1;\n            } \n        }\n    }\n    return sum;\n};\n\n```\n","slug":"003-longest-substring-without-repeatint-characters","published":1,"updated":"2018-09-12T02:17:10.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetn100028b05kexja5zr","content":"<blockquote>\n<p>题目链接：<a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/longest-substring-without-repeating-characters/description/</a></p>\n</blockquote>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个字符串，找出不含有重复字符的最长子串的长度</p>\n<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>示例1：</strong></p>\n<ul>\n<li>输入：”abcabcbb”</li>\n<li>输出：3</li>\n</ul>\n<p><strong>示例2：</strong></p>\n<ul>\n<li>输入：”bbbbb”</li>\n<li>输出：1</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>前几天做了一道通过滑动窗口解决道问题，这里依然借用这个思想。</p>\n<p>首先有一个 map 对象，来存字符串中出现的单个字符最近的坐标（可以理解为最接近right的坐标）。如果 left 和 right 中出现了重复字符，则 left 指针移动道重复字符后一位，当 right 和 left 的距离大于 sum， 则 sum = right - left</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * 空间复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> right = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(right++ &lt; s.length - 1 &amp;&amp; left &lt;= s.length) &#123;</span><br><span class=\"line\">        // 如果当前字符在 无重复字符串中已存在，则 左指针从重复字符的下一位开始</span><br><span class=\"line\">        // 同时重复字符的坐标变更</span><br><span class=\"line\">        if(map[s[right]] &amp;&amp; map[s[right]] &gt;= left) &#123;</span><br><span class=\"line\">            left = map[s[right]];</span><br><span class=\"line\">            map[s[right]] = right + 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果不存在，则添加到 map 中</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            map[s[right]] = right + 1;</span><br><span class=\"line\">            if(right - left + 1 &gt; sum) &#123;</span><br><span class=\"line\">                sum = right - left + 1;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>题目链接：<a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/longest-substring-without-repeating-characters/description/</a></p>\n</blockquote>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个字符串，找出不含有重复字符的最长子串的长度</p>\n<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>示例1：</strong></p>\n<ul>\n<li>输入：”abcabcbb”</li>\n<li>输出：3</li>\n</ul>\n<p><strong>示例2：</strong></p>\n<ul>\n<li>输入：”bbbbb”</li>\n<li>输出：1</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>前几天做了一道通过滑动窗口解决道问题，这里依然借用这个思想。</p>\n<p>首先有一个 map 对象，来存字符串中出现的单个字符最近的坐标（可以理解为最接近right的坐标）。如果 left 和 right 中出现了重复字符，则 left 指针移动道重复字符后一位，当 right 和 left 的距离大于 sum， 则 sum = right - left</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * 空间复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> right = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(right++ &lt; s.length - 1 &amp;&amp; left &lt;= s.length) &#123;</span><br><span class=\"line\">        // 如果当前字符在 无重复字符串中已存在，则 左指针从重复字符的下一位开始</span><br><span class=\"line\">        // 同时重复字符的坐标变更</span><br><span class=\"line\">        if(map[s[right]] &amp;&amp; map[s[right]] &gt;= left) &#123;</span><br><span class=\"line\">            left = map[s[right]];</span><br><span class=\"line\">            map[s[right]] = right + 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果不存在，则添加到 map 中</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            map[s[right]] = right + 1;</span><br><span class=\"line\">            if(right - left + 1 &gt; sum) &#123;</span><br><span class=\"line\">                sum = right - left + 1;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"【LeetCode】7. reverse Integer","date":"2018-08-23T00:58:32.000Z","_content":"\n> 题目连接: https://leetcode.com/problems/reverse-integer/description/\n\n### 题目描述\n\n- 输入: 一个整数 x\n- 输出: 将 x 的每一位数字逆序输出\n- 注意: 整数区间  [−2的31次方,  2的31次方 − 1], 负数的负号要一直在首位，逆序后的数字也要在整数区间内\n\n### demo\n\n- case1\n    - 输入: 123\n    - 输出: 321\n- case2\n    - 输入: -123 \n    - 输出: -321\n- case3\n    - 输入: 1200\n    - 输出: 21\n\n### 思路\n\n先转换成字符串再反转，方便处理\n\n### 代码\n\n```\n/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    if (x === 0 || x < -1 * Math.pow(2, 31) || x > Math.pow(2, 31) - 1) {\n        return 0;\n    }\n    var y = x.toString();\n    var s = '';\n    var flag = 0;\n    for (var i = y.length - 1; i >= 0; i--) {\n        if (!flag && y[i] === '0') {\n            continue;\n        }\n        flag = 1;\n        s += y[i];\n        if (i === 0 && y[0] === '-') {\n            s = '-' + s;\n        }\n    }\n    delete y;\n    delete i;\n    delete flag;\n    s = parseInt(s);\n    if (s < -1 * Math.pow(2, 31) || s  > Math.pow(2, 31) - 1) {\n        return 0;\n    }\n    return parseInt(s);\n};\n```","source":"_posts/007-reverse-integer.md","raw":"---\ntitle: 【LeetCode】7. reverse Integer\ndate: 2018-08-23 08:58:32\ntags: ['leetcode', 'javascript']\n---\n\n> 题目连接: https://leetcode.com/problems/reverse-integer/description/\n\n### 题目描述\n\n- 输入: 一个整数 x\n- 输出: 将 x 的每一位数字逆序输出\n- 注意: 整数区间  [−2的31次方,  2的31次方 − 1], 负数的负号要一直在首位，逆序后的数字也要在整数区间内\n\n### demo\n\n- case1\n    - 输入: 123\n    - 输出: 321\n- case2\n    - 输入: -123 \n    - 输出: -321\n- case3\n    - 输入: 1200\n    - 输出: 21\n\n### 思路\n\n先转换成字符串再反转，方便处理\n\n### 代码\n\n```\n/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    if (x === 0 || x < -1 * Math.pow(2, 31) || x > Math.pow(2, 31) - 1) {\n        return 0;\n    }\n    var y = x.toString();\n    var s = '';\n    var flag = 0;\n    for (var i = y.length - 1; i >= 0; i--) {\n        if (!flag && y[i] === '0') {\n            continue;\n        }\n        flag = 1;\n        s += y[i];\n        if (i === 0 && y[0] === '-') {\n            s = '-' + s;\n        }\n    }\n    delete y;\n    delete i;\n    delete flag;\n    s = parseInt(s);\n    if (s < -1 * Math.pow(2, 31) || s  > Math.pow(2, 31) - 1) {\n        return 0;\n    }\n    return parseInt(s);\n};\n```","slug":"007-reverse-integer","published":1,"updated":"2018-08-24T03:05:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetn500048b05n79oj4u9","content":"<blockquote>\n<p>题目连接: <a href=\"https://leetcode.com/problems/reverse-integer/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/reverse-integer/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><ul>\n<li>输入: 一个整数 x</li>\n<li>输出: 将 x 的每一位数字逆序输出</li>\n<li>注意: 整数区间  [−2的31次方,  2的31次方 − 1], 负数的负号要一直在首位，逆序后的数字也要在整数区间内</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><ul>\n<li>case1<ul>\n<li>输入: 123</li>\n<li>输出: 321</li>\n</ul>\n</li>\n<li>case2<ul>\n<li>输入: -123 </li>\n<li>输出: -321</li>\n</ul>\n</li>\n<li>case3<ul>\n<li>输入: 1200</li>\n<li>输出: 21</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>先转换成字符串再反转，方便处理</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; x</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var reverse = function(x) &#123;</span><br><span class=\"line\">    if (x === 0 || x &lt; -1 * Math.pow(2, 31) || x &gt; Math.pow(2, 31) - 1) &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var y = x.toString();</span><br><span class=\"line\">    var s = &apos;&apos;;</span><br><span class=\"line\">    var flag = 0;</span><br><span class=\"line\">    for (var i = y.length - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">        if (!flag &amp;&amp; y[i] === &apos;0&apos;) &#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag = 1;</span><br><span class=\"line\">        s += y[i];</span><br><span class=\"line\">        if (i === 0 &amp;&amp; y[0] === &apos;-&apos;) &#123;</span><br><span class=\"line\">            s = &apos;-&apos; + s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delete y;</span><br><span class=\"line\">    delete i;</span><br><span class=\"line\">    delete flag;</span><br><span class=\"line\">    s = parseInt(s);</span><br><span class=\"line\">    if (s &lt; -1 * Math.pow(2, 31) || s  &gt; Math.pow(2, 31) - 1) &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return parseInt(s);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>题目连接: <a href=\"https://leetcode.com/problems/reverse-integer/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/reverse-integer/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><ul>\n<li>输入: 一个整数 x</li>\n<li>输出: 将 x 的每一位数字逆序输出</li>\n<li>注意: 整数区间  [−2的31次方,  2的31次方 − 1], 负数的负号要一直在首位，逆序后的数字也要在整数区间内</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><ul>\n<li>case1<ul>\n<li>输入: 123</li>\n<li>输出: 321</li>\n</ul>\n</li>\n<li>case2<ul>\n<li>输入: -123 </li>\n<li>输出: -321</li>\n</ul>\n</li>\n<li>case3<ul>\n<li>输入: 1200</li>\n<li>输出: 21</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>先转换成字符串再反转，方便处理</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; x</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var reverse = function(x) &#123;</span><br><span class=\"line\">    if (x === 0 || x &lt; -1 * Math.pow(2, 31) || x &gt; Math.pow(2, 31) - 1) &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var y = x.toString();</span><br><span class=\"line\">    var s = &apos;&apos;;</span><br><span class=\"line\">    var flag = 0;</span><br><span class=\"line\">    for (var i = y.length - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">        if (!flag &amp;&amp; y[i] === &apos;0&apos;) &#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag = 1;</span><br><span class=\"line\">        s += y[i];</span><br><span class=\"line\">        if (i === 0 &amp;&amp; y[0] === &apos;-&apos;) &#123;</span><br><span class=\"line\">            s = &apos;-&apos; + s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delete y;</span><br><span class=\"line\">    delete i;</span><br><span class=\"line\">    delete flag;</span><br><span class=\"line\">    s = parseInt(s);</span><br><span class=\"line\">    if (s &lt; -1 * Math.pow(2, 31) || s  &gt; Math.pow(2, 31) - 1) &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return parseInt(s);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"【Leetcode】122. Best Time to Buy and Sell Stock II","date":"2018-08-30T12:20:07.000Z","_content":"\n> 题目链接：https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/\n\n## 题目描述\n\n给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。可以进行多次买卖，但是比如在卖出之后才能再次买入\n\n## 输入输出\n\n**示例1：**\n\n- 输入: [7,1,5,3,6,4]\n- 输出: 7\n- 解释: 第二天买入（价格 1），第三天卖出（价格5），获得收益 5 - 1 = 4；第四天买入（价格3），第四天卖出（价格6），收益 6 - 3 = 3；总收益 4 + 3 = 7\n\n**示例2：**\n\n- 输入: [1,2,3,4,5]\n- 输出: 4\n- 解释: 第一天买入（价格1），第五天卖出（价格5），总收益 5 - 1 = 4\n\n## 思路\n\n一遍循环，价格下降的时候找出最合适的买入价；价格上升的时候找出最合适的卖出价，卖出和买入价格都有值的时候计算出当前收益\n\n## 代码\n\n```javascript\n/**\n * 时间复杂度：O(n)\n * 空间负责度：O(3) = O(1)\n */\n/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    var sum = 0;\n    var buy = prices[0];\n    var sale = -1;\n    for(var i = 1 ; i < prices.length; i++) {\n        if(prices[i] < prices[i - 1]) {\n            // 如果走势开始下降，并且之前已经有最大值和最小值\n            // 则计算出之前买入和卖出的最大收益\n            if(sale !== -1) {\n                sum += sale - buy;\n                sale = -1;\n            }\n            buy = prices[i];\n        }\n        else if(prices[i] > prices[i - 1]) {\n            sale = prices[i];\n        }\n    }\n    // 如果价格一直上升，则最后卖出，计算收益\n    if(sale !== -1) {\n       sum += sale - buy;\n    }\n    return sum;\n};\n```\n\n\n","source":"_posts/122-best-time-to-bssII.md","raw":"---\ntitle: 【Leetcode】122. Best Time to Buy and Sell Stock II\ndate: 2018-08-30 20:20:07\ntags: ['leetcode', 'javascript', '数学']\n---\n\n> 题目链接：https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/\n\n## 题目描述\n\n给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。可以进行多次买卖，但是比如在卖出之后才能再次买入\n\n## 输入输出\n\n**示例1：**\n\n- 输入: [7,1,5,3,6,4]\n- 输出: 7\n- 解释: 第二天买入（价格 1），第三天卖出（价格5），获得收益 5 - 1 = 4；第四天买入（价格3），第四天卖出（价格6），收益 6 - 3 = 3；总收益 4 + 3 = 7\n\n**示例2：**\n\n- 输入: [1,2,3,4,5]\n- 输出: 4\n- 解释: 第一天买入（价格1），第五天卖出（价格5），总收益 5 - 1 = 4\n\n## 思路\n\n一遍循环，价格下降的时候找出最合适的买入价；价格上升的时候找出最合适的卖出价，卖出和买入价格都有值的时候计算出当前收益\n\n## 代码\n\n```javascript\n/**\n * 时间复杂度：O(n)\n * 空间负责度：O(3) = O(1)\n */\n/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    var sum = 0;\n    var buy = prices[0];\n    var sale = -1;\n    for(var i = 1 ; i < prices.length; i++) {\n        if(prices[i] < prices[i - 1]) {\n            // 如果走势开始下降，并且之前已经有最大值和最小值\n            // 则计算出之前买入和卖出的最大收益\n            if(sale !== -1) {\n                sum += sale - buy;\n                sale = -1;\n            }\n            buy = prices[i];\n        }\n        else if(prices[i] > prices[i - 1]) {\n            sale = prices[i];\n        }\n    }\n    // 如果价格一直上升，则最后卖出，计算收益\n    if(sale !== -1) {\n       sum += sale - buy;\n    }\n    return sum;\n};\n```\n\n\n","slug":"122-best-time-to-bssII","published":1,"updated":"2018-09-12T02:17:10.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetn600058b057i7l1yqo","content":"<blockquote>\n<p>题目链接：<a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/</a></p>\n</blockquote>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。可以进行多次买卖，但是比如在卖出之后才能再次买入</p>\n<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>示例1：</strong></p>\n<ul>\n<li>输入: [7,1,5,3,6,4]</li>\n<li>输出: 7</li>\n<li>解释: 第二天买入（价格 1），第三天卖出（价格5），获得收益 5 - 1 = 4；第四天买入（价格3），第四天卖出（价格6），收益 6 - 3 = 3；总收益 4 + 3 = 7</li>\n</ul>\n<p><strong>示例2：</strong></p>\n<ul>\n<li>输入: [1,2,3,4,5]</li>\n<li>输出: 4</li>\n<li>解释: 第一天买入（价格1），第五天卖出（价格5），总收益 5 - 1 = 4</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>一遍循环，价格下降的时候找出最合适的买入价；价格上升的时候找出最合适的卖出价，卖出和买入价格都有值的时候计算出当前收益</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度：O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * 空间负责度：O(3) = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; prices</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prices</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buy = prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sale = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span> ; i &lt; prices.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices[i] &lt; prices[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果走势开始下降，并且之前已经有最大值和最小值</span></span><br><span class=\"line\">            <span class=\"comment\">// 则计算出之前买入和卖出的最大收益</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sale !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                sum += sale - buy;</span><br><span class=\"line\">                sale = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            buy = prices[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(prices[i] &gt; prices[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            sale = prices[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果价格一直上升，则最后卖出，计算收益</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sale !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">       sum += sale - buy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>题目链接：<a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/</a></p>\n</blockquote>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。可以进行多次买卖，但是比如在卖出之后才能再次买入</p>\n<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>示例1：</strong></p>\n<ul>\n<li>输入: [7,1,5,3,6,4]</li>\n<li>输出: 7</li>\n<li>解释: 第二天买入（价格 1），第三天卖出（价格5），获得收益 5 - 1 = 4；第四天买入（价格3），第四天卖出（价格6），收益 6 - 3 = 3；总收益 4 + 3 = 7</li>\n</ul>\n<p><strong>示例2：</strong></p>\n<ul>\n<li>输入: [1,2,3,4,5]</li>\n<li>输出: 4</li>\n<li>解释: 第一天买入（价格1），第五天卖出（价格5），总收益 5 - 1 = 4</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>一遍循环，价格下降的时候找出最合适的买入价；价格上升的时候找出最合适的卖出价，卖出和买入价格都有值的时候计算出当前收益</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度：O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * 空间负责度：O(3) = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; prices</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prices</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buy = prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sale = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span> ; i &lt; prices.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices[i] &lt; prices[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果走势开始下降，并且之前已经有最大值和最小值</span></span><br><span class=\"line\">            <span class=\"comment\">// 则计算出之前买入和卖出的最大收益</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sale !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                sum += sale - buy;</span><br><span class=\"line\">                sale = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            buy = prices[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(prices[i] &gt; prices[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            sale = prices[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果价格一直上升，则最后卖出，计算收益</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sale !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">       sum += sale - buy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"【Leetcode】189. Rotate Array","date":"2018-08-29T12:02:07.000Z","_content":"\n> 题目链接：https://leetcode.com/problems/rotate-array/description/\n\n## 题目描述\n\n给出一个数组和一个数字 k，将数组的后 k 个数字移动到数组前面\n\n## 输入输出\n\n**示例1：**\n- 输入：nums = [1,2,3,4,5], k = 2\n- 输出：[4,5,1,2,3]\n\n**示例2：**\n- 输入：nums = [1,2,3,4,5,6], k = 3\n- 输出：[4,5,6,1,2,3]\n\n## 思路\n\n**方法1：**\n- 如果每个数字当前所在的位置是 curr，那么他移动后的位置则是 (curr + k) % nums.length\n- 所以可以每个数字移动到他的下一位，然后把下一位数字继续移动到下一位\n- 上面的例子的移动过程可以描述如下：\n    - 示例1：1 -> 3, 3 - > 5, 5 -> 2, 2 -> 4, 4 -> 1\n    - 示例2：\n        - 1 -> 4, 4 -> 1\n\t- 2 -> 5, 5 -> 2\n\t- 3 -> 6, 6 -> 3\n\n**方法2：**\n- 首先将整个数组倒叙\n- 前 k 个数字再倒叙\n- 后 nums.length - k 个数字倒叙\n- 上面的例子的移动过程：\n    - 示例1：\n\t    - [5,4,3,2,1]\n\t    - [4,5,3,2,1]\n\t    - [4,5,1,2,3]\n    - 示例2：\n\t    - [6,5,4,3,2,1]\n\t    - [4,5,6,3,2,1]\n\t    - [4,5,6,1,2,3]\n\n## 代码\n\n**方法1：**\n\n```javascript\n\n/**\n * 时间复杂度：O(n)\n * 空间复杂度：O(1)\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar rotate = function(nums, k) {\n    var len = nums.length;\n    k = k % nums.length;\n\n    // 用于标记当前已经找到正确位置的数字的个数\n    var cnt = 0;        \n    for(var i = 0; cnt < len - 1; i++) {\n        var curr = i;                   // 指向当前将要移动的数字的坐标\n        var next = (i + k) % len;       // 当前数字应该移动到的地方的坐标\n        var prev = nums[i];             // 上一位数字\n        do {\n            var tmp = nums[next];\n            nums[next] = prev;\n            prev = tmp;\n            curr = next;\n            next = (next + k) % len;\n            cnt ++;\n        } while(i !== curr);\n    } \n};\n```\n\n```javascript\n/**\n * 时间复杂度：O(2n) = O(n)\n * 空间复杂度：O(1)\n */\nvar reverse = function(array, st, ed) {\n    for(var i = st; i < (st + ed) / 2; i++) {\n        var tmp = array[ed + st - i - 1];\n        array[ed + st - i - 1] = array[i];\n        array[i] = tmp;\n    }\n    return array;\n};\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar rotate = function(nums, k) {\n    k = k % nums.length;\n    nums = reverse(nums, 0, nums.length);\n    nums = reverse(nums, 0, k);\n    nums = reverse(nums, k, nums.length);\n};\n```\n","source":"_posts/189-rotate-array.md","raw":"---\ntitle: 【Leetcode】189. Rotate Array\ndate: 2018-08-29 20:02:07\ntags: ['leetcode', 'javascript', '数组']\n---\n\n> 题目链接：https://leetcode.com/problems/rotate-array/description/\n\n## 题目描述\n\n给出一个数组和一个数字 k，将数组的后 k 个数字移动到数组前面\n\n## 输入输出\n\n**示例1：**\n- 输入：nums = [1,2,3,4,5], k = 2\n- 输出：[4,5,1,2,3]\n\n**示例2：**\n- 输入：nums = [1,2,3,4,5,6], k = 3\n- 输出：[4,5,6,1,2,3]\n\n## 思路\n\n**方法1：**\n- 如果每个数字当前所在的位置是 curr，那么他移动后的位置则是 (curr + k) % nums.length\n- 所以可以每个数字移动到他的下一位，然后把下一位数字继续移动到下一位\n- 上面的例子的移动过程可以描述如下：\n    - 示例1：1 -> 3, 3 - > 5, 5 -> 2, 2 -> 4, 4 -> 1\n    - 示例2：\n        - 1 -> 4, 4 -> 1\n\t- 2 -> 5, 5 -> 2\n\t- 3 -> 6, 6 -> 3\n\n**方法2：**\n- 首先将整个数组倒叙\n- 前 k 个数字再倒叙\n- 后 nums.length - k 个数字倒叙\n- 上面的例子的移动过程：\n    - 示例1：\n\t    - [5,4,3,2,1]\n\t    - [4,5,3,2,1]\n\t    - [4,5,1,2,3]\n    - 示例2：\n\t    - [6,5,4,3,2,1]\n\t    - [4,5,6,3,2,1]\n\t    - [4,5,6,1,2,3]\n\n## 代码\n\n**方法1：**\n\n```javascript\n\n/**\n * 时间复杂度：O(n)\n * 空间复杂度：O(1)\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar rotate = function(nums, k) {\n    var len = nums.length;\n    k = k % nums.length;\n\n    // 用于标记当前已经找到正确位置的数字的个数\n    var cnt = 0;        \n    for(var i = 0; cnt < len - 1; i++) {\n        var curr = i;                   // 指向当前将要移动的数字的坐标\n        var next = (i + k) % len;       // 当前数字应该移动到的地方的坐标\n        var prev = nums[i];             // 上一位数字\n        do {\n            var tmp = nums[next];\n            nums[next] = prev;\n            prev = tmp;\n            curr = next;\n            next = (next + k) % len;\n            cnt ++;\n        } while(i !== curr);\n    } \n};\n```\n\n```javascript\n/**\n * 时间复杂度：O(2n) = O(n)\n * 空间复杂度：O(1)\n */\nvar reverse = function(array, st, ed) {\n    for(var i = st; i < (st + ed) / 2; i++) {\n        var tmp = array[ed + st - i - 1];\n        array[ed + st - i - 1] = array[i];\n        array[i] = tmp;\n    }\n    return array;\n};\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar rotate = function(nums, k) {\n    k = k % nums.length;\n    nums = reverse(nums, 0, nums.length);\n    nums = reverse(nums, 0, k);\n    nums = reverse(nums, k, nums.length);\n};\n```\n","slug":"189-rotate-array","published":1,"updated":"2018-09-12T02:17:10.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetn800068b05ktlsy7q0","content":"<blockquote>\n<p>题目链接：<a href=\"https://leetcode.com/problems/rotate-array/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/rotate-array/description/</a></p>\n</blockquote>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给出一个数组和一个数字 k，将数组的后 k 个数字移动到数组前面</p>\n<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>示例1：</strong></p>\n<ul>\n<li>输入：nums = [1,2,3,4,5], k = 2</li>\n<li>输出：[4,5,1,2,3]</li>\n</ul>\n<p><strong>示例2：</strong></p>\n<ul>\n<li>输入：nums = [1,2,3,4,5,6], k = 3</li>\n<li>输出：[4,5,6,1,2,3]</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p><strong>方法1：</strong></p>\n<ul>\n<li>如果每个数字当前所在的位置是 curr，那么他移动后的位置则是 (curr + k) % nums.length</li>\n<li>所以可以每个数字移动到他的下一位，然后把下一位数字继续移动到下一位</li>\n<li>上面的例子的移动过程可以描述如下：<ul>\n<li>示例1：1 -&gt; 3, 3 - &gt; 5, 5 -&gt; 2, 2 -&gt; 4, 4 -&gt; 1</li>\n<li>示例2：<ul>\n<li>1 -&gt; 4, 4 -&gt; 1</li>\n</ul>\n</li>\n<li>2 -&gt; 5, 5 -&gt; 2</li>\n<li>3 -&gt; 6, 6 -&gt; 3</li>\n</ul>\n</li>\n</ul>\n<p><strong>方法2：</strong></p>\n<ul>\n<li>首先将整个数组倒叙</li>\n<li>前 k 个数字再倒叙</li>\n<li>后 nums.length - k 个数字倒叙</li>\n<li>上面的例子的移动过程：<ul>\n<li>示例1：<ul>\n<li>[5,4,3,2,1]</li>\n<li>[4,5,3,2,1]</li>\n<li>[4,5,1,2,3]</li>\n</ul>\n</li>\n<li>示例2：<ul>\n<li>[6,5,4,3,2,1]</li>\n<li>[4,5,6,3,2,1]</li>\n<li>[4,5,6,1,2,3]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><strong>方法1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度：O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * 空间复杂度：O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = nums.length;</span><br><span class=\"line\">    k = k % nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于标记当前已经找到正确位置的数字的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cnt = <span class=\"number\">0</span>;        </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; cnt &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> curr = i;                   <span class=\"comment\">// 指向当前将要移动的数字的坐标</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = (i + k) % len;       <span class=\"comment\">// 当前数字应该移动到的地方的坐标</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> prev = nums[i];             <span class=\"comment\">// 上一位数字</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> tmp = nums[next];</span><br><span class=\"line\">            nums[next] = prev;</span><br><span class=\"line\">            prev = tmp;</span><br><span class=\"line\">            curr = next;</span><br><span class=\"line\">            next = (next + k) % len;</span><br><span class=\"line\">            cnt ++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span>(i !== curr);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度：O(2n) = O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * 空间复杂度：O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, st, ed</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = st; i &lt; (st + ed) / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = array[ed + st - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        array[ed + st - i - <span class=\"number\">1</span>] = array[i];</span><br><span class=\"line\">        array[i] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    k = k % nums.length;</span><br><span class=\"line\">    nums = reverse(nums, <span class=\"number\">0</span>, nums.length);</span><br><span class=\"line\">    nums = reverse(nums, <span class=\"number\">0</span>, k);</span><br><span class=\"line\">    nums = reverse(nums, k, nums.length);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>题目链接：<a href=\"https://leetcode.com/problems/rotate-array/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/rotate-array/description/</a></p>\n</blockquote>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给出一个数组和一个数字 k，将数组的后 k 个数字移动到数组前面</p>\n<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><strong>示例1：</strong></p>\n<ul>\n<li>输入：nums = [1,2,3,4,5], k = 2</li>\n<li>输出：[4,5,1,2,3]</li>\n</ul>\n<p><strong>示例2：</strong></p>\n<ul>\n<li>输入：nums = [1,2,3,4,5,6], k = 3</li>\n<li>输出：[4,5,6,1,2,3]</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p><strong>方法1：</strong></p>\n<ul>\n<li>如果每个数字当前所在的位置是 curr，那么他移动后的位置则是 (curr + k) % nums.length</li>\n<li>所以可以每个数字移动到他的下一位，然后把下一位数字继续移动到下一位</li>\n<li>上面的例子的移动过程可以描述如下：<ul>\n<li>示例1：1 -&gt; 3, 3 - &gt; 5, 5 -&gt; 2, 2 -&gt; 4, 4 -&gt; 1</li>\n<li>示例2：<ul>\n<li>1 -&gt; 4, 4 -&gt; 1</li>\n</ul>\n</li>\n<li>2 -&gt; 5, 5 -&gt; 2</li>\n<li>3 -&gt; 6, 6 -&gt; 3</li>\n</ul>\n</li>\n</ul>\n<p><strong>方法2：</strong></p>\n<ul>\n<li>首先将整个数组倒叙</li>\n<li>前 k 个数字再倒叙</li>\n<li>后 nums.length - k 个数字倒叙</li>\n<li>上面的例子的移动过程：<ul>\n<li>示例1：<ul>\n<li>[5,4,3,2,1]</li>\n<li>[4,5,3,2,1]</li>\n<li>[4,5,1,2,3]</li>\n</ul>\n</li>\n<li>示例2：<ul>\n<li>[6,5,4,3,2,1]</li>\n<li>[4,5,6,3,2,1]</li>\n<li>[4,5,6,1,2,3]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><strong>方法1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度：O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * 空间复杂度：O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = nums.length;</span><br><span class=\"line\">    k = k % nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于标记当前已经找到正确位置的数字的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cnt = <span class=\"number\">0</span>;        </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; cnt &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> curr = i;                   <span class=\"comment\">// 指向当前将要移动的数字的坐标</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = (i + k) % len;       <span class=\"comment\">// 当前数字应该移动到的地方的坐标</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> prev = nums[i];             <span class=\"comment\">// 上一位数字</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> tmp = nums[next];</span><br><span class=\"line\">            nums[next] = prev;</span><br><span class=\"line\">            prev = tmp;</span><br><span class=\"line\">            curr = next;</span><br><span class=\"line\">            next = (next + k) % len;</span><br><span class=\"line\">            cnt ++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span>(i !== curr);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度：O(2n) = O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * 空间复杂度：O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, st, ed</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = st; i &lt; (st + ed) / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = array[ed + st - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        array[ed + st - i - <span class=\"number\">1</span>] = array[i];</span><br><span class=\"line\">        array[i] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    k = k % nums.length;</span><br><span class=\"line\">    nums = reverse(nums, <span class=\"number\">0</span>, nums.length);</span><br><span class=\"line\">    nums = reverse(nums, <span class=\"number\">0</span>, k);</span><br><span class=\"line\">    nums = reverse(nums, k, nums.length);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"【LeetCode】709. to Lower Case","date":"2018-08-23T12:02:07.000Z","_content":"\n> 题目连接: https://leetcode.com/problems/to-lower-case/description/\n\n### 题目描述\n\n- 输入: 一个字符串\n- 输出: 把字符串里的所有字母都转换成小写\n\n### demo\n\n- 输入: Hello\n- 输出: hello\n\n### 思路\n\n判断如果是大写字母，则先转换为 ascii 码，然后计算出相应小写字母的 ascii 码再转换为字母\n\n### 代码\n\n```\n/**\n * @param {string} str\n * @return {string}\n */\nvar toLowerCase = function(str) {\n    var res = '';\n    for(var i = 0; i < str.length; i++) {\n        s = str[i];\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            s = String.fromCharCode(parseInt(str[i].charCodeAt() + 32, 10));\n        }\n        res = res + s;\n    }\n    \n    delete i;\n    return res;\n};\n```\n","source":"_posts/709-to-lower-case.md","raw":"---\ntitle: 【LeetCode】709. to Lower Case\ndate: 2018-08-23 20:02:07\ntags: ['leetcode', 'javascript', '字符串']\n---\n\n> 题目连接: https://leetcode.com/problems/to-lower-case/description/\n\n### 题目描述\n\n- 输入: 一个字符串\n- 输出: 把字符串里的所有字母都转换成小写\n\n### demo\n\n- 输入: Hello\n- 输出: hello\n\n### 思路\n\n判断如果是大写字母，则先转换为 ascii 码，然后计算出相应小写字母的 ascii 码再转换为字母\n\n### 代码\n\n```\n/**\n * @param {string} str\n * @return {string}\n */\nvar toLowerCase = function(str) {\n    var res = '';\n    for(var i = 0; i < str.length; i++) {\n        s = str[i];\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            s = String.fromCharCode(parseInt(str[i].charCodeAt() + 32, 10));\n        }\n        res = res + s;\n    }\n    \n    delete i;\n    return res;\n};\n```\n","slug":"709-to-lower-case","published":1,"updated":"2018-08-24T03:05:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetn900088b05doqytzkq","content":"<blockquote>\n<p>题目连接: <a href=\"https://leetcode.com/problems/to-lower-case/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/to-lower-case/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><ul>\n<li>输入: 一个字符串</li>\n<li>输出: 把字符串里的所有字母都转换成小写</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><ul>\n<li>输入: Hello</li>\n<li>输出: hello</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>判断如果是大写字母，则先转换为 ascii 码，然后计算出相应小写字母的 ascii 码再转换为字母</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; str</span><br><span class=\"line\"> * @return &#123;string&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var toLowerCase = function(str) &#123;</span><br><span class=\"line\">    var res = &apos;&apos;;</span><br><span class=\"line\">    for(var i = 0; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        s = str[i];</span><br><span class=\"line\">        if (str[i] &gt;= &apos;A&apos; &amp;&amp; str[i] &lt;= &apos;Z&apos;) &#123;</span><br><span class=\"line\">            s = String.fromCharCode(parseInt(str[i].charCodeAt() + 32, 10));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = res + s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    delete i;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>题目连接: <a href=\"https://leetcode.com/problems/to-lower-case/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/to-lower-case/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><ul>\n<li>输入: 一个字符串</li>\n<li>输出: 把字符串里的所有字母都转换成小写</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><ul>\n<li>输入: Hello</li>\n<li>输出: hello</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>判断如果是大写字母，则先转换为 ascii 码，然后计算出相应小写字母的 ascii 码再转换为字母</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; str</span><br><span class=\"line\"> * @return &#123;string&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var toLowerCase = function(str) &#123;</span><br><span class=\"line\">    var res = &apos;&apos;;</span><br><span class=\"line\">    for(var i = 0; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        s = str[i];</span><br><span class=\"line\">        if (str[i] &gt;= &apos;A&apos; &amp;&amp; str[i] &lt;= &apos;Z&apos;) &#123;</span><br><span class=\"line\">            s = String.fromCharCode(parseInt(str[i].charCodeAt() + 32, 10));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = res + s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    delete i;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"【LeetCode】848. Shifting Letters","date":"2018-08-24T02:41:57.000Z","_content":"\n> 题目连接: https://leetcode.com/problems/shifting-letters/description/\n\n### 题目描述\n\n给定一个字符串 s 和一个整数数组 shifts。字符串中的所有字母都是 'a' 到 'z' 之间的小写字母。有如下规则：shift('a') = 'b'; shift('t') = 'u'; shift('z') = 'a'。现在根据给定的数组 shifts，如果 shifts[i] = x，表示把 s 字符串中的前 i+1 个字母 shift x 次。\n\n### demo\n\n- 输入: 'abc', [3, 5, 9]\n- 输出: 'rpl'\n- 解释: \n\t- 'a' 转换 3 次是 'dbc'\n\t- 'db' 分别转换 5 次是 'igc'\n\t- 'igc' 分别转换 9 次是 'rpl'\n\n### 思路\n\n- 第一种，双重for循环，第一层是 shifts 数组（循环变量用 i 表示），第二层是字符串 s（循环变量用 就\n表示：0 <= j <=i），每次将 s 的前 j 个字母转换 shifts[i] 次。\n- 第二种，分析字符串 s 的第一个字母，第一次转换 shifts[0] 次，第二次再转换 shifts[1] 次，所以一共转换了 shifts[0] + ... + shifts[n - 1] 次；同理，s 的第二个字母一共转换了 shifts[0] + ... + shifts[n - 2] 次；... 所以首先利用 shifts 数组计算出 s 中每个字母应该转换的次数，这里需要注意由于是 'a' 到 'z' 循环，所以对 26 取余。两次遍历即可解决，时间复杂度是O(N)\n\n### 代码\n\n```\n/**\n * @param {string} S\n * @param {number[]} shifts\n * @return {string}\n */\nvar shiftingLetters = function(S, shifts) {\n    var r = '';\n    var n = 0;\n    \n    // 计算出每位字符应该变换的次数\n    for(var i = shifts.length - 2; i >= 0; i--) {\n        shifts[i] = shifts[i] + shifts[i + 1];\n    }\n    \n    for(var i = 0; i < shifts.length; i++) {\n       n = parseInt(S[i].charCodeAt() + shifts[i] % 26, 10);\n        if (n > 122) {\n            n = 96 + (n - 122) % 26;\n        }\n        r += String.fromCharCode(n);\n    }\n    delete n;\n    return r;\n};\n```\n\n","source":"_posts/848-shifting-letters.md","raw":"---\ntitle: 【LeetCode】848. Shifting Letters\ndate: 2018-08-24 10:41:57\ntags: ['leetcode', 'javascript', '字符串']\n---\n\n> 题目连接: https://leetcode.com/problems/shifting-letters/description/\n\n### 题目描述\n\n给定一个字符串 s 和一个整数数组 shifts。字符串中的所有字母都是 'a' 到 'z' 之间的小写字母。有如下规则：shift('a') = 'b'; shift('t') = 'u'; shift('z') = 'a'。现在根据给定的数组 shifts，如果 shifts[i] = x，表示把 s 字符串中的前 i+1 个字母 shift x 次。\n\n### demo\n\n- 输入: 'abc', [3, 5, 9]\n- 输出: 'rpl'\n- 解释: \n\t- 'a' 转换 3 次是 'dbc'\n\t- 'db' 分别转换 5 次是 'igc'\n\t- 'igc' 分别转换 9 次是 'rpl'\n\n### 思路\n\n- 第一种，双重for循环，第一层是 shifts 数组（循环变量用 i 表示），第二层是字符串 s（循环变量用 就\n表示：0 <= j <=i），每次将 s 的前 j 个字母转换 shifts[i] 次。\n- 第二种，分析字符串 s 的第一个字母，第一次转换 shifts[0] 次，第二次再转换 shifts[1] 次，所以一共转换了 shifts[0] + ... + shifts[n - 1] 次；同理，s 的第二个字母一共转换了 shifts[0] + ... + shifts[n - 2] 次；... 所以首先利用 shifts 数组计算出 s 中每个字母应该转换的次数，这里需要注意由于是 'a' 到 'z' 循环，所以对 26 取余。两次遍历即可解决，时间复杂度是O(N)\n\n### 代码\n\n```\n/**\n * @param {string} S\n * @param {number[]} shifts\n * @return {string}\n */\nvar shiftingLetters = function(S, shifts) {\n    var r = '';\n    var n = 0;\n    \n    // 计算出每位字符应该变换的次数\n    for(var i = shifts.length - 2; i >= 0; i--) {\n        shifts[i] = shifts[i] + shifts[i + 1];\n    }\n    \n    for(var i = 0; i < shifts.length; i++) {\n       n = parseInt(S[i].charCodeAt() + shifts[i] % 26, 10);\n        if (n > 122) {\n            n = 96 + (n - 122) % 26;\n        }\n        r += String.fromCharCode(n);\n    }\n    delete n;\n    return r;\n};\n```\n\n","slug":"848-shifting-letters","published":1,"updated":"2018-08-24T03:05:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetna00098b05j4de1q8v","content":"<blockquote>\n<p>题目连接: <a href=\"https://leetcode.com/problems/shifting-letters/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/shifting-letters/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个字符串 s 和一个整数数组 shifts。字符串中的所有字母都是 ‘a’ 到 ‘z’ 之间的小写字母。有如下规则：shift(‘a’) = ‘b’; shift(‘t’) = ‘u’; shift(‘z’) = ‘a’。现在根据给定的数组 shifts，如果 shifts[i] = x，表示把 s 字符串中的前 i+1 个字母 shift x 次。</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><ul>\n<li>输入: ‘abc’, [3, 5, 9]</li>\n<li>输出: ‘rpl’</li>\n<li>解释: <ul>\n<li>‘a’ 转换 3 次是 ‘dbc’</li>\n<li>‘db’ 分别转换 5 次是 ‘igc’</li>\n<li>‘igc’ 分别转换 9 次是 ‘rpl’</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>第一种，双重for循环，第一层是 shifts 数组（循环变量用 i 表示），第二层是字符串 s（循环变量用 就<br>表示：0 &lt;= j &lt;=i），每次将 s 的前 j 个字母转换 shifts[i] 次。</li>\n<li>第二种，分析字符串 s 的第一个字母，第一次转换 shifts[0] 次，第二次再转换 shifts[1] 次，所以一共转换了 shifts[0] + … + shifts[n - 1] 次；同理，s 的第二个字母一共转换了 shifts[0] + … + shifts[n - 2] 次；… 所以首先利用 shifts 数组计算出 s 中每个字母应该转换的次数，这里需要注意由于是 ‘a’ 到 ‘z’ 循环，所以对 26 取余。两次遍历即可解决，时间复杂度是O(N)</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; S</span><br><span class=\"line\"> * @param &#123;number[]&#125; shifts</span><br><span class=\"line\"> * @return &#123;string&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var shiftingLetters = function(S, shifts) &#123;</span><br><span class=\"line\">    var r = &apos;&apos;;</span><br><span class=\"line\">    var n = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 计算出每位字符应该变换的次数</span><br><span class=\"line\">    for(var i = shifts.length - 2; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">        shifts[i] = shifts[i] + shifts[i + 1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    for(var i = 0; i &lt; shifts.length; i++) &#123;</span><br><span class=\"line\">       n = parseInt(S[i].charCodeAt() + shifts[i] % 26, 10);</span><br><span class=\"line\">        if (n &gt; 122) &#123;</span><br><span class=\"line\">            n = 96 + (n - 122) % 26;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r += String.fromCharCode(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delete n;</span><br><span class=\"line\">    return r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>题目连接: <a href=\"https://leetcode.com/problems/shifting-letters/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/shifting-letters/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个字符串 s 和一个整数数组 shifts。字符串中的所有字母都是 ‘a’ 到 ‘z’ 之间的小写字母。有如下规则：shift(‘a’) = ‘b’; shift(‘t’) = ‘u’; shift(‘z’) = ‘a’。现在根据给定的数组 shifts，如果 shifts[i] = x，表示把 s 字符串中的前 i+1 个字母 shift x 次。</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><ul>\n<li>输入: ‘abc’, [3, 5, 9]</li>\n<li>输出: ‘rpl’</li>\n<li>解释: <ul>\n<li>‘a’ 转换 3 次是 ‘dbc’</li>\n<li>‘db’ 分别转换 5 次是 ‘igc’</li>\n<li>‘igc’ 分别转换 9 次是 ‘rpl’</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>第一种，双重for循环，第一层是 shifts 数组（循环变量用 i 表示），第二层是字符串 s（循环变量用 就<br>表示：0 &lt;= j &lt;=i），每次将 s 的前 j 个字母转换 shifts[i] 次。</li>\n<li>第二种，分析字符串 s 的第一个字母，第一次转换 shifts[0] 次，第二次再转换 shifts[1] 次，所以一共转换了 shifts[0] + … + shifts[n - 1] 次；同理，s 的第二个字母一共转换了 shifts[0] + … + shifts[n - 2] 次；… 所以首先利用 shifts 数组计算出 s 中每个字母应该转换的次数，这里需要注意由于是 ‘a’ 到 ‘z’ 循环，所以对 26 取余。两次遍历即可解决，时间复杂度是O(N)</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; S</span><br><span class=\"line\"> * @param &#123;number[]&#125; shifts</span><br><span class=\"line\"> * @return &#123;string&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var shiftingLetters = function(S, shifts) &#123;</span><br><span class=\"line\">    var r = &apos;&apos;;</span><br><span class=\"line\">    var n = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 计算出每位字符应该变换的次数</span><br><span class=\"line\">    for(var i = shifts.length - 2; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">        shifts[i] = shifts[i] + shifts[i + 1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    for(var i = 0; i &lt; shifts.length; i++) &#123;</span><br><span class=\"line\">       n = parseInt(S[i].charCodeAt() + shifts[i] % 26, 10);</span><br><span class=\"line\">        if (n &gt; 122) &#123;</span><br><span class=\"line\">            n = 96 + (n - 122) % 26;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r += String.fromCharCode(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delete n;</span><br><span class=\"line\">    return r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"【LeetCode】88. Merge Sorted Array","date":"2018-08-26T12:08:01.000Z","_content":"\n> 题目连接: https://leetcode.com/problems/merge-sorted-array/description/\n\n### 题目描述\n\n- 输入: 有序数组 nums1, nums1 的长度 m, 有组数组 nums, nums2 的长度 n\n- 输出: nums2 和 nums1 合并后的有序数组 nums1\n\n### demo\n\n- 输入: [1, 2, 3], 3, [2, 5, 6], 3\n- 输出: [1, 2, 2, 3, 5, 6]\n\n### 思路\n\n- nums1 当前元素 <= nums2, nums1 指针后移\n- nums1 当前元素 > nums2\n\t- nums1 当前元素与 nums2 当前元素交换\n\t- nums2 中当前元素向后比较，找到合适的位置，保证 nums2 是有序的\n- 如果不是本题要求最终返回的还是 nums1，则可以用空间换时间的思路\n\t- 两个指针分别指向 nums1 和 nums2 的当前位置\n\t- nums1 和 nums2 中较小元素 push 到 c 数组中\n\t- 返回 c 数组\n\n### 代码\n\n```javascript\n/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    var i = 0;\n    var j = 0;\n    while(i < m && j < n) {\n        if (nums1[i] > nums2[j]) {\n            var t = nums1[i];\n            nums1[i] = nums2[j];\n            nums2[j] = t;\n            \n            for(var k = j; k < n; k++) {\n                if (nums2[k] > nums2[k + 1]) {\n                    t = nums2[k];\n                    nums2[k] = nums2[k + 1];\n                    nums2[k + 1] = t;\n                }\n            }\n        }\n        i++;\n    }\n    while(j<n) {\n        nums1[i++] = nums2[j++];\n    }\n};\n```\n","source":"_posts/88-merge-sorted-array.md","raw":"---\ntitle: 【LeetCode】88. Merge Sorted Array\ndate: 2018-08-26 20:08:01\ntags: ['leetcode', 'javascript', '数组']\n---\n\n> 题目连接: https://leetcode.com/problems/merge-sorted-array/description/\n\n### 题目描述\n\n- 输入: 有序数组 nums1, nums1 的长度 m, 有组数组 nums, nums2 的长度 n\n- 输出: nums2 和 nums1 合并后的有序数组 nums1\n\n### demo\n\n- 输入: [1, 2, 3], 3, [2, 5, 6], 3\n- 输出: [1, 2, 2, 3, 5, 6]\n\n### 思路\n\n- nums1 当前元素 <= nums2, nums1 指针后移\n- nums1 当前元素 > nums2\n\t- nums1 当前元素与 nums2 当前元素交换\n\t- nums2 中当前元素向后比较，找到合适的位置，保证 nums2 是有序的\n- 如果不是本题要求最终返回的还是 nums1，则可以用空间换时间的思路\n\t- 两个指针分别指向 nums1 和 nums2 的当前位置\n\t- nums1 和 nums2 中较小元素 push 到 c 数组中\n\t- 返回 c 数组\n\n### 代码\n\n```javascript\n/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    var i = 0;\n    var j = 0;\n    while(i < m && j < n) {\n        if (nums1[i] > nums2[j]) {\n            var t = nums1[i];\n            nums1[i] = nums2[j];\n            nums2[j] = t;\n            \n            for(var k = j; k < n; k++) {\n                if (nums2[k] > nums2[k + 1]) {\n                    t = nums2[k];\n                    nums2[k] = nums2[k + 1];\n                    nums2[k + 1] = t;\n                }\n            }\n        }\n        i++;\n    }\n    while(j<n) {\n        nums1[i++] = nums2[j++];\n    }\n};\n```\n","slug":"88-merge-sorted-array","published":1,"updated":"2018-09-28T09:10:24.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetne000b8b05y1nmw4qu","content":"<blockquote>\n<p>题目连接: <a href=\"https://leetcode.com/problems/merge-sorted-array/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/merge-sorted-array/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><ul>\n<li>输入: 有序数组 nums1, nums1 的长度 m, 有组数组 nums, nums2 的长度 n</li>\n<li>输出: nums2 和 nums1 合并后的有序数组 nums1</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><ul>\n<li>输入: [1, 2, 3], 3, [2, 5, 6], 3</li>\n<li>输出: [1, 2, 2, 3, 5, 6]</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>nums1 当前元素 &lt;= nums2, nums1 指针后移</li>\n<li>nums1 当前元素 &gt; nums2<ul>\n<li>nums1 当前元素与 nums2 当前元素交换</li>\n<li>nums2 中当前元素向后比较，找到合适的位置，保证 nums2 是有序的</li>\n</ul>\n</li>\n<li>如果不是本题要求最终返回的还是 nums1，则可以用空间换时间的思路<ul>\n<li>两个指针分别指向 nums1 和 nums2 的当前位置</li>\n<li>nums1 和 nums2 中较小元素 push 到 c 数组中</li>\n<li>返回 c 数组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; m</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; m &amp;&amp; j &lt; n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = nums1[i];</span><br><span class=\"line\">            nums1[i] = nums2[j];</span><br><span class=\"line\">            nums2[j] = t;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = j; k &lt; n; k++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums2[k] &gt; nums2[k + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    t = nums2[k];</span><br><span class=\"line\">                    nums2[k] = nums2[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    nums2[k + <span class=\"number\">1</span>] = t;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;n) &#123;</span><br><span class=\"line\">        nums1[i++] = nums2[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>题目连接: <a href=\"https://leetcode.com/problems/merge-sorted-array/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/merge-sorted-array/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><ul>\n<li>输入: 有序数组 nums1, nums1 的长度 m, 有组数组 nums, nums2 的长度 n</li>\n<li>输出: nums2 和 nums1 合并后的有序数组 nums1</li>\n</ul>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><ul>\n<li>输入: [1, 2, 3], 3, [2, 5, 6], 3</li>\n<li>输出: [1, 2, 2, 3, 5, 6]</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>nums1 当前元素 &lt;= nums2, nums1 指针后移</li>\n<li>nums1 当前元素 &gt; nums2<ul>\n<li>nums1 当前元素与 nums2 当前元素交换</li>\n<li>nums2 中当前元素向后比较，找到合适的位置，保证 nums2 是有序的</li>\n</ul>\n</li>\n<li>如果不是本题要求最终返回的还是 nums1，则可以用空间换时间的思路<ul>\n<li>两个指针分别指向 nums1 和 nums2 的当前位置</li>\n<li>nums1 和 nums2 中较小元素 push 到 c 数组中</li>\n<li>返回 c 数组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums1</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; m</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums2</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; n</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;void&#125; Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; m &amp;&amp; j &lt; n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = nums1[i];</span><br><span class=\"line\">            nums1[i] = nums2[j];</span><br><span class=\"line\">            nums2[j] = t;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = j; k &lt; n; k++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums2[k] &gt; nums2[k + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    t = nums2[k];</span><br><span class=\"line\">                    nums2[k] = nums2[k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    nums2[k + <span class=\"number\">1</span>] = t;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;n) &#123;</span><br><span class=\"line\">        nums1[i++] = nums2[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"BFF(Backends for Frontends)","date":"2018-10-29T07:08:53.000Z","_content":"\n每日一言：\n\n## 什么是 BFF\n\nBFF(Backends for Frontends) 又叫做服务于前端的后端。由 Sam Newman 提出。\n\n## 使用场景\n\n## 可用框架\n","source":"_posts/bff.md","raw":"---\ntitle: BFF(Backends for Frontends)\ndate: 2018-10-29 15:08:53\ntags: ['服务', '后端']\n---\n\n每日一言：\n\n## 什么是 BFF\n\nBFF(Backends for Frontends) 又叫做服务于前端的后端。由 Sam Newman 提出。\n\n## 使用场景\n\n## 可用框架\n","slug":"bff","published":1,"updated":"2018-10-31T11:27:06.919Z","_id":"cjnvnetng000d8b057xyvqnen","comments":1,"layout":"post","photos":[],"link":"","content":"<p>每日一言：</p>\n<h2 id=\"什么是-BFF\"><a href=\"#什么是-BFF\" class=\"headerlink\" title=\"什么是 BFF\"></a>什么是 BFF</h2><p>BFF(Backends for Frontends) 又叫做服务于前端的后端。由 Sam Newman 提出。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h2 id=\"可用框架\"><a href=\"#可用框架\" class=\"headerlink\" title=\"可用框架\"></a>可用框架</h2>","site":{"data":{}},"excerpt":"","more":"<p>每日一言：</p>\n<h2 id=\"什么是-BFF\"><a href=\"#什么是-BFF\" class=\"headerlink\" title=\"什么是 BFF\"></a>什么是 BFF</h2><p>BFF(Backends for Frontends) 又叫做服务于前端的后端。由 Sam Newman 提出。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h2 id=\"可用框架\"><a href=\"#可用框架\" class=\"headerlink\" title=\"可用框架\"></a>可用框架</h2>"},{"title":"懒猫","date":"2018-10-28T15:06:56.000Z","_content":"\n> 每日一言：三里清风 三里路 步步风里 步步你\n\n—— “小姐姐，你最近桃花好烂。”\n\n认识懒猫纯属偶然，毕竟是两个世界的人。\n\n那天，大概是云淡风轻、春暖花开的一个午后。我抱着 kindle 跑到常去的『三楼的猫』咖啡馆，点了一杯卡布奇诺，然后一边晒太阳，一边读冯唐的《北京，北京》。阳光透过落地窗潵到我身上，暖洋洋的。喜欢这家咖啡馆有两个原因，一个原因是这里的座位都是沙发，坐上去，整个人都塌陷下去，很舒服；另一个原因是这里有超大的落地窗。我喜欢阳光，如果有一天没有太阳，也许我的生命就也会随之枯萎。\n\n“小姐姐，你最近桃花好烂。”听到声音，我抬了一下头，一个清瘦的少年微笑着坐在我对面，眼睛笑起来像一只猫。\n\n“哦...”然后继续低下头看我的书。\n\n“你看我。”\n\n“你长的像夏目。”我抬起头，看着他。\n\n“爱情如果是一个人的事就好了。两个人的距离是 100 步，你走 51 步，你就输了。”\n\n“说说你吧...”我合上 kindle 听懒猫讲他的故事。\n\n“我学理，数学很好，高考考了 132 分，但是我英语只有 48 分。大学没有学习，谈了 5 个女朋友，每个都没有坚持过一年。”\n\n“你喜欢他们吗？”\n\n“每一个我都喜欢。”\n\n“那你爱他们吗？”他没有回答，继续讲他的故事。\n\n“大学最后一个女朋友说我这么美，你却总把我拍的这么丑，所以我俩一起打工赚钱买了单反。毕业的时候她却说要出国了，可能不回来了，问我要不要跟她一起，我笑着说，我去不了啊。她说，那么好好练习摄影吧。这几年，我拿着那部单反走过了许多地方，拍照也不丑了，她却回不来了。”我看着他，微笑着，眼神里却闪着光。\n\n“毕业前在老家买了 3 套房子，去年房价暴涨的时候卖了两套。我就不工作了，背着画板去丽江画画，去西藏画画。去西藏的时候，同行的有两个妹子由于高反被送进医院，那时候可能是由于恐怖吧，她们一直在哭着说想回家见爸妈。看着他们我却很淡漠，因为我喜欢远方，如果可以，我愿意一直呆在那里。”\n\n“玩够了，我回来了，在家待着。一人，两猫，三餐，四季，琴棋书画度过余生。”\n\n“她走后，我也谈过一个女朋友，比我大，最后嫌弃我不上进，不工作，分手了。我不明白，如果我可以每年挣和你一样多的钱，为什么一定要按照固定的模式上班下班。”\n\n“我睡过十几个女生，去年圣诞节，和一个妹子一起去泡温泉，回来后谁也不联系谁，我觉得这样挺好。两个孤独的灵魂互相取暖，回归生活却谁也不打扰谁。”\n\n“现在，我想找一个小姐姐一起同居两周。看日出日落，早上一起刷牙，我的牙膏摸到她脸上，给她做营养早餐。周六一起赖床，抱着她窝在床上看电影，一起旅行。拍下幸福快乐的瞬间，然后我就不拍照了。”\n\n“你愿意来吗？”\n\n“我不愿意...”我说。\n\n“好吧。”然后懒猫走出了咖啡馆。\n\n看着他的背影渐渐消失于人群中，我想，也许他阅人无数，所以需要的是灶边炉台吧。\n\n几天后，再次在咖啡馆见到懒猫，他仍然微笑着，看到我，说：“我一个好朋友要过来和我同居，是一个大美女，168，大长腿”。眼睛里仍然闪着光，是更亮的光。\n\n---\n\n事实是，我不喝咖啡，更不去咖啡馆，也没有『三楼的猫』咖啡馆。《北京，北京》是我在地铁上看的。\n\n但是懒猫的故事却是真实的。","source":"_posts/cat.md","raw":"---\ntitle: 懒猫\ndate: 2018-10-28 23:06:56\ntags: ['随笔', '碎片']\n---\n\n> 每日一言：三里清风 三里路 步步风里 步步你\n\n—— “小姐姐，你最近桃花好烂。”\n\n认识懒猫纯属偶然，毕竟是两个世界的人。\n\n那天，大概是云淡风轻、春暖花开的一个午后。我抱着 kindle 跑到常去的『三楼的猫』咖啡馆，点了一杯卡布奇诺，然后一边晒太阳，一边读冯唐的《北京，北京》。阳光透过落地窗潵到我身上，暖洋洋的。喜欢这家咖啡馆有两个原因，一个原因是这里的座位都是沙发，坐上去，整个人都塌陷下去，很舒服；另一个原因是这里有超大的落地窗。我喜欢阳光，如果有一天没有太阳，也许我的生命就也会随之枯萎。\n\n“小姐姐，你最近桃花好烂。”听到声音，我抬了一下头，一个清瘦的少年微笑着坐在我对面，眼睛笑起来像一只猫。\n\n“哦...”然后继续低下头看我的书。\n\n“你看我。”\n\n“你长的像夏目。”我抬起头，看着他。\n\n“爱情如果是一个人的事就好了。两个人的距离是 100 步，你走 51 步，你就输了。”\n\n“说说你吧...”我合上 kindle 听懒猫讲他的故事。\n\n“我学理，数学很好，高考考了 132 分，但是我英语只有 48 分。大学没有学习，谈了 5 个女朋友，每个都没有坚持过一年。”\n\n“你喜欢他们吗？”\n\n“每一个我都喜欢。”\n\n“那你爱他们吗？”他没有回答，继续讲他的故事。\n\n“大学最后一个女朋友说我这么美，你却总把我拍的这么丑，所以我俩一起打工赚钱买了单反。毕业的时候她却说要出国了，可能不回来了，问我要不要跟她一起，我笑着说，我去不了啊。她说，那么好好练习摄影吧。这几年，我拿着那部单反走过了许多地方，拍照也不丑了，她却回不来了。”我看着他，微笑着，眼神里却闪着光。\n\n“毕业前在老家买了 3 套房子，去年房价暴涨的时候卖了两套。我就不工作了，背着画板去丽江画画，去西藏画画。去西藏的时候，同行的有两个妹子由于高反被送进医院，那时候可能是由于恐怖吧，她们一直在哭着说想回家见爸妈。看着他们我却很淡漠，因为我喜欢远方，如果可以，我愿意一直呆在那里。”\n\n“玩够了，我回来了，在家待着。一人，两猫，三餐，四季，琴棋书画度过余生。”\n\n“她走后，我也谈过一个女朋友，比我大，最后嫌弃我不上进，不工作，分手了。我不明白，如果我可以每年挣和你一样多的钱，为什么一定要按照固定的模式上班下班。”\n\n“我睡过十几个女生，去年圣诞节，和一个妹子一起去泡温泉，回来后谁也不联系谁，我觉得这样挺好。两个孤独的灵魂互相取暖，回归生活却谁也不打扰谁。”\n\n“现在，我想找一个小姐姐一起同居两周。看日出日落，早上一起刷牙，我的牙膏摸到她脸上，给她做营养早餐。周六一起赖床，抱着她窝在床上看电影，一起旅行。拍下幸福快乐的瞬间，然后我就不拍照了。”\n\n“你愿意来吗？”\n\n“我不愿意...”我说。\n\n“好吧。”然后懒猫走出了咖啡馆。\n\n看着他的背影渐渐消失于人群中，我想，也许他阅人无数，所以需要的是灶边炉台吧。\n\n几天后，再次在咖啡馆见到懒猫，他仍然微笑着，看到我，说：“我一个好朋友要过来和我同居，是一个大美女，168，大长腿”。眼睛里仍然闪着光，是更亮的光。\n\n---\n\n事实是，我不喝咖啡，更不去咖啡馆，也没有『三楼的猫』咖啡馆。《北京，北京》是我在地铁上看的。\n\n但是懒猫的故事却是真实的。","slug":"cat","published":1,"updated":"2018-10-29T11:58:39.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetni000g8b059fowuhx0","content":"<blockquote>\n<p>每日一言：三里清风 三里路 步步风里 步步你</p>\n</blockquote>\n<p>—— “小姐姐，你最近桃花好烂。”</p>\n<p>认识懒猫纯属偶然，毕竟是两个世界的人。</p>\n<p>那天，大概是云淡风轻、春暖花开的一个午后。我抱着 kindle 跑到常去的『三楼的猫』咖啡馆，点了一杯卡布奇诺，然后一边晒太阳，一边读冯唐的《北京，北京》。阳光透过落地窗潵到我身上，暖洋洋的。喜欢这家咖啡馆有两个原因，一个原因是这里的座位都是沙发，坐上去，整个人都塌陷下去，很舒服；另一个原因是这里有超大的落地窗。我喜欢阳光，如果有一天没有太阳，也许我的生命就也会随之枯萎。</p>\n<p>“小姐姐，你最近桃花好烂。”听到声音，我抬了一下头，一个清瘦的少年微笑着坐在我对面，眼睛笑起来像一只猫。</p>\n<p>“哦…”然后继续低下头看我的书。</p>\n<p>“你看我。”</p>\n<p>“你长的像夏目。”我抬起头，看着他。</p>\n<p>“爱情如果是一个人的事就好了。两个人的距离是 100 步，你走 51 步，你就输了。”</p>\n<p>“说说你吧…”我合上 kindle 听懒猫讲他的故事。</p>\n<p>“我学理，数学很好，高考考了 132 分，但是我英语只有 48 分。大学没有学习，谈了 5 个女朋友，每个都没有坚持过一年。”</p>\n<p>“你喜欢他们吗？”</p>\n<p>“每一个我都喜欢。”</p>\n<p>“那你爱他们吗？”他没有回答，继续讲他的故事。</p>\n<p>“大学最后一个女朋友说我这么美，你却总把我拍的这么丑，所以我俩一起打工赚钱买了单反。毕业的时候她却说要出国了，可能不回来了，问我要不要跟她一起，我笑着说，我去不了啊。她说，那么好好练习摄影吧。这几年，我拿着那部单反走过了许多地方，拍照也不丑了，她却回不来了。”我看着他，微笑着，眼神里却闪着光。</p>\n<p>“毕业前在老家买了 3 套房子，去年房价暴涨的时候卖了两套。我就不工作了，背着画板去丽江画画，去西藏画画。去西藏的时候，同行的有两个妹子由于高反被送进医院，那时候可能是由于恐怖吧，她们一直在哭着说想回家见爸妈。看着他们我却很淡漠，因为我喜欢远方，如果可以，我愿意一直呆在那里。”</p>\n<p>“玩够了，我回来了，在家待着。一人，两猫，三餐，四季，琴棋书画度过余生。”</p>\n<p>“她走后，我也谈过一个女朋友，比我大，最后嫌弃我不上进，不工作，分手了。我不明白，如果我可以每年挣和你一样多的钱，为什么一定要按照固定的模式上班下班。”</p>\n<p>“我睡过十几个女生，去年圣诞节，和一个妹子一起去泡温泉，回来后谁也不联系谁，我觉得这样挺好。两个孤独的灵魂互相取暖，回归生活却谁也不打扰谁。”</p>\n<p>“现在，我想找一个小姐姐一起同居两周。看日出日落，早上一起刷牙，我的牙膏摸到她脸上，给她做营养早餐。周六一起赖床，抱着她窝在床上看电影，一起旅行。拍下幸福快乐的瞬间，然后我就不拍照了。”</p>\n<p>“你愿意来吗？”</p>\n<p>“我不愿意…”我说。</p>\n<p>“好吧。”然后懒猫走出了咖啡馆。</p>\n<p>看着他的背影渐渐消失于人群中，我想，也许他阅人无数，所以需要的是灶边炉台吧。</p>\n<p>几天后，再次在咖啡馆见到懒猫，他仍然微笑着，看到我，说：“我一个好朋友要过来和我同居，是一个大美女，168，大长腿”。眼睛里仍然闪着光，是更亮的光。</p>\n<hr>\n<p>事实是，我不喝咖啡，更不去咖啡馆，也没有『三楼的猫』咖啡馆。《北京，北京》是我在地铁上看的。</p>\n<p>但是懒猫的故事却是真实的。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言：三里清风 三里路 步步风里 步步你</p>\n</blockquote>\n<p>—— “小姐姐，你最近桃花好烂。”</p>\n<p>认识懒猫纯属偶然，毕竟是两个世界的人。</p>\n<p>那天，大概是云淡风轻、春暖花开的一个午后。我抱着 kindle 跑到常去的『三楼的猫』咖啡馆，点了一杯卡布奇诺，然后一边晒太阳，一边读冯唐的《北京，北京》。阳光透过落地窗潵到我身上，暖洋洋的。喜欢这家咖啡馆有两个原因，一个原因是这里的座位都是沙发，坐上去，整个人都塌陷下去，很舒服；另一个原因是这里有超大的落地窗。我喜欢阳光，如果有一天没有太阳，也许我的生命就也会随之枯萎。</p>\n<p>“小姐姐，你最近桃花好烂。”听到声音，我抬了一下头，一个清瘦的少年微笑着坐在我对面，眼睛笑起来像一只猫。</p>\n<p>“哦…”然后继续低下头看我的书。</p>\n<p>“你看我。”</p>\n<p>“你长的像夏目。”我抬起头，看着他。</p>\n<p>“爱情如果是一个人的事就好了。两个人的距离是 100 步，你走 51 步，你就输了。”</p>\n<p>“说说你吧…”我合上 kindle 听懒猫讲他的故事。</p>\n<p>“我学理，数学很好，高考考了 132 分，但是我英语只有 48 分。大学没有学习，谈了 5 个女朋友，每个都没有坚持过一年。”</p>\n<p>“你喜欢他们吗？”</p>\n<p>“每一个我都喜欢。”</p>\n<p>“那你爱他们吗？”他没有回答，继续讲他的故事。</p>\n<p>“大学最后一个女朋友说我这么美，你却总把我拍的这么丑，所以我俩一起打工赚钱买了单反。毕业的时候她却说要出国了，可能不回来了，问我要不要跟她一起，我笑着说，我去不了啊。她说，那么好好练习摄影吧。这几年，我拿着那部单反走过了许多地方，拍照也不丑了，她却回不来了。”我看着他，微笑着，眼神里却闪着光。</p>\n<p>“毕业前在老家买了 3 套房子，去年房价暴涨的时候卖了两套。我就不工作了，背着画板去丽江画画，去西藏画画。去西藏的时候，同行的有两个妹子由于高反被送进医院，那时候可能是由于恐怖吧，她们一直在哭着说想回家见爸妈。看着他们我却很淡漠，因为我喜欢远方，如果可以，我愿意一直呆在那里。”</p>\n<p>“玩够了，我回来了，在家待着。一人，两猫，三餐，四季，琴棋书画度过余生。”</p>\n<p>“她走后，我也谈过一个女朋友，比我大，最后嫌弃我不上进，不工作，分手了。我不明白，如果我可以每年挣和你一样多的钱，为什么一定要按照固定的模式上班下班。”</p>\n<p>“我睡过十几个女生，去年圣诞节，和一个妹子一起去泡温泉，回来后谁也不联系谁，我觉得这样挺好。两个孤独的灵魂互相取暖，回归生活却谁也不打扰谁。”</p>\n<p>“现在，我想找一个小姐姐一起同居两周。看日出日落，早上一起刷牙，我的牙膏摸到她脸上，给她做营养早餐。周六一起赖床，抱着她窝在床上看电影，一起旅行。拍下幸福快乐的瞬间，然后我就不拍照了。”</p>\n<p>“你愿意来吗？”</p>\n<p>“我不愿意…”我说。</p>\n<p>“好吧。”然后懒猫走出了咖啡馆。</p>\n<p>看着他的背影渐渐消失于人群中，我想，也许他阅人无数，所以需要的是灶边炉台吧。</p>\n<p>几天后，再次在咖啡馆见到懒猫，他仍然微笑着，看到我，说：“我一个好朋友要过来和我同居，是一个大美女，168，大长腿”。眼睛里仍然闪着光，是更亮的光。</p>\n<hr>\n<p>事实是，我不喝咖啡，更不去咖啡馆，也没有『三楼的猫』咖啡馆。《北京，北京》是我在地铁上看的。</p>\n<p>但是懒猫的故事却是真实的。</p>\n"},{"title":"【学习笔记】Thunk 函数","date":"2018-10-19T08:28:43.000Z","_content":"\n> 每日一言：绅士就是所做的不是自己想做之事，而是自己应做之事 - 村上春树\n\n从阮一峰的《ES6 标准入门》了解到 Thunk 函数的概念，为什么百度翻译 Thunk 是 臀部 😓 。\n\n## 背景\n\n### 举个 🌰\n\n```js\nvar x = 1;\nfunction f(m) {\n    return m * 2;\n}\n\nf(x + 5);\n```\n\n编程语言对于上述程序的求值策略有两种意见，即『传值调用（call by value）』和『传名调用（call by name）』。\n\n- 传值调用：先计算出 x + 5(=6)， 再调用 f(6)\n    - 优点：简单\n    - 缺点：某些参数没用到就计算，会造成性能损失\n- 传名调用：直接将表达式 x + 5 传入函数体，即 (x + 5) * 2\n\n## 含义\n\n> 【摘自阮一峰的《ES6 标准入门》】编译器的“传名调用”的实现往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就成为 Thunk 函数。\n\n### Javascript 的 Thunk 函数\n\n> JS 语音是传值调用，所以在 JS 中，Thunk 函数替换的不是表达式，而是多参数函数，将其替换成一个只接受回调函数作为参数的单参数函数，如下例：\n\n```\nf(a, cb);\n\nvar Thunk = function (a) {\n    return function (cb) {\n        return f(a, cb); \n    };\n};\n\nvar ex = Thunk(a);\nex(cb);\n```\n\n可以看出，对于一个有多个参数的函数（有一个参数是毁掉函数），Thunk 函数的作用就是将其转换成一个只接收回调函数作为参数的单参数函数。\n\n## thunkify 模块\n\n> 源码：https://github.com/tj/node-thunkify\n> npmjs：https://www.npmjs.com/package/thunkify\n\nthunkify 是一个可以直接拿过来用的封装好的 Thunk 函数，源码很简单，限制了回调函数只允许执行一次。和 co 一样是 tj 开发的，好吧，tj已经是我偶像了。\n\n## 作用\n\n书中讲，以前是没什么用的，因为没有什么使用场景，但是 ES6 中有了 Generator 函数之后， Thunk 函数就可以用于 Generator 函数的自动流程管理。\n\n### 举个 🌰\n\n```js\nfunction* gen() {\n    // ...\n}\n\nvar g = gen();\nvar res = g.next();\n\nwhile(!res.done) {\n    console.log(res.value);\n    res = g.next();\n}\n```\n\n上述情况下，while 循环会一直自动执行 gen.next 直到完成所有的步骤。这样有一个缺点是，在异步下，需要等前一个异步操作执行完之后再继续执行。此时，就需要借助 Thunk 函数。举一个书中的栗子：\n\n```js\n/* 以读取文件为例 */\n\nvar fs = require('fs');\nvar thunkify = require('thunkify');\nvar readFileThunk = thunkify(fs.readFile);\n\nvar gen = function* () {\n    var r1 = yeild readFileThunk('/etc/fstab');\n    console.log(r1.toString());\n    var r2 = yeild readFileThunk('/etc/shells');\n    console.log(r2.toString());\n};\n```\n众所周知，Generator 函数中的 yeild 是交出 Generator 函数的执行权，即去执行异步函数，而 yeild 后面跟的 Thunk 函数可以在回调函数中，将执行权重新交给 Generator。\n\n此时，可以通过一个 Generator 函数的自动执行器来自动执行 Generator 函数。如下：\n\n```js\n\nfunction run(fn) {\n    var gen = fn();\n\n    function next(err, data) {\n        var result = gen.next(data);\n        if (result.done) {\n            return;\n        }\n        result.value(next);\n    }\n\n    next();\n}\n\nfunction* g() {\n    // ...\n}\n\n// 执行\nrun(g);\n```","source":"_posts/es6-thunk.md","raw":"---\ntitle: 【学习笔记】Thunk 函数\ndate: 2018-10-19 16:28:43\ntags: ['javascript', 'generator']\n---\n\n> 每日一言：绅士就是所做的不是自己想做之事，而是自己应做之事 - 村上春树\n\n从阮一峰的《ES6 标准入门》了解到 Thunk 函数的概念，为什么百度翻译 Thunk 是 臀部 😓 。\n\n## 背景\n\n### 举个 🌰\n\n```js\nvar x = 1;\nfunction f(m) {\n    return m * 2;\n}\n\nf(x + 5);\n```\n\n编程语言对于上述程序的求值策略有两种意见，即『传值调用（call by value）』和『传名调用（call by name）』。\n\n- 传值调用：先计算出 x + 5(=6)， 再调用 f(6)\n    - 优点：简单\n    - 缺点：某些参数没用到就计算，会造成性能损失\n- 传名调用：直接将表达式 x + 5 传入函数体，即 (x + 5) * 2\n\n## 含义\n\n> 【摘自阮一峰的《ES6 标准入门》】编译器的“传名调用”的实现往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就成为 Thunk 函数。\n\n### Javascript 的 Thunk 函数\n\n> JS 语音是传值调用，所以在 JS 中，Thunk 函数替换的不是表达式，而是多参数函数，将其替换成一个只接受回调函数作为参数的单参数函数，如下例：\n\n```\nf(a, cb);\n\nvar Thunk = function (a) {\n    return function (cb) {\n        return f(a, cb); \n    };\n};\n\nvar ex = Thunk(a);\nex(cb);\n```\n\n可以看出，对于一个有多个参数的函数（有一个参数是毁掉函数），Thunk 函数的作用就是将其转换成一个只接收回调函数作为参数的单参数函数。\n\n## thunkify 模块\n\n> 源码：https://github.com/tj/node-thunkify\n> npmjs：https://www.npmjs.com/package/thunkify\n\nthunkify 是一个可以直接拿过来用的封装好的 Thunk 函数，源码很简单，限制了回调函数只允许执行一次。和 co 一样是 tj 开发的，好吧，tj已经是我偶像了。\n\n## 作用\n\n书中讲，以前是没什么用的，因为没有什么使用场景，但是 ES6 中有了 Generator 函数之后， Thunk 函数就可以用于 Generator 函数的自动流程管理。\n\n### 举个 🌰\n\n```js\nfunction* gen() {\n    // ...\n}\n\nvar g = gen();\nvar res = g.next();\n\nwhile(!res.done) {\n    console.log(res.value);\n    res = g.next();\n}\n```\n\n上述情况下，while 循环会一直自动执行 gen.next 直到完成所有的步骤。这样有一个缺点是，在异步下，需要等前一个异步操作执行完之后再继续执行。此时，就需要借助 Thunk 函数。举一个书中的栗子：\n\n```js\n/* 以读取文件为例 */\n\nvar fs = require('fs');\nvar thunkify = require('thunkify');\nvar readFileThunk = thunkify(fs.readFile);\n\nvar gen = function* () {\n    var r1 = yeild readFileThunk('/etc/fstab');\n    console.log(r1.toString());\n    var r2 = yeild readFileThunk('/etc/shells');\n    console.log(r2.toString());\n};\n```\n众所周知，Generator 函数中的 yeild 是交出 Generator 函数的执行权，即去执行异步函数，而 yeild 后面跟的 Thunk 函数可以在回调函数中，将执行权重新交给 Generator。\n\n此时，可以通过一个 Generator 函数的自动执行器来自动执行 Generator 函数。如下：\n\n```js\n\nfunction run(fn) {\n    var gen = fn();\n\n    function next(err, data) {\n        var result = gen.next(data);\n        if (result.done) {\n            return;\n        }\n        result.value(next);\n    }\n\n    next();\n}\n\nfunction* g() {\n    // ...\n}\n\n// 执行\nrun(g);\n```","slug":"es6-thunk","published":1,"updated":"2018-10-23T06:45:04.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnk000h8b05gevn5sbv","content":"<blockquote>\n<p>每日一言：绅士就是所做的不是自己想做之事，而是自己应做之事 - 村上春树</p>\n</blockquote>\n<p>从阮一峰的《ES6 标准入门》了解到 Thunk 函数的概念，为什么百度翻译 Thunk 是 臀部 😓 。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"举个-🌰\"><a href=\"#举个-🌰\" class=\"headerlink\" title=\"举个 🌰\"></a>举个 🌰</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(x + <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>编程语言对于上述程序的求值策略有两种意见，即『传值调用（call by value）』和『传名调用（call by name）』。</p>\n<ul>\n<li>传值调用：先计算出 x + 5(=6)， 再调用 f(6)<ul>\n<li>优点：简单</li>\n<li>缺点：某些参数没用到就计算，会造成性能损失</li>\n</ul>\n</li>\n<li>传名调用：直接将表达式 x + 5 传入函数体，即 (x + 5) * 2</li>\n</ul>\n<h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h2><blockquote>\n<p>【摘自阮一峰的《ES6 标准入门》】编译器的“传名调用”的实现往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就成为 Thunk 函数。</p>\n</blockquote>\n<h3 id=\"Javascript-的-Thunk-函数\"><a href=\"#Javascript-的-Thunk-函数\" class=\"headerlink\" title=\"Javascript 的 Thunk 函数\"></a>Javascript 的 Thunk 函数</h3><blockquote>\n<p>JS 语音是传值调用，所以在 JS 中，Thunk 函数替换的不是表达式，而是多参数函数，将其替换成一个只接受回调函数作为参数的单参数函数，如下例：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(a, cb);</span><br><span class=\"line\"></span><br><span class=\"line\">var Thunk = function (a) &#123;</span><br><span class=\"line\">    return function (cb) &#123;</span><br><span class=\"line\">        return f(a, cb); </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var ex = Thunk(a);</span><br><span class=\"line\">ex(cb);</span><br></pre></td></tr></table></figure>\n<p>可以看出，对于一个有多个参数的函数（有一个参数是毁掉函数），Thunk 函数的作用就是将其转换成一个只接收回调函数作为参数的单参数函数。</p>\n<h2 id=\"thunkify-模块\"><a href=\"#thunkify-模块\" class=\"headerlink\" title=\"thunkify 模块\"></a>thunkify 模块</h2><blockquote>\n<p>源码：<a href=\"https://github.com/tj/node-thunkify\" target=\"_blank\" rel=\"noopener\">https://github.com/tj/node-thunkify</a><br>npmjs：<a href=\"https://www.npmjs.com/package/thunkify\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/thunkify</a></p>\n</blockquote>\n<p>thunkify 是一个可以直接拿过来用的封装好的 Thunk 函数，源码很简单，限制了回调函数只允许执行一次。和 co 一样是 tj 开发的，好吧，tj已经是我偶像了。</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>书中讲，以前是没什么用的，因为没有什么使用场景，但是 ES6 中有了 Generator 函数之后， Thunk 函数就可以用于 Generator 函数的自动流程管理。</p>\n<h3 id=\"举个-🌰-1\"><a href=\"#举个-🌰-1\" class=\"headerlink\" title=\"举个 🌰\"></a>举个 🌰</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = g.next();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!res.done) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.value);</span><br><span class=\"line\">    res = g.next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述情况下，while 循环会一直自动执行 gen.next 直到完成所有的步骤。这样有一个缺点是，在异步下，需要等前一个异步操作执行完之后再继续执行。此时，就需要借助 Thunk 函数。举一个书中的栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 以读取文件为例 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> thunkify = <span class=\"built_in\">require</span>(<span class=\"string\">'thunkify'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> readFileThunk = thunkify(fs.readFile);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r1 = yeild readFileThunk(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r1.toString());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r2 = yeild readFileThunk(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>众所周知，Generator 函数中的 yeild 是交出 Generator 函数的执行权，即去执行异步函数，而 yeild 后面跟的 Thunk 函数可以在回调函数中，将执行权重新交给 Generator。</p>\n<p>此时，可以通过一个 Generator 函数的自动执行器来自动执行 Generator 函数。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = fn();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = gen.next(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.done) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.value(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\">run(g);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言：绅士就是所做的不是自己想做之事，而是自己应做之事 - 村上春树</p>\n</blockquote>\n<p>从阮一峰的《ES6 标准入门》了解到 Thunk 函数的概念，为什么百度翻译 Thunk 是 臀部 😓 。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"举个-🌰\"><a href=\"#举个-🌰\" class=\"headerlink\" title=\"举个 🌰\"></a>举个 🌰</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(x + <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>编程语言对于上述程序的求值策略有两种意见，即『传值调用（call by value）』和『传名调用（call by name）』。</p>\n<ul>\n<li>传值调用：先计算出 x + 5(=6)， 再调用 f(6)<ul>\n<li>优点：简单</li>\n<li>缺点：某些参数没用到就计算，会造成性能损失</li>\n</ul>\n</li>\n<li>传名调用：直接将表达式 x + 5 传入函数体，即 (x + 5) * 2</li>\n</ul>\n<h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h2><blockquote>\n<p>【摘自阮一峰的《ES6 标准入门》】编译器的“传名调用”的实现往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就成为 Thunk 函数。</p>\n</blockquote>\n<h3 id=\"Javascript-的-Thunk-函数\"><a href=\"#Javascript-的-Thunk-函数\" class=\"headerlink\" title=\"Javascript 的 Thunk 函数\"></a>Javascript 的 Thunk 函数</h3><blockquote>\n<p>JS 语音是传值调用，所以在 JS 中，Thunk 函数替换的不是表达式，而是多参数函数，将其替换成一个只接受回调函数作为参数的单参数函数，如下例：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(a, cb);</span><br><span class=\"line\"></span><br><span class=\"line\">var Thunk = function (a) &#123;</span><br><span class=\"line\">    return function (cb) &#123;</span><br><span class=\"line\">        return f(a, cb); </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var ex = Thunk(a);</span><br><span class=\"line\">ex(cb);</span><br></pre></td></tr></table></figure>\n<p>可以看出，对于一个有多个参数的函数（有一个参数是毁掉函数），Thunk 函数的作用就是将其转换成一个只接收回调函数作为参数的单参数函数。</p>\n<h2 id=\"thunkify-模块\"><a href=\"#thunkify-模块\" class=\"headerlink\" title=\"thunkify 模块\"></a>thunkify 模块</h2><blockquote>\n<p>源码：<a href=\"https://github.com/tj/node-thunkify\" target=\"_blank\" rel=\"noopener\">https://github.com/tj/node-thunkify</a><br>npmjs：<a href=\"https://www.npmjs.com/package/thunkify\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/thunkify</a></p>\n</blockquote>\n<p>thunkify 是一个可以直接拿过来用的封装好的 Thunk 函数，源码很简单，限制了回调函数只允许执行一次。和 co 一样是 tj 开发的，好吧，tj已经是我偶像了。</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>书中讲，以前是没什么用的，因为没有什么使用场景，但是 ES6 中有了 Generator 函数之后， Thunk 函数就可以用于 Generator 函数的自动流程管理。</p>\n<h3 id=\"举个-🌰-1\"><a href=\"#举个-🌰-1\" class=\"headerlink\" title=\"举个 🌰\"></a>举个 🌰</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = g.next();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!res.done) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.value);</span><br><span class=\"line\">    res = g.next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述情况下，while 循环会一直自动执行 gen.next 直到完成所有的步骤。这样有一个缺点是，在异步下，需要等前一个异步操作执行完之后再继续执行。此时，就需要借助 Thunk 函数。举一个书中的栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 以读取文件为例 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> thunkify = <span class=\"built_in\">require</span>(<span class=\"string\">'thunkify'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> readFileThunk = thunkify(fs.readFile);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r1 = yeild readFileThunk(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r1.toString());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r2 = yeild readFileThunk(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>众所周知，Generator 函数中的 yeild 是交出 Generator 函数的执行权，即去执行异步函数，而 yeild 后面跟的 Thunk 函数可以在回调函数中，将执行权重新交给 Generator。</p>\n<p>此时，可以通过一个 Generator 函数的自动执行器来自动执行 Generator 函数。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = fn();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = gen.next(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.done) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.value(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\">run(g);</span><br></pre></td></tr></table></figure>"},{"title":"【持续更新】常用命令","date":"2018-10-09T02:55:26.000Z","_content":"\n> 每日一言: 想在初雪的晚上去压马路\n\n# shell 命令\n\n\n- diff -urNa dir1 dir2\n    - 说明：对比两个文件夹 diff\n    - 参数解释：\n```shell\n-a  Treat  all  files  as text and compare them     \n    line-by-line, even if they do not seem to be text.\n-N, --new-file\n    In  directory  comparison, if a file is found in\n    only one directory, treat it as present but empty\n    in the other directory.\n-r  When comparing directories, recursively compare\n    any subdirectories found.\n-u  Use the unified output format.\n```\n\n- tree\n    - 说明：生成树形结构目录\n    - 安装：\n```shell\nbrew install tree\n```\n    - 参数解释：\n```shell\n    -a 显示所有文件和目录。\n    -A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n    -C 在文件和目录清单加上色彩，便于区分各种类型。\n    -d 显示目录名称而非内容。\n    -D 列出文件或目录的更改时间。\n    -f 在每个文件或目录之前，显示完整的相对路径名称。\n    -F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|\"号。\n    -g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n    -i 不以阶梯状列出文件或目录名称。\n    -I 不显示符合范本样式的文件或目录名称。\n    -l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n    -n 不在文件和目录清单加上色彩。\n    -N 直接列出文件和目录名称，包括控制字符。\n    -p 列出权限标示。\n    -P 只显示符合范本样式的文件或目录名称。\n    -q 用\"?\"号取代控制字符，列出文件和目录名称。\n    -s 列出文件或目录大小。\n    -t 用文件和目录的更改时间排序。\n    -u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n    -x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。\n```\n\n- http-server\n    - 说明：启动本地服务\n    - 安装：\n    ```js\n    npm install http-server -g\n    ```\n    - 使用：\n    ```js\n    http-server [path] [options]\n    ```\n    - 参数解释：参考 https://github.com/indexzero/http-server","source":"_posts/commands.md","raw":"---\ntitle: 【持续更新】常用命令\ndate: 2018-10-09 10:55:26\ntags: ['shell']\n---\n\n> 每日一言: 想在初雪的晚上去压马路\n\n# shell 命令\n\n\n- diff -urNa dir1 dir2\n    - 说明：对比两个文件夹 diff\n    - 参数解释：\n```shell\n-a  Treat  all  files  as text and compare them     \n    line-by-line, even if they do not seem to be text.\n-N, --new-file\n    In  directory  comparison, if a file is found in\n    only one directory, treat it as present but empty\n    in the other directory.\n-r  When comparing directories, recursively compare\n    any subdirectories found.\n-u  Use the unified output format.\n```\n\n- tree\n    - 说明：生成树形结构目录\n    - 安装：\n```shell\nbrew install tree\n```\n    - 参数解释：\n```shell\n    -a 显示所有文件和目录。\n    -A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n    -C 在文件和目录清单加上色彩，便于区分各种类型。\n    -d 显示目录名称而非内容。\n    -D 列出文件或目录的更改时间。\n    -f 在每个文件或目录之前，显示完整的相对路径名称。\n    -F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|\"号。\n    -g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n    -i 不以阶梯状列出文件或目录名称。\n    -I 不显示符合范本样式的文件或目录名称。\n    -l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n    -n 不在文件和目录清单加上色彩。\n    -N 直接列出文件和目录名称，包括控制字符。\n    -p 列出权限标示。\n    -P 只显示符合范本样式的文件或目录名称。\n    -q 用\"?\"号取代控制字符，列出文件和目录名称。\n    -s 列出文件或目录大小。\n    -t 用文件和目录的更改时间排序。\n    -u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n    -x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。\n```\n\n- http-server\n    - 说明：启动本地服务\n    - 安装：\n    ```js\n    npm install http-server -g\n    ```\n    - 使用：\n    ```js\n    http-server [path] [options]\n    ```\n    - 参数解释：参考 https://github.com/indexzero/http-server","slug":"commands","published":1,"updated":"2018-10-26T06:20:38.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnm000j8b05of2ryxpf","content":"<blockquote>\n<p>每日一言: 想在初雪的晚上去压马路</p>\n</blockquote>\n<h1 id=\"shell-命令\"><a href=\"#shell-命令\" class=\"headerlink\" title=\"shell 命令\"></a>shell 命令</h1><ul>\n<li><p>diff -urNa dir1 dir2</p>\n<ul>\n<li>说明：对比两个文件夹 diff</li>\n<li>参数解释：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a  Treat  all  files  as text and compare them     </span><br><span class=\"line\">    line-by-line, even if they do not seem to be text.</span><br><span class=\"line\">-N, --new-file</span><br><span class=\"line\">    In  directory  comparison, if a file is found in</span><br><span class=\"line\">    only one directory, treat it as present but empty</span><br><span class=\"line\">    in the other directory.</span><br><span class=\"line\">-r  When comparing directories, recursively compare</span><br><span class=\"line\">    any subdirectories found.</span><br><span class=\"line\">-u  Use the unified output format.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>tree</p>\n<ul>\n<li>说明：生成树形结构目录</li>\n<li><p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install tree</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数解释：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a 显示所有文件和目录。</span><br><span class=\"line\">-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</span><br><span class=\"line\">-C 在文件和目录清单加上色彩，便于区分各种类型。</span><br><span class=\"line\">-d 显示目录名称而非内容。</span><br><span class=\"line\">-D 列出文件或目录的更改时间。</span><br><span class=\"line\">-f 在每个文件或目录之前，显示完整的相对路径名称。</span><br><span class=\"line\">-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|\"号。</span><br><span class=\"line\">-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</span><br><span class=\"line\">-i 不以阶梯状列出文件或目录名称。</span><br><span class=\"line\">-I 不显示符合范本样式的文件或目录名称。</span><br><span class=\"line\">-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</span><br><span class=\"line\">-n 不在文件和目录清单加上色彩。</span><br><span class=\"line\">-N 直接列出文件和目录名称，包括控制字符。</span><br><span class=\"line\">-p 列出权限标示。</span><br><span class=\"line\">-P 只显示符合范本样式的文件或目录名称。</span><br><span class=\"line\">-q 用\"?\"号取代控制字符，列出文件和目录名称。</span><br><span class=\"line\">-s 列出文件或目录大小。</span><br><span class=\"line\">-t 用文件和目录的更改时间排序。</span><br><span class=\"line\">-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</span><br><span class=\"line\">-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>http-server</p>\n<ul>\n<li>说明：启动本地服务</li>\n<li><p>安装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install http-server -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server [path] [options]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数解释：参考 <a href=\"https://github.com/indexzero/http-server\" target=\"_blank\" rel=\"noopener\">https://github.com/indexzero/http-server</a></p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言: 想在初雪的晚上去压马路</p>\n</blockquote>\n<h1 id=\"shell-命令\"><a href=\"#shell-命令\" class=\"headerlink\" title=\"shell 命令\"></a>shell 命令</h1><ul>\n<li><p>diff -urNa dir1 dir2</p>\n<ul>\n<li>说明：对比两个文件夹 diff</li>\n<li>参数解释：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a  Treat  all  files  as text and compare them     </span><br><span class=\"line\">    line-by-line, even if they do not seem to be text.</span><br><span class=\"line\">-N, --new-file</span><br><span class=\"line\">    In  directory  comparison, if a file is found in</span><br><span class=\"line\">    only one directory, treat it as present but empty</span><br><span class=\"line\">    in the other directory.</span><br><span class=\"line\">-r  When comparing directories, recursively compare</span><br><span class=\"line\">    any subdirectories found.</span><br><span class=\"line\">-u  Use the unified output format.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>tree</p>\n<ul>\n<li>说明：生成树形结构目录</li>\n<li><p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install tree</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数解释：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a 显示所有文件和目录。</span><br><span class=\"line\">-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</span><br><span class=\"line\">-C 在文件和目录清单加上色彩，便于区分各种类型。</span><br><span class=\"line\">-d 显示目录名称而非内容。</span><br><span class=\"line\">-D 列出文件或目录的更改时间。</span><br><span class=\"line\">-f 在每个文件或目录之前，显示完整的相对路径名称。</span><br><span class=\"line\">-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|\"号。</span><br><span class=\"line\">-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</span><br><span class=\"line\">-i 不以阶梯状列出文件或目录名称。</span><br><span class=\"line\">-I 不显示符合范本样式的文件或目录名称。</span><br><span class=\"line\">-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</span><br><span class=\"line\">-n 不在文件和目录清单加上色彩。</span><br><span class=\"line\">-N 直接列出文件和目录名称，包括控制字符。</span><br><span class=\"line\">-p 列出权限标示。</span><br><span class=\"line\">-P 只显示符合范本样式的文件或目录名称。</span><br><span class=\"line\">-q 用\"?\"号取代控制字符，列出文件和目录名称。</span><br><span class=\"line\">-s 列出文件或目录大小。</span><br><span class=\"line\">-t 用文件和目录的更改时间排序。</span><br><span class=\"line\">-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</span><br><span class=\"line\">-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>http-server</p>\n<ul>\n<li>说明：启动本地服务</li>\n<li><p>安装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install http-server -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server [path] [options]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数解释：参考 <a href=\"https://github.com/indexzero/http-server\" target=\"_blank\" rel=\"noopener\">https://github.com/indexzero/http-server</a></p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-08-23T00:20:41.000Z","updated":"2018-08-23T01:15:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnn000k8b05ruozcfe0","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"失眠的第十三天","date":"2018-10-22T10:22:53.000Z","_content":"\n> 每日一言：浅喜似苍狗，深爱如长风\n\n大概是从十三天前，我开始失眠。\n\n十三天前，我从网易考拉买的花王蒸汽眼罩到了，于是，每天晚上都带着睡觉，相比之前在日本买的，感觉这次的眼罩反而是我比较难入眠。然后开始多梦、少眠。每天早上睁开疲倦的双眼，看一眼这昏暗的世界，找不到坚持下去的意义。\n\n我想在我的世界里狂欢，去体验、去感受新鲜的事物。我研究万圣节好看的化妆，我多想开一个万圣节 cos party，可以暂时在面具下失去真正的自己。可以沉醉，暂时忘记世俗的烦恼。然而事实是，我不会开 party，充其量是化个妆自拍一百张。\n\n我想去看话剧，话剧比电影更有感染力，坐在剧场的观众席上，自己可以完全被带进剧情，同喜同悲。如今却找不到一个一起看话剧的人了，这也许是比话剧本身更悲惨的事了。相比开心麻花的剧，我更喜欢孟京辉的话剧，因为我觉得开心麻花的剧大多是无内涵纯搞笑剧，超多人做在一个超大的剧场里，二楼根本看不清演员的脸，一楼票超级贵，毫无体验感。而蜂巢剧场比较小，就好很多，也许是我喜欢这种风格的话剧。\n\n最近思维跳跃有点大，用阿空的话说就是最近我很疯癫，并且已经有人开始叫我王疯癫了。之前从阿空那拿来的吉他还没有打开过，4年前庆生绿豆送我的那幅画还没有画完，水彩已经干了。其实我不庆生，毕竟从十三岁之后就没有在家过过生日，在外面漂了十几年，并不是很想感受浓烈的亲情，虽然它从未减少过。如果我有，我会给你们最好的，如果没有，就带你们一起看精彩的世界。\n\n最近有点惶恐，由于失眠，总觉得自己得了什么病，可能是心病。就像当年在普吉摔了一跤，总觉得要死了，饭也吃不下，水也喝不下。如今再看到胳膊上的疤，却完全感受不到当年的感觉。现在想想，我的人生也是很丰富了，回国后在家偷偷抹药被我妹发现，然后把我数落了一顿。上次去台湾在飞机上，突然发生颠簸，我也觉得我要死了，紧紧抓着阿空的手，脸色苍白，一落地就马上活蹦乱跳。明明这么胆小，却那么想去过的精彩。","source":"_posts/insomnia.md","raw":"---\ntitle: 失眠的第十三天\ndate: 2018-10-22 18:22:53\ntags: ['随笔', '碎片']\n---\n\n> 每日一言：浅喜似苍狗，深爱如长风\n\n大概是从十三天前，我开始失眠。\n\n十三天前，我从网易考拉买的花王蒸汽眼罩到了，于是，每天晚上都带着睡觉，相比之前在日本买的，感觉这次的眼罩反而是我比较难入眠。然后开始多梦、少眠。每天早上睁开疲倦的双眼，看一眼这昏暗的世界，找不到坚持下去的意义。\n\n我想在我的世界里狂欢，去体验、去感受新鲜的事物。我研究万圣节好看的化妆，我多想开一个万圣节 cos party，可以暂时在面具下失去真正的自己。可以沉醉，暂时忘记世俗的烦恼。然而事实是，我不会开 party，充其量是化个妆自拍一百张。\n\n我想去看话剧，话剧比电影更有感染力，坐在剧场的观众席上，自己可以完全被带进剧情，同喜同悲。如今却找不到一个一起看话剧的人了，这也许是比话剧本身更悲惨的事了。相比开心麻花的剧，我更喜欢孟京辉的话剧，因为我觉得开心麻花的剧大多是无内涵纯搞笑剧，超多人做在一个超大的剧场里，二楼根本看不清演员的脸，一楼票超级贵，毫无体验感。而蜂巢剧场比较小，就好很多，也许是我喜欢这种风格的话剧。\n\n最近思维跳跃有点大，用阿空的话说就是最近我很疯癫，并且已经有人开始叫我王疯癫了。之前从阿空那拿来的吉他还没有打开过，4年前庆生绿豆送我的那幅画还没有画完，水彩已经干了。其实我不庆生，毕竟从十三岁之后就没有在家过过生日，在外面漂了十几年，并不是很想感受浓烈的亲情，虽然它从未减少过。如果我有，我会给你们最好的，如果没有，就带你们一起看精彩的世界。\n\n最近有点惶恐，由于失眠，总觉得自己得了什么病，可能是心病。就像当年在普吉摔了一跤，总觉得要死了，饭也吃不下，水也喝不下。如今再看到胳膊上的疤，却完全感受不到当年的感觉。现在想想，我的人生也是很丰富了，回国后在家偷偷抹药被我妹发现，然后把我数落了一顿。上次去台湾在飞机上，突然发生颠簸，我也觉得我要死了，紧紧抓着阿空的手，脸色苍白，一落地就马上活蹦乱跳。明明这么胆小，却那么想去过的精彩。","slug":"insomnia","published":1,"updated":"2018-10-22T11:30:43.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetno000m8b05pqestx1a","content":"<blockquote>\n<p>每日一言：浅喜似苍狗，深爱如长风</p>\n</blockquote>\n<p>大概是从十三天前，我开始失眠。</p>\n<p>十三天前，我从网易考拉买的花王蒸汽眼罩到了，于是，每天晚上都带着睡觉，相比之前在日本买的，感觉这次的眼罩反而是我比较难入眠。然后开始多梦、少眠。每天早上睁开疲倦的双眼，看一眼这昏暗的世界，找不到坚持下去的意义。</p>\n<p>我想在我的世界里狂欢，去体验、去感受新鲜的事物。我研究万圣节好看的化妆，我多想开一个万圣节 cos party，可以暂时在面具下失去真正的自己。可以沉醉，暂时忘记世俗的烦恼。然而事实是，我不会开 party，充其量是化个妆自拍一百张。</p>\n<p>我想去看话剧，话剧比电影更有感染力，坐在剧场的观众席上，自己可以完全被带进剧情，同喜同悲。如今却找不到一个一起看话剧的人了，这也许是比话剧本身更悲惨的事了。相比开心麻花的剧，我更喜欢孟京辉的话剧，因为我觉得开心麻花的剧大多是无内涵纯搞笑剧，超多人做在一个超大的剧场里，二楼根本看不清演员的脸，一楼票超级贵，毫无体验感。而蜂巢剧场比较小，就好很多，也许是我喜欢这种风格的话剧。</p>\n<p>最近思维跳跃有点大，用阿空的话说就是最近我很疯癫，并且已经有人开始叫我王疯癫了。之前从阿空那拿来的吉他还没有打开过，4年前庆生绿豆送我的那幅画还没有画完，水彩已经干了。其实我不庆生，毕竟从十三岁之后就没有在家过过生日，在外面漂了十几年，并不是很想感受浓烈的亲情，虽然它从未减少过。如果我有，我会给你们最好的，如果没有，就带你们一起看精彩的世界。</p>\n<p>最近有点惶恐，由于失眠，总觉得自己得了什么病，可能是心病。就像当年在普吉摔了一跤，总觉得要死了，饭也吃不下，水也喝不下。如今再看到胳膊上的疤，却完全感受不到当年的感觉。现在想想，我的人生也是很丰富了，回国后在家偷偷抹药被我妹发现，然后把我数落了一顿。上次去台湾在飞机上，突然发生颠簸，我也觉得我要死了，紧紧抓着阿空的手，脸色苍白，一落地就马上活蹦乱跳。明明这么胆小，却那么想去过的精彩。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言：浅喜似苍狗，深爱如长风</p>\n</blockquote>\n<p>大概是从十三天前，我开始失眠。</p>\n<p>十三天前，我从网易考拉买的花王蒸汽眼罩到了，于是，每天晚上都带着睡觉，相比之前在日本买的，感觉这次的眼罩反而是我比较难入眠。然后开始多梦、少眠。每天早上睁开疲倦的双眼，看一眼这昏暗的世界，找不到坚持下去的意义。</p>\n<p>我想在我的世界里狂欢，去体验、去感受新鲜的事物。我研究万圣节好看的化妆，我多想开一个万圣节 cos party，可以暂时在面具下失去真正的自己。可以沉醉，暂时忘记世俗的烦恼。然而事实是，我不会开 party，充其量是化个妆自拍一百张。</p>\n<p>我想去看话剧，话剧比电影更有感染力，坐在剧场的观众席上，自己可以完全被带进剧情，同喜同悲。如今却找不到一个一起看话剧的人了，这也许是比话剧本身更悲惨的事了。相比开心麻花的剧，我更喜欢孟京辉的话剧，因为我觉得开心麻花的剧大多是无内涵纯搞笑剧，超多人做在一个超大的剧场里，二楼根本看不清演员的脸，一楼票超级贵，毫无体验感。而蜂巢剧场比较小，就好很多，也许是我喜欢这种风格的话剧。</p>\n<p>最近思维跳跃有点大，用阿空的话说就是最近我很疯癫，并且已经有人开始叫我王疯癫了。之前从阿空那拿来的吉他还没有打开过，4年前庆生绿豆送我的那幅画还没有画完，水彩已经干了。其实我不庆生，毕竟从十三岁之后就没有在家过过生日，在外面漂了十几年，并不是很想感受浓烈的亲情，虽然它从未减少过。如果我有，我会给你们最好的，如果没有，就带你们一起看精彩的世界。</p>\n<p>最近有点惶恐，由于失眠，总觉得自己得了什么病，可能是心病。就像当年在普吉摔了一跤，总觉得要死了，饭也吃不下，水也喝不下。如今再看到胳膊上的疤，却完全感受不到当年的感觉。现在想想，我的人生也是很丰富了，回国后在家偷偷抹药被我妹发现，然后把我数落了一顿。上次去台湾在飞机上，突然发生颠簸，我也觉得我要死了，紧紧抓着阿空的手，脸色苍白，一落地就马上活蹦乱跳。明明这么胆小，却那么想去过的精彩。</p>\n"},{"title":"Git submodule (Git 子模块)","date":"2018-09-12T03:48:58.000Z","_content":"\n> 参考文档: https://git-scm.com/book/en/v2/Git-Tools-Submodules\n\n在学习的过程中, 暂时觉得 git submodule 和 npm packege 维护方式都是可以的, 后面熟悉后再对两种方式的优缺点进行分析.\n\n## 使用场景\n\n多个父项目中都要使用到子项目 son.\n\n#### 现有解决方案及弊端\n\n- CPAN 安装或 Ruby gem. 弊端: 暂时不了解, 后续补充\n- 拷贝源代码到父项目中. 弊端: 本地修改 son 代码后, 其他父项目中不能及时同步\n- npm package 依赖形式引入. 弊端: 需要加版本所, 依赖包升级需要发布(不过这里和 git submodule 两个优缺点对比, 后续在熟悉后再补充)\n\n#### Git 解决方案\n\n- git submodule (git 会把子项目看做子模块)\n\n## Git submodule 使用介绍\n\n#### 1. 添加 submodule\n\n```javascript\ngit submodule add https://github.com/son   // 这里是假设的地址\n\n或\n// 指定目录\ngit submodule add https://github.com/son pathTo\n```\n\n添加后会在当前目录下生成一个配置文件 `.gitmodules`, 配置文件中有所有 submodule 的相关配置, 多个子项目的配置会根据添加顺序排列. 如:\n\n```json\n[submodule \"son\"]\n\tpath = son\n\turl = https://github.com/son\n```\n\n#### 2. clone 子模块项目\n\n```javascript\n/**\n * --recursive 会自动的c lone子项目\n * 相当于 git submodule init && git submodule update \n */\ngit clone --recursive father // 假设父项目叫 father\n\n或\n\n/* clone 父项目后, 进入到项目目录, 初始化子项目并更新子项目 */\ngit clone father\ncd father\ngit submodule init\ngit submodule update\n```\n\n#### 3. update 子模块项目\n\n```javascript\n/* 进入到 submodule 中手动更新 */\ncd son\ngit fetch\ngit merge origin/master\n\n或\n\ngit submodule update --remote son\n```\n\n#### 4. 查看 子模块项目\n\n```javascript\ngit diff --submodule\n\n或添加配置\n\ngit config --local diff.submodule log // --global 也可以, 这里测试, 只修改了 local\ngit diff\n```\n\n#### 5. 子模块项目指向其分支\n\n```javascript\ngit config -f .gitmodules submodule.son.branch dev\n\n/* 查看 .gitmodules 文件可看到如下*/\n[submodule \"son\"]\n    path = son\n    branch = dev\n\turl = https://github.com/son\n```\n\n## 如何开发子项目\n\n当我们在 father 中进行开发的时候, 虽然可以直接拉取最新的 submodule 代码, 但是 git 并不会对其进行跟踪. 所以, 如果要修改子项目代码, 需要进入到子项目目录中.\n\n#### 1. 切换到开发分支\n\n```javascript\ngit checkout stable\n```\n\n#### 2. 将远程分支合并到当前分支\n\n```javascript\n/**\n *  类似 fork 工作流\n */\ngit submodule update --remote --merge\n\n/* 或 */\ngit submodule update --remote --rebase\n```\n\n#### 3. push 代码\n\n```javascript\n/* 提交 father 的时候加如下参数, 可以检测未提交的 submodule  */\ngit push --recurse-submodules=check\n\n/* 自动提交指定 submodule */\ngit push --recurse-submodules=on-demand\n```\n","source":"_posts/git-submodule.md","raw":"---\ntitle: Git submodule (Git 子模块)\ndate: 2018-09-12 11:48:58\ntags: [\"Git\"]\n---\n\n> 参考文档: https://git-scm.com/book/en/v2/Git-Tools-Submodules\n\n在学习的过程中, 暂时觉得 git submodule 和 npm packege 维护方式都是可以的, 后面熟悉后再对两种方式的优缺点进行分析.\n\n## 使用场景\n\n多个父项目中都要使用到子项目 son.\n\n#### 现有解决方案及弊端\n\n- CPAN 安装或 Ruby gem. 弊端: 暂时不了解, 后续补充\n- 拷贝源代码到父项目中. 弊端: 本地修改 son 代码后, 其他父项目中不能及时同步\n- npm package 依赖形式引入. 弊端: 需要加版本所, 依赖包升级需要发布(不过这里和 git submodule 两个优缺点对比, 后续在熟悉后再补充)\n\n#### Git 解决方案\n\n- git submodule (git 会把子项目看做子模块)\n\n## Git submodule 使用介绍\n\n#### 1. 添加 submodule\n\n```javascript\ngit submodule add https://github.com/son   // 这里是假设的地址\n\n或\n// 指定目录\ngit submodule add https://github.com/son pathTo\n```\n\n添加后会在当前目录下生成一个配置文件 `.gitmodules`, 配置文件中有所有 submodule 的相关配置, 多个子项目的配置会根据添加顺序排列. 如:\n\n```json\n[submodule \"son\"]\n\tpath = son\n\turl = https://github.com/son\n```\n\n#### 2. clone 子模块项目\n\n```javascript\n/**\n * --recursive 会自动的c lone子项目\n * 相当于 git submodule init && git submodule update \n */\ngit clone --recursive father // 假设父项目叫 father\n\n或\n\n/* clone 父项目后, 进入到项目目录, 初始化子项目并更新子项目 */\ngit clone father\ncd father\ngit submodule init\ngit submodule update\n```\n\n#### 3. update 子模块项目\n\n```javascript\n/* 进入到 submodule 中手动更新 */\ncd son\ngit fetch\ngit merge origin/master\n\n或\n\ngit submodule update --remote son\n```\n\n#### 4. 查看 子模块项目\n\n```javascript\ngit diff --submodule\n\n或添加配置\n\ngit config --local diff.submodule log // --global 也可以, 这里测试, 只修改了 local\ngit diff\n```\n\n#### 5. 子模块项目指向其分支\n\n```javascript\ngit config -f .gitmodules submodule.son.branch dev\n\n/* 查看 .gitmodules 文件可看到如下*/\n[submodule \"son\"]\n    path = son\n    branch = dev\n\turl = https://github.com/son\n```\n\n## 如何开发子项目\n\n当我们在 father 中进行开发的时候, 虽然可以直接拉取最新的 submodule 代码, 但是 git 并不会对其进行跟踪. 所以, 如果要修改子项目代码, 需要进入到子项目目录中.\n\n#### 1. 切换到开发分支\n\n```javascript\ngit checkout stable\n```\n\n#### 2. 将远程分支合并到当前分支\n\n```javascript\n/**\n *  类似 fork 工作流\n */\ngit submodule update --remote --merge\n\n/* 或 */\ngit submodule update --remote --rebase\n```\n\n#### 3. push 代码\n\n```javascript\n/* 提交 father 的时候加如下参数, 可以检测未提交的 submodule  */\ngit push --recurse-submodules=check\n\n/* 自动提交指定 submodule */\ngit push --recurse-submodules=on-demand\n```\n","slug":"git-submodule","published":1,"updated":"2018-09-27T06:22:42.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnp000o8b05r7mybj1k","content":"<blockquote>\n<p>参考文档: <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Submodules\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a></p>\n</blockquote>\n<p>在学习的过程中, 暂时觉得 git submodule 和 npm packege 维护方式都是可以的, 后面熟悉后再对两种方式的优缺点进行分析.</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>多个父项目中都要使用到子项目 son.</p>\n<h4 id=\"现有解决方案及弊端\"><a href=\"#现有解决方案及弊端\" class=\"headerlink\" title=\"现有解决方案及弊端\"></a>现有解决方案及弊端</h4><ul>\n<li>CPAN 安装或 Ruby gem. 弊端: 暂时不了解, 后续补充</li>\n<li>拷贝源代码到父项目中. 弊端: 本地修改 son 代码后, 其他父项目中不能及时同步</li>\n<li>npm package 依赖形式引入. 弊端: 需要加版本所, 依赖包升级需要发布(不过这里和 git submodule 两个优缺点对比, 后续在熟悉后再补充)</li>\n</ul>\n<h4 id=\"Git-解决方案\"><a href=\"#Git-解决方案\" class=\"headerlink\" title=\"Git 解决方案\"></a>Git 解决方案</h4><ul>\n<li>git submodule (git 会把子项目看做子模块)</li>\n</ul>\n<h2 id=\"Git-submodule-使用介绍\"><a href=\"#Git-submodule-使用介绍\" class=\"headerlink\" title=\"Git submodule 使用介绍\"></a>Git submodule 使用介绍</h2><h4 id=\"1-添加-submodule\"><a href=\"#1-添加-submodule\" class=\"headerlink\" title=\"1. 添加 submodule\"></a>1. 添加 submodule</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https:<span class=\"comment\">//github.com/son   // 这里是假设的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"comment\">// 指定目录</span></span><br><span class=\"line\">git submodule add https:<span class=\"comment\">//github.com/son pathTo</span></span><br></pre></td></tr></table></figure>\n<p>添加后会在当前目录下生成一个配置文件 <code>.gitmodules</code>, 配置文件中有所有 submodule 的相关配置, 多个子项目的配置会根据添加顺序排列. 如:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule <span class=\"string\">\"son\"</span>]</span><br><span class=\"line\">\tpath = son</span><br><span class=\"line\">\turl = https://github.com/son</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-clone-子模块项目\"><a href=\"#2-clone-子模块项目\" class=\"headerlink\" title=\"2. clone 子模块项目\"></a>2. clone 子模块项目</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * --recursive 会自动的c lone子项目</span></span><br><span class=\"line\"><span class=\"comment\"> * 相当于 git submodule init &amp;&amp; git submodule update </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">git clone --recursive father <span class=\"comment\">// 假设父项目叫 father</span></span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* clone 父项目后, 进入到项目目录, 初始化子项目并更新子项目 */</span></span><br><span class=\"line\">git clone father</span><br><span class=\"line\">cd father</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-update-子模块项目\"><a href=\"#3-update-子模块项目\" class=\"headerlink\" title=\"3. update 子模块项目\"></a>3. update 子模块项目</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 进入到 submodule 中手动更新 */</span></span><br><span class=\"line\">cd son</span><br><span class=\"line\">git fetch</span><br><span class=\"line\">git merge origin/master</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">git submodule update --remote son</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-查看-子模块项目\"><a href=\"#4-查看-子模块项目\" class=\"headerlink\" title=\"4. 查看 子模块项目\"></a>4. 查看 子模块项目</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --submodule</span><br><span class=\"line\"></span><br><span class=\"line\">或添加配置</span><br><span class=\"line\"></span><br><span class=\"line\">git config --local diff.submodule log <span class=\"comment\">// --global 也可以, 这里测试, 只修改了 local</span></span><br><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-子模块项目指向其分支\"><a href=\"#5-子模块项目指向其分支\" class=\"headerlink\" title=\"5. 子模块项目指向其分支\"></a>5. 子模块项目指向其分支</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -f .gitmodules submodule.son.branch dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 查看 .gitmodules 文件可看到如下*/</span></span><br><span class=\"line\">[submodule <span class=\"string\">\"son\"</span>]</span><br><span class=\"line\">    path = son</span><br><span class=\"line\">    branch = dev</span><br><span class=\"line\">\turl = https:<span class=\"comment\">//github.com/son</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"如何开发子项目\"><a href=\"#如何开发子项目\" class=\"headerlink\" title=\"如何开发子项目\"></a>如何开发子项目</h2><p>当我们在 father 中进行开发的时候, 虽然可以直接拉取最新的 submodule 代码, 但是 git 并不会对其进行跟踪. 所以, 如果要修改子项目代码, 需要进入到子项目目录中.</p>\n<h4 id=\"1-切换到开发分支\"><a href=\"#1-切换到开发分支\" class=\"headerlink\" title=\"1. 切换到开发分支\"></a>1. 切换到开发分支</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout stable</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-将远程分支合并到当前分支\"><a href=\"#2-将远程分支合并到当前分支\" class=\"headerlink\" title=\"2. 将远程分支合并到当前分支\"></a>2. 将远程分支合并到当前分支</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  类似 fork 工作流</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">git submodule update --remote --merge</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 或 */</span></span><br><span class=\"line\">git submodule update --remote --rebase</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-push-代码\"><a href=\"#3-push-代码\" class=\"headerlink\" title=\"3. push 代码\"></a>3. push 代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 提交 father 的时候加如下参数, 可以检测未提交的 submodule  */</span></span><br><span class=\"line\">git push --recurse-submodules=check</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 自动提交指定 submodule */</span></span><br><span class=\"line\">git push --recurse-submodules=on-demand</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考文档: <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Submodules\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a></p>\n</blockquote>\n<p>在学习的过程中, 暂时觉得 git submodule 和 npm packege 维护方式都是可以的, 后面熟悉后再对两种方式的优缺点进行分析.</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>多个父项目中都要使用到子项目 son.</p>\n<h4 id=\"现有解决方案及弊端\"><a href=\"#现有解决方案及弊端\" class=\"headerlink\" title=\"现有解决方案及弊端\"></a>现有解决方案及弊端</h4><ul>\n<li>CPAN 安装或 Ruby gem. 弊端: 暂时不了解, 后续补充</li>\n<li>拷贝源代码到父项目中. 弊端: 本地修改 son 代码后, 其他父项目中不能及时同步</li>\n<li>npm package 依赖形式引入. 弊端: 需要加版本所, 依赖包升级需要发布(不过这里和 git submodule 两个优缺点对比, 后续在熟悉后再补充)</li>\n</ul>\n<h4 id=\"Git-解决方案\"><a href=\"#Git-解决方案\" class=\"headerlink\" title=\"Git 解决方案\"></a>Git 解决方案</h4><ul>\n<li>git submodule (git 会把子项目看做子模块)</li>\n</ul>\n<h2 id=\"Git-submodule-使用介绍\"><a href=\"#Git-submodule-使用介绍\" class=\"headerlink\" title=\"Git submodule 使用介绍\"></a>Git submodule 使用介绍</h2><h4 id=\"1-添加-submodule\"><a href=\"#1-添加-submodule\" class=\"headerlink\" title=\"1. 添加 submodule\"></a>1. 添加 submodule</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https:<span class=\"comment\">//github.com/son   // 这里是假设的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"comment\">// 指定目录</span></span><br><span class=\"line\">git submodule add https:<span class=\"comment\">//github.com/son pathTo</span></span><br></pre></td></tr></table></figure>\n<p>添加后会在当前目录下生成一个配置文件 <code>.gitmodules</code>, 配置文件中有所有 submodule 的相关配置, 多个子项目的配置会根据添加顺序排列. 如:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule <span class=\"string\">\"son\"</span>]</span><br><span class=\"line\">\tpath = son</span><br><span class=\"line\">\turl = https://github.com/son</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-clone-子模块项目\"><a href=\"#2-clone-子模块项目\" class=\"headerlink\" title=\"2. clone 子模块项目\"></a>2. clone 子模块项目</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * --recursive 会自动的c lone子项目</span></span><br><span class=\"line\"><span class=\"comment\"> * 相当于 git submodule init &amp;&amp; git submodule update </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">git clone --recursive father <span class=\"comment\">// 假设父项目叫 father</span></span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* clone 父项目后, 进入到项目目录, 初始化子项目并更新子项目 */</span></span><br><span class=\"line\">git clone father</span><br><span class=\"line\">cd father</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-update-子模块项目\"><a href=\"#3-update-子模块项目\" class=\"headerlink\" title=\"3. update 子模块项目\"></a>3. update 子模块项目</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 进入到 submodule 中手动更新 */</span></span><br><span class=\"line\">cd son</span><br><span class=\"line\">git fetch</span><br><span class=\"line\">git merge origin/master</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">git submodule update --remote son</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-查看-子模块项目\"><a href=\"#4-查看-子模块项目\" class=\"headerlink\" title=\"4. 查看 子模块项目\"></a>4. 查看 子模块项目</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --submodule</span><br><span class=\"line\"></span><br><span class=\"line\">或添加配置</span><br><span class=\"line\"></span><br><span class=\"line\">git config --local diff.submodule log <span class=\"comment\">// --global 也可以, 这里测试, 只修改了 local</span></span><br><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-子模块项目指向其分支\"><a href=\"#5-子模块项目指向其分支\" class=\"headerlink\" title=\"5. 子模块项目指向其分支\"></a>5. 子模块项目指向其分支</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -f .gitmodules submodule.son.branch dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 查看 .gitmodules 文件可看到如下*/</span></span><br><span class=\"line\">[submodule <span class=\"string\">\"son\"</span>]</span><br><span class=\"line\">    path = son</span><br><span class=\"line\">    branch = dev</span><br><span class=\"line\">\turl = https:<span class=\"comment\">//github.com/son</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"如何开发子项目\"><a href=\"#如何开发子项目\" class=\"headerlink\" title=\"如何开发子项目\"></a>如何开发子项目</h2><p>当我们在 father 中进行开发的时候, 虽然可以直接拉取最新的 submodule 代码, 但是 git 并不会对其进行跟踪. 所以, 如果要修改子项目代码, 需要进入到子项目目录中.</p>\n<h4 id=\"1-切换到开发分支\"><a href=\"#1-切换到开发分支\" class=\"headerlink\" title=\"1. 切换到开发分支\"></a>1. 切换到开发分支</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout stable</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-将远程分支合并到当前分支\"><a href=\"#2-将远程分支合并到当前分支\" class=\"headerlink\" title=\"2. 将远程分支合并到当前分支\"></a>2. 将远程分支合并到当前分支</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  类似 fork 工作流</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">git submodule update --remote --merge</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 或 */</span></span><br><span class=\"line\">git submodule update --remote --rebase</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-push-代码\"><a href=\"#3-push-代码\" class=\"headerlink\" title=\"3. push 代码\"></a>3. push 代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 提交 father 的时候加如下参数, 可以检测未提交的 submodule  */</span></span><br><span class=\"line\">git push --recurse-submodules=check</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 自动提交指定 submodule */</span></span><br><span class=\"line\">git push --recurse-submodules=on-demand</span><br></pre></td></tr></table></figure>\n"},{"title":"异步的顺序执行：promise, generator 以及 async/await","date":"2018-08-27T06:36:51.000Z","_content":"\n## 1. 名词解释\n\n- Promise：简单讲就是通过链式调用解决了回调地域的问题\n- Generator：Generator（迭代生成器）函数可以理解为是一个状态机，通过与函数内部的 `yield` 表达式配合使用达到使状态顺序执行的目的\n- async/await：Generator 函数的语法糖\n\n## 2. 示例说明\n\n### 1) 问题说明\n\n假如我们要加载3个文件，第一个加载完之后，才去加载第二个，第二个加载完之后，才去加载第三个，这里为了显而易见，通过进度条表示加载进度\n\n**dom code**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>异步demo</title>\n    <style type=\"text/css\">\n        .file1,\n        .file2,\n        .file3 {\n            display: flex;\n            margin: 20px auto;\n        }\n        .progress-bar-warpper {\n            position: relative;\n            display: inline-block;\n            height: 22px;\n            width: 400px;\n            background: #c0c0c0;\n        }\n        .progress-bar {\n            display: inline-block;\n            height: 22px;\n            width: 0;\n            background-color: #ff6347;\n        }\n        .progress-num {\n            position: absolute;\n            left: 0;\n            right: 0;\n            top: 0;\n            margin: auto;\n            width: 25px;\n        }\n    </style>\n</head>\n<body>\n    <section class=\"file1\">\n        <span>文件1：</span>\n        <span class=\"progress-bar-warpper\">\n            <span class=\"progress-bar\"></span>\n            <span class=\"progress-num\">0%</span>\n        </span>\n    </section>\n    <section class=\"file2\">\n        <span>文件2：</span>\n        <span class=\"progress-bar-warpper\">\n            <span class=\"progress-bar\"></span>\n            <span class=\"progress-num\">0%</span>\n        </span>\n    </section>\n    <section class=\"file3\">\n        <span>文件3：</span>\n        <span class=\"progress-bar-warpper\">\n            <span class=\"progress-bar\"></span>\n            <span class=\"progress-num\">0%</span>\n        </span>\n    </section>\n</body>\n</html>\n```\n\n### 2) promise 实现\n\nPromise 可以用 es6 内置、自己开发或者第三方开源 Promise 库，下面的代码直接放到上面 dom 的尾部即可执行。\n\n```javascript\n<script type=\"text/javascript\">\n    let f1 = document.querySelector('.file1');\n    let f2 = document.querySelector('.file2');\n    let f3 = document.querySelector('.file3');\n\n    // 进度条处理函数\n    function Progress(dom) {\n        return new Promise(function(resolve, reject) {\n            var timer = setInterval(function() {\n                var bar = dom.querySelector('.progress-bar');\n                var num = dom.querySelector('.progress-num');\n                var ow = bar.style.width;\n                var cw = Number(ow.slice(0, ow.length - 1)) + 1;\n                bar.style.width = Number(cw) + '%';\n                num.innerHTML = bar.style.width;\n                if(cw >= 100) {\n                    clearInterval(timer);\n                    resolve();\n                }\n            }, 50);\n        });\n\n    }\n\n    // 链式调用保证顺序执行\n    Progress(f1).then(function(data){\n        return Progress(f2);\n    }).then(function() {\n        return Progress(f3);\n    });\n</script>\n```\n\n### 3) Generator 实现\n\n生成函数要想达到异步顺序执行，依赖 [co 库](https://github.com/tj/co)（koa 里面用了大量的 generator），我们自己实现一个简单的 co 逻辑来实现我们想要的效果，非常粗暴，大概逻辑了解下即可。\n\n```javascript\n<script type=\"text/javascript\">\n    let f1 = document.querySelector('.file1');\n    let f2 = document.querySelector('.file2');\n    let f3 = document.querySelector('.file3');\n\n    function Progress(dom) {\n        return new Promise(function(resolve, reject) {\n            var timer = setInterval(function() {\n                var bar = dom.querySelector('.progress-bar');\n                var num = dom.querySelector('.progress-num');\n                var ow = bar.style.width;\n                var cw = Number(ow.slice(0, ow.length - 1)) + 1;\n                bar.style.width = Number(cw) + '%';\n                num.innerHTML = bar.style.width;\n                if(cw >= 100) {\n                    clearInterval(timer);\n                    resolve();\n                }\n            }, 50);\n        });\n\n    }\n\n    function co(gen) {\n        let ctx = this;\n        let args = Array.prototype.slice.call(arguments, 1);\n\n        return new Promise(function(resolve, reject) {\n            if (typeof gen === 'function') {\n                gen = gen.apply(ctx, args);\n            }\n            if (!gen || typeof gen.next !== 'function') {\n                return resolve(gen);\n            }\n\n            onResolved();\n\n            function onResolved(data) {\n                var ret;\n                try {\n                    ret = gen.next(data);\n                } catch (e) {\n                    return reject(e);\n                }\n                next(ret);\n                return null;\n            }\n\n            function onReject(err) {\n                var ret;\n                try {\n                    ret = gen.throw(err)\n                } catch (e) {\n                    return reject(e);\n                }\n                next(ret);\n            }\n\n            function next(ret) {\n                // 如果 done 是 true，则表示执行完成\n                if (ret.done) {\n                    return resolve(ret.value);\n                }\n                // 根据 Demo 的情况我们知道我们的 value 就是 promise，其他情况不做扩展，\n                //  可以参考 co 源码库：https://github.com/tj/co\n                if (ret.value instanceof Promise) {\n                \t// 通过 promise 的 then 实现异步顺序执行\n                \t// 同时 onResolved 和 onRejected 中再次调用 next 函数达到递归目的\n                    return ret.value.then(onResolved, onReject);\n                }\n                return onRejected(new TypeError('type error'));\n            }\n\n        });\n\n    }\n\n    function* gen() {\n        yield Progress(f1);\n        yield Progress(f2);\n        yield Progress(f3);\n        return;\n    }\n\n    co(gen);\n</script>\n```\n\n\n### 4) async/await 实现\n\nasync/await 是 generator 语法糖， ES2017 标准引入的，开发者就可以不在依赖 co 库了。\n\n```javascript\n<script type=\"text/javascript\">\n    let f1 = document.querySelector('.file1');\n    let f2 = document.querySelector('.file2');\n    let f3 = document.querySelector('.file3');\n\n    function Progress(dom) {\n        return new Promise(function(resolve, reject) {\n            var timer = setInterval(function() {\n                var bar = dom.querySelector('.progress-bar');\n                var num = dom.querySelector('.progress-num');\n                var ow = bar.style.width;\n                var cw = Number(ow.slice(0, ow.length - 1)) + 1;\n                bar.style.width = Number(cw) + '%';\n                num.innerHTML = bar.style.width;\n                if(cw >= 100) {\n                    clearInterval(timer);\n                    resolve();\n                }\n            }, 50);\n        });\n\n    }\n\n    // 定义 async 函数，函数中用 await 保证 promise 的顺序执行\n    async function start() {\n        let l1 = await Progress(f1);\n        let l2 = await Progress(f2);\n        let l3 = await Progress(f3);\n    }\n\n    // 进入页面的时候开始执行\n    start();\n\n</script>\n```\n\n","source":"_posts/js-async.md","raw":"---\ntitle: 异步的顺序执行：promise, generator 以及 async/await\ndate: 2018-08-27 14:36:51\ntags: ['javascript', 'promise', 'async/await', 'generator']\n---\n\n## 1. 名词解释\n\n- Promise：简单讲就是通过链式调用解决了回调地域的问题\n- Generator：Generator（迭代生成器）函数可以理解为是一个状态机，通过与函数内部的 `yield` 表达式配合使用达到使状态顺序执行的目的\n- async/await：Generator 函数的语法糖\n\n## 2. 示例说明\n\n### 1) 问题说明\n\n假如我们要加载3个文件，第一个加载完之后，才去加载第二个，第二个加载完之后，才去加载第三个，这里为了显而易见，通过进度条表示加载进度\n\n**dom code**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>异步demo</title>\n    <style type=\"text/css\">\n        .file1,\n        .file2,\n        .file3 {\n            display: flex;\n            margin: 20px auto;\n        }\n        .progress-bar-warpper {\n            position: relative;\n            display: inline-block;\n            height: 22px;\n            width: 400px;\n            background: #c0c0c0;\n        }\n        .progress-bar {\n            display: inline-block;\n            height: 22px;\n            width: 0;\n            background-color: #ff6347;\n        }\n        .progress-num {\n            position: absolute;\n            left: 0;\n            right: 0;\n            top: 0;\n            margin: auto;\n            width: 25px;\n        }\n    </style>\n</head>\n<body>\n    <section class=\"file1\">\n        <span>文件1：</span>\n        <span class=\"progress-bar-warpper\">\n            <span class=\"progress-bar\"></span>\n            <span class=\"progress-num\">0%</span>\n        </span>\n    </section>\n    <section class=\"file2\">\n        <span>文件2：</span>\n        <span class=\"progress-bar-warpper\">\n            <span class=\"progress-bar\"></span>\n            <span class=\"progress-num\">0%</span>\n        </span>\n    </section>\n    <section class=\"file3\">\n        <span>文件3：</span>\n        <span class=\"progress-bar-warpper\">\n            <span class=\"progress-bar\"></span>\n            <span class=\"progress-num\">0%</span>\n        </span>\n    </section>\n</body>\n</html>\n```\n\n### 2) promise 实现\n\nPromise 可以用 es6 内置、自己开发或者第三方开源 Promise 库，下面的代码直接放到上面 dom 的尾部即可执行。\n\n```javascript\n<script type=\"text/javascript\">\n    let f1 = document.querySelector('.file1');\n    let f2 = document.querySelector('.file2');\n    let f3 = document.querySelector('.file3');\n\n    // 进度条处理函数\n    function Progress(dom) {\n        return new Promise(function(resolve, reject) {\n            var timer = setInterval(function() {\n                var bar = dom.querySelector('.progress-bar');\n                var num = dom.querySelector('.progress-num');\n                var ow = bar.style.width;\n                var cw = Number(ow.slice(0, ow.length - 1)) + 1;\n                bar.style.width = Number(cw) + '%';\n                num.innerHTML = bar.style.width;\n                if(cw >= 100) {\n                    clearInterval(timer);\n                    resolve();\n                }\n            }, 50);\n        });\n\n    }\n\n    // 链式调用保证顺序执行\n    Progress(f1).then(function(data){\n        return Progress(f2);\n    }).then(function() {\n        return Progress(f3);\n    });\n</script>\n```\n\n### 3) Generator 实现\n\n生成函数要想达到异步顺序执行，依赖 [co 库](https://github.com/tj/co)（koa 里面用了大量的 generator），我们自己实现一个简单的 co 逻辑来实现我们想要的效果，非常粗暴，大概逻辑了解下即可。\n\n```javascript\n<script type=\"text/javascript\">\n    let f1 = document.querySelector('.file1');\n    let f2 = document.querySelector('.file2');\n    let f3 = document.querySelector('.file3');\n\n    function Progress(dom) {\n        return new Promise(function(resolve, reject) {\n            var timer = setInterval(function() {\n                var bar = dom.querySelector('.progress-bar');\n                var num = dom.querySelector('.progress-num');\n                var ow = bar.style.width;\n                var cw = Number(ow.slice(0, ow.length - 1)) + 1;\n                bar.style.width = Number(cw) + '%';\n                num.innerHTML = bar.style.width;\n                if(cw >= 100) {\n                    clearInterval(timer);\n                    resolve();\n                }\n            }, 50);\n        });\n\n    }\n\n    function co(gen) {\n        let ctx = this;\n        let args = Array.prototype.slice.call(arguments, 1);\n\n        return new Promise(function(resolve, reject) {\n            if (typeof gen === 'function') {\n                gen = gen.apply(ctx, args);\n            }\n            if (!gen || typeof gen.next !== 'function') {\n                return resolve(gen);\n            }\n\n            onResolved();\n\n            function onResolved(data) {\n                var ret;\n                try {\n                    ret = gen.next(data);\n                } catch (e) {\n                    return reject(e);\n                }\n                next(ret);\n                return null;\n            }\n\n            function onReject(err) {\n                var ret;\n                try {\n                    ret = gen.throw(err)\n                } catch (e) {\n                    return reject(e);\n                }\n                next(ret);\n            }\n\n            function next(ret) {\n                // 如果 done 是 true，则表示执行完成\n                if (ret.done) {\n                    return resolve(ret.value);\n                }\n                // 根据 Demo 的情况我们知道我们的 value 就是 promise，其他情况不做扩展，\n                //  可以参考 co 源码库：https://github.com/tj/co\n                if (ret.value instanceof Promise) {\n                \t// 通过 promise 的 then 实现异步顺序执行\n                \t// 同时 onResolved 和 onRejected 中再次调用 next 函数达到递归目的\n                    return ret.value.then(onResolved, onReject);\n                }\n                return onRejected(new TypeError('type error'));\n            }\n\n        });\n\n    }\n\n    function* gen() {\n        yield Progress(f1);\n        yield Progress(f2);\n        yield Progress(f3);\n        return;\n    }\n\n    co(gen);\n</script>\n```\n\n\n### 4) async/await 实现\n\nasync/await 是 generator 语法糖， ES2017 标准引入的，开发者就可以不在依赖 co 库了。\n\n```javascript\n<script type=\"text/javascript\">\n    let f1 = document.querySelector('.file1');\n    let f2 = document.querySelector('.file2');\n    let f3 = document.querySelector('.file3');\n\n    function Progress(dom) {\n        return new Promise(function(resolve, reject) {\n            var timer = setInterval(function() {\n                var bar = dom.querySelector('.progress-bar');\n                var num = dom.querySelector('.progress-num');\n                var ow = bar.style.width;\n                var cw = Number(ow.slice(0, ow.length - 1)) + 1;\n                bar.style.width = Number(cw) + '%';\n                num.innerHTML = bar.style.width;\n                if(cw >= 100) {\n                    clearInterval(timer);\n                    resolve();\n                }\n            }, 50);\n        });\n\n    }\n\n    // 定义 async 函数，函数中用 await 保证 promise 的顺序执行\n    async function start() {\n        let l1 = await Progress(f1);\n        let l2 = await Progress(f2);\n        let l3 = await Progress(f3);\n    }\n\n    // 进入页面的时候开始执行\n    start();\n\n</script>\n```\n\n","slug":"js-async","published":1,"updated":"2018-09-12T04:28:23.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnq000r8b05hdmau6ho","content":"<h2 id=\"1-名词解释\"><a href=\"#1-名词解释\" class=\"headerlink\" title=\"1. 名词解释\"></a>1. 名词解释</h2><ul>\n<li>Promise：简单讲就是通过链式调用解决了回调地域的问题</li>\n<li>Generator：Generator（迭代生成器）函数可以理解为是一个状态机，通过与函数内部的 <code>yield</code> 表达式配合使用达到使状态顺序执行的目的</li>\n<li>async/await：Generator 函数的语法糖</li>\n</ul>\n<h2 id=\"2-示例说明\"><a href=\"#2-示例说明\" class=\"headerlink\" title=\"2. 示例说明\"></a>2. 示例说明</h2><h3 id=\"1-问题说明\"><a href=\"#1-问题说明\" class=\"headerlink\" title=\"1) 问题说明\"></a>1) 问题说明</h3><p>假如我们要加载3个文件，第一个加载完之后，才去加载第二个，第二个加载完之后，才去加载第三个，这里为了显而易见，通过进度条表示加载进度</p>\n<p><strong>dom code</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>异步demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        .file1,</span></span><br><span class=\"line\"><span class=\"undefined\">        .file2,</span></span><br><span class=\"line\"><span class=\"undefined\">        .file3 &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin: 20px auto;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        .progress-bar-warpper &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">            display: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 22px;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 400px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: #c0c0c0;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        .progress-bar &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            display: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 22px;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            background-color: #ff6347;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        .progress-num &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">            left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            right: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin: auto;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 25px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"file1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文件1：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar-warpper\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-num\"</span>&gt;</span>0%<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"file2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文件2：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar-warpper\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-num\"</span>&gt;</span>0%<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"file3\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文件3：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar-warpper\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-num\"</span>&gt;</span>0%<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-promise-实现\"><a href=\"#2-promise-实现\" class=\"headerlink\" title=\"2) promise 实现\"></a>2) promise 实现</h3><p>Promise 可以用 es6 内置、自己开发或者第三方开源 Promise 库，下面的代码直接放到上面 dom 的尾部即可执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file1'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f2 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file2'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f3 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进度条处理函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Progress</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> bar = dom.querySelector(<span class=\"string\">'.progress-bar'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> num = dom.querySelector(<span class=\"string\">'.progress-num'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ow = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> cw = <span class=\"built_in\">Number</span>(ow.slice(<span class=\"number\">0</span>, ow.length - <span class=\"number\">1</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                bar.style.width = <span class=\"built_in\">Number</span>(cw) + <span class=\"string\">'%'</span>;</span><br><span class=\"line\">                num.innerHTML = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cw &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    clearInterval(timer);</span><br><span class=\"line\">                    resolve();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链式调用保证顺序执行</span></span><br><span class=\"line\">    Progress(f1).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Progress(f2);</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Progress(f3);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Generator-实现\"><a href=\"#3-Generator-实现\" class=\"headerlink\" title=\"3) Generator 实现\"></a>3) Generator 实现</h3><p>生成函数要想达到异步顺序执行，依赖 <a href=\"https://github.com/tj/co\" target=\"_blank\" rel=\"noopener\">co 库</a>（koa 里面用了大量的 generator），我们自己实现一个简单的 co 逻辑来实现我们想要的效果，非常粗暴，大概逻辑了解下即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file1'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f2 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file2'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f3 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Progress</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> bar = dom.querySelector(<span class=\"string\">'.progress-bar'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> num = dom.querySelector(<span class=\"string\">'.progress-num'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ow = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> cw = <span class=\"built_in\">Number</span>(ow.slice(<span class=\"number\">0</span>, ow.length - <span class=\"number\">1</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                bar.style.width = <span class=\"built_in\">Number</span>(cw) + <span class=\"string\">'%'</span>;</span><br><span class=\"line\">                num.innerHTML = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cw &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    clearInterval(timer);</span><br><span class=\"line\">                    resolve();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> ctx = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                gen = gen.apply(ctx, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.next !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> resolve(gen);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            onResolved();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onResolved</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    ret = gen.next(data);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                next(ret);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReject</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    ret = gen.throw(err)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                next(ret);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">ret</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果 done 是 true，则表示执行完成</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret.done) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(ret.value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 根据 Demo 的情况我们知道我们的 value 就是 promise，其他情况不做扩展，</span></span><br><span class=\"line\">                <span class=\"comment\">//  可以参考 co 源码库：https://github.com/tj/co</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret.value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                \t<span class=\"comment\">// 通过 promise 的 then 实现异步顺序执行</span></span><br><span class=\"line\">                \t<span class=\"comment\">// 同时 onResolved 和 onRejected 中再次调用 next 函数达到递归目的</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ret.value.then(onResolved, onReject);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> onRejected(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'type error'</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> Progress(f1);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> Progress(f2);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> Progress(f3);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    co(gen);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-async-await-实现\"><a href=\"#4-async-await-实现\" class=\"headerlink\" title=\"4) async/await 实现\"></a>4) async/await 实现</h3><p>async/await 是 generator 语法糖， ES2017 标准引入的，开发者就可以不在依赖 co 库了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file1'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f2 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file2'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f3 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Progress</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> bar = dom.querySelector(<span class=\"string\">'.progress-bar'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> num = dom.querySelector(<span class=\"string\">'.progress-num'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ow = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> cw = <span class=\"built_in\">Number</span>(ow.slice(<span class=\"number\">0</span>, ow.length - <span class=\"number\">1</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                bar.style.width = <span class=\"built_in\">Number</span>(cw) + <span class=\"string\">'%'</span>;</span><br><span class=\"line\">                num.innerHTML = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cw &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    clearInterval(timer);</span><br><span class=\"line\">                    resolve();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义 async 函数，函数中用 await 保证 promise 的顺序执行</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> l1 = <span class=\"keyword\">await</span> Progress(f1);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> l2 = <span class=\"keyword\">await</span> Progress(f2);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> l3 = <span class=\"keyword\">await</span> Progress(f3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进入页面的时候开始执行</span></span><br><span class=\"line\">    start();</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-名词解释\"><a href=\"#1-名词解释\" class=\"headerlink\" title=\"1. 名词解释\"></a>1. 名词解释</h2><ul>\n<li>Promise：简单讲就是通过链式调用解决了回调地域的问题</li>\n<li>Generator：Generator（迭代生成器）函数可以理解为是一个状态机，通过与函数内部的 <code>yield</code> 表达式配合使用达到使状态顺序执行的目的</li>\n<li>async/await：Generator 函数的语法糖</li>\n</ul>\n<h2 id=\"2-示例说明\"><a href=\"#2-示例说明\" class=\"headerlink\" title=\"2. 示例说明\"></a>2. 示例说明</h2><h3 id=\"1-问题说明\"><a href=\"#1-问题说明\" class=\"headerlink\" title=\"1) 问题说明\"></a>1) 问题说明</h3><p>假如我们要加载3个文件，第一个加载完之后，才去加载第二个，第二个加载完之后，才去加载第三个，这里为了显而易见，通过进度条表示加载进度</p>\n<p><strong>dom code</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>异步demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        .file1,</span></span><br><span class=\"line\"><span class=\"undefined\">        .file2,</span></span><br><span class=\"line\"><span class=\"undefined\">        .file3 &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin: 20px auto;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        .progress-bar-warpper &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">            display: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 22px;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 400px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: #c0c0c0;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        .progress-bar &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            display: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 22px;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            background-color: #ff6347;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        .progress-num &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">            left: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            right: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            top: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">            margin: auto;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 25px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"file1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文件1：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar-warpper\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-num\"</span>&gt;</span>0%<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"file2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文件2：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar-warpper\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-num\"</span>&gt;</span>0%<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"file3\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>文件3：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar-warpper\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-num\"</span>&gt;</span>0%<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-promise-实现\"><a href=\"#2-promise-实现\" class=\"headerlink\" title=\"2) promise 实现\"></a>2) promise 实现</h3><p>Promise 可以用 es6 内置、自己开发或者第三方开源 Promise 库，下面的代码直接放到上面 dom 的尾部即可执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file1'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f2 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file2'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f3 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进度条处理函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Progress</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> bar = dom.querySelector(<span class=\"string\">'.progress-bar'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> num = dom.querySelector(<span class=\"string\">'.progress-num'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ow = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> cw = <span class=\"built_in\">Number</span>(ow.slice(<span class=\"number\">0</span>, ow.length - <span class=\"number\">1</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                bar.style.width = <span class=\"built_in\">Number</span>(cw) + <span class=\"string\">'%'</span>;</span><br><span class=\"line\">                num.innerHTML = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cw &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    clearInterval(timer);</span><br><span class=\"line\">                    resolve();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链式调用保证顺序执行</span></span><br><span class=\"line\">    Progress(f1).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Progress(f2);</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Progress(f3);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Generator-实现\"><a href=\"#3-Generator-实现\" class=\"headerlink\" title=\"3) Generator 实现\"></a>3) Generator 实现</h3><p>生成函数要想达到异步顺序执行，依赖 <a href=\"https://github.com/tj/co\" target=\"_blank\" rel=\"noopener\">co 库</a>（koa 里面用了大量的 generator），我们自己实现一个简单的 co 逻辑来实现我们想要的效果，非常粗暴，大概逻辑了解下即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file1'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f2 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file2'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f3 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Progress</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> bar = dom.querySelector(<span class=\"string\">'.progress-bar'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> num = dom.querySelector(<span class=\"string\">'.progress-num'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ow = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> cw = <span class=\"built_in\">Number</span>(ow.slice(<span class=\"number\">0</span>, ow.length - <span class=\"number\">1</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                bar.style.width = <span class=\"built_in\">Number</span>(cw) + <span class=\"string\">'%'</span>;</span><br><span class=\"line\">                num.innerHTML = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cw &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    clearInterval(timer);</span><br><span class=\"line\">                    resolve();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> ctx = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                gen = gen.apply(ctx, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.next !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> resolve(gen);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            onResolved();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onResolved</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    ret = gen.next(data);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                next(ret);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReject</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    ret = gen.throw(err)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                next(ret);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">ret</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果 done 是 true，则表示执行完成</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret.done) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(ret.value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 根据 Demo 的情况我们知道我们的 value 就是 promise，其他情况不做扩展，</span></span><br><span class=\"line\">                <span class=\"comment\">//  可以参考 co 源码库：https://github.com/tj/co</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret.value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                \t<span class=\"comment\">// 通过 promise 的 then 实现异步顺序执行</span></span><br><span class=\"line\">                \t<span class=\"comment\">// 同时 onResolved 和 onRejected 中再次调用 next 函数达到递归目的</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ret.value.then(onResolved, onReject);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> onRejected(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'type error'</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> Progress(f1);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> Progress(f2);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> Progress(f3);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    co(gen);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-async-await-实现\"><a href=\"#4-async-await-实现\" class=\"headerlink\" title=\"4) async/await 实现\"></a>4) async/await 实现</h3><p>async/await 是 generator 语法糖， ES2017 标准引入的，开发者就可以不在依赖 co 库了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file1'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f2 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file2'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f3 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.file3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Progress</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> bar = dom.querySelector(<span class=\"string\">'.progress-bar'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> num = dom.querySelector(<span class=\"string\">'.progress-num'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ow = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> cw = <span class=\"built_in\">Number</span>(ow.slice(<span class=\"number\">0</span>, ow.length - <span class=\"number\">1</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                bar.style.width = <span class=\"built_in\">Number</span>(cw) + <span class=\"string\">'%'</span>;</span><br><span class=\"line\">                num.innerHTML = bar.style.width;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cw &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    clearInterval(timer);</span><br><span class=\"line\">                    resolve();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义 async 函数，函数中用 await 保证 promise 的顺序执行</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> l1 = <span class=\"keyword\">await</span> Progress(f1);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> l2 = <span class=\"keyword\">await</span> Progress(f2);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> l3 = <span class=\"keyword\">await</span> Progress(f3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进入页面的时候开始执行</span></span><br><span class=\"line\">    start();</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"理想三旬","date":"2018-09-20T11:48:55.000Z","_content":"\n> 青春又醉倒在\n> 籍籍无名的怀\n> 靠嬉笑来虚度，聚散得慷慨\n> 辗转却去不到\n> 对的站台\n> 如果漂泊是成长，必经的路牌\n> 你迷醒岁月中\n> 那贫瘠的未来\n> 像遗憾季节里，未结果的爱\n> 弄脏了每一页诗\n> 吻最疼痛的告白\n","source":"_posts/ideals30.md","raw":"---\ntitle: 理想三旬\ndate: 2018-09-20 19:48:55\ntags: ['随笔', '碎片']\n---\n\n> 青春又醉倒在\n> 籍籍无名的怀\n> 靠嬉笑来虚度，聚散得慷慨\n> 辗转却去不到\n> 对的站台\n> 如果漂泊是成长，必经的路牌\n> 你迷醒岁月中\n> 那贫瘠的未来\n> 像遗憾季节里，未结果的爱\n> 弄脏了每一页诗\n> 吻最疼痛的告白\n","slug":"ideals30","published":1,"updated":"2018-09-27T06:20:41.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnr000t8b05v438d16h","content":"<blockquote>\n<p>青春又醉倒在<br>籍籍无名的怀<br>靠嬉笑来虚度，聚散得慷慨<br>辗转却去不到<br>对的站台<br>如果漂泊是成长，必经的路牌<br>你迷醒岁月中<br>那贫瘠的未来<br>像遗憾季节里，未结果的爱<br>弄脏了每一页诗<br>吻最疼痛的告白</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>青春又醉倒在<br>籍籍无名的怀<br>靠嬉笑来虚度，聚散得慷慨<br>辗转却去不到<br>对的站台<br>如果漂泊是成长，必经的路牌<br>你迷醒岁月中<br>那贫瘠的未来<br>像遗憾季节里，未结果的爱<br>弄脏了每一页诗<br>吻最疼痛的告白</p>\n</blockquote>\n"},{"title":"变量作用域：var 和 let","date":"2018-09-25T12:57:51.000Z","_content":"\n## 说明\n\nES5 中 var 定义的变量会做变量提升（提升至当前作用域），ES6 中的 let 不会做变量提升，但是会造成块级作用域的暂时性死区\n\n> 参考：http://es6.ruanyifeng.com/#docs/let\n\n## 问题\n\n有如下代码，请写出输出结果：\n\n```javascript\nvar a = 1;\nvar b  = 2;\nfunction F () {\n    console.log(this.a);\n    console.log(a);\n    console.log(this.b);\n    console.log(b);\n    let a = 3;\n    var b = 4;\n    return function () {\n        console.log(this.a);\n        console.log(a);\n        console.log(this.b);\n        console.log(b);\n    }\n}\n\nvar d = F();\nd();\n```\n\n根据 var 以及 let 的特型，对上面的代码进行转换（同时标记每行输出）：\n\n```javascript\nvar a = 1;\nvar b  = 2;\nfunction F () {\n    var b = undefined;\n    console.log(this.a); // 1\n    console.log(a);      // ReferenceError  有 let 暂时性死区导致\n    console.log(this.b); // 2\n    console.log(b);      // undefined\n    let a = 3;\n    var b = 4;\n    return function () {\n        console.log(this.a); // 1\n        console.log(a);      // 3\n        console.log(this.b); // 2\n        console.log(b);      // 4\n    }\n}\n\n/* 此种调用方式，非严格模式下，F() 中的 this 会找其上级，所以最终指向 window */\nvar d = F();\nd();\n\n```","source":"_posts/js-var-and-let.md","raw":"---\ntitle: 变量作用域：var 和 let\ndate: 2018-09-25 20:57:51\ntags: ['javascript', '面试']\n---\n\n## 说明\n\nES5 中 var 定义的变量会做变量提升（提升至当前作用域），ES6 中的 let 不会做变量提升，但是会造成块级作用域的暂时性死区\n\n> 参考：http://es6.ruanyifeng.com/#docs/let\n\n## 问题\n\n有如下代码，请写出输出结果：\n\n```javascript\nvar a = 1;\nvar b  = 2;\nfunction F () {\n    console.log(this.a);\n    console.log(a);\n    console.log(this.b);\n    console.log(b);\n    let a = 3;\n    var b = 4;\n    return function () {\n        console.log(this.a);\n        console.log(a);\n        console.log(this.b);\n        console.log(b);\n    }\n}\n\nvar d = F();\nd();\n```\n\n根据 var 以及 let 的特型，对上面的代码进行转换（同时标记每行输出）：\n\n```javascript\nvar a = 1;\nvar b  = 2;\nfunction F () {\n    var b = undefined;\n    console.log(this.a); // 1\n    console.log(a);      // ReferenceError  有 let 暂时性死区导致\n    console.log(this.b); // 2\n    console.log(b);      // undefined\n    let a = 3;\n    var b = 4;\n    return function () {\n        console.log(this.a); // 1\n        console.log(a);      // 3\n        console.log(this.b); // 2\n        console.log(b);      // 4\n    }\n}\n\n/* 此种调用方式，非严格模式下，F() 中的 this 会找其上级，所以最终指向 window */\nvar d = F();\nd();\n\n```","slug":"js-var-and-let","published":1,"updated":"2018-09-28T09:09:31.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetns000v8b05ufj3ohja","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>ES5 中 var 定义的变量会做变量提升（提升至当前作用域），ES6 中的 let 不会做变量提升，但是会造成块级作用域的暂时性死区</p>\n<blockquote>\n<p>参考：<a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/let</a></p>\n</blockquote>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>有如下代码，请写出输出结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b  = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.b);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.b);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = F();</span><br><span class=\"line\">d();</span><br></pre></td></tr></table></figure>\n<p>根据 var 以及 let 的特型，对上面的代码进行转换（同时标记每行输出）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b  = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);      <span class=\"comment\">// ReferenceError  有 let 暂时性死区导致</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);      <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a);      <span class=\"comment\">// 3</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);      <span class=\"comment\">// 4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 此种调用方式，非严格模式下，F() 中的 this 会找其上级，所以最终指向 window */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = F();</span><br><span class=\"line\">d();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>ES5 中 var 定义的变量会做变量提升（提升至当前作用域），ES6 中的 let 不会做变量提升，但是会造成块级作用域的暂时性死区</p>\n<blockquote>\n<p>参考：<a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/let</a></p>\n</blockquote>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>有如下代码，请写出输出结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b  = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.b);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.b);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = F();</span><br><span class=\"line\">d();</span><br></pre></td></tr></table></figure>\n<p>根据 var 以及 let 的特型，对上面的代码进行转换（同时标记每行输出）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b  = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);      <span class=\"comment\">// ReferenceError  有 let 暂时性死区导致</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);      <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a);      <span class=\"comment\">// 3</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);      <span class=\"comment\">// 4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 此种调用方式，非严格模式下，F() 中的 this 会找其上级，所以最终指向 window */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = F();</span><br><span class=\"line\">d();</span><br></pre></td></tr></table></figure>"},{"title":"输出一颗树的叶子节点个数","date":"2018-10-11T11:03:56.000Z","_content":"\n> 每日一言: 我的木吉他\n\n## 数据结构\n\n```js\nfunction Node(val) {\n    this.val = val;\n    this.children = [];\n}\n```\n\n## 递归\n\n```js\nfunction getLeafNodes(node) {\n    let num = 0;\n    if(node) {\n        if(node.children.length) {\n            node.children.forEach(child => {\n                num += getLeafsNum(child);\n            });\n        }\n        else {\n            num += 1;\n        }\n    }\n    return num;\n}\n```\n\n#### 举个🌰\n\n<table style='margin-top:-550px'>\n    <tr>\n        <td><img src='/images/tree1.png' width='320px' height='252'></td>\n        <td><img src='/images/tree2.png' width='320px' height='252'></td>\n    </tr>\n    <tr>\n        <td><img src='/images/tree3.png' width='320px'></td>\n        <td><img src='/images/tree4.png' width='320px'></td>\n    </tr>\n     <tr>\n        <td><img src='/images/tree5.png' width='320px'></td>\n        <td><img src='/images/tree6.png' width='320px'></td>\n    </tr>\n     <tr>\n        <td><img src='/images/tree7.png' width='320px'></td>\n        <td><img src='/images/tree8.png' width='320px'></td>\n    </tr>\n     <tr>\n        <td><img src='/images/tree9.png' width='320px'></td>\n    </tr>\n</table>\n\n## 层次遍历\n\n```js\nfunction getLeafNodes(node) {\n    let num = 0;\n    if(node) {\n        let queue = [];\n        queue.push(node);\n        while(queue.length) {\n            let p = queue.pop(); // 取出队列第一个元素\n            if(p.children.length) {\n                p.children.forEach(child => {\n                    queue.push(child);\n                }\n            }\n            else {\n                num++;\n            }\n        }\n        delete queue;\n    }\n    return res;\n}\n```\n\n#### 举个🌰\n\n层次遍历需要借助额外的空间，需要一个队列进行存储。同样是上面的树，通过层级遍历的过程如下所示，最后保留一个空方框是为了说明队列已空。\n\n<table style='margin-top: -140px'>\n    <tr>\n        <td><img src='/images/tree10.png' width='320px'></td>\n        <td>\n            <img src='/images/tree11.png' width='100px' style='margin: 0'>\n            <img src='/images/tree12.png' width='164px' style='margin: 0'>\n            <img src='/images/tree13.png' width='130px' style='margin: 0'>\n            <img src='/images/tree14.png' width='130px' style='margin: 0'>\n            <img src='/images/tree15.png' width='200px' style='margin: 0'>\n            <img src='/images/tree16.png' width='153px' style='margin: 0'>\n            <img src='/images/tree17.png' width='120px' style='margin: 0'>\n            <img src='/images/tree18.png' width='135px' style='margin: 0'>\n            <img src='/images/tree19.png' width='110px' style='margin: 0'>\n            <img src='/images/tree20.png' width='105px' style='margin: 0'>\n        </td>\n    </tr>\n</table>\n","source":"_posts/leaf-nodes.md","raw":"---\ntitle: 输出一颗树的叶子节点个数\ndate: 2018-10-11 19:03:56\ntags: ['javascript', '树', '数据结构']\n---\n\n> 每日一言: 我的木吉他\n\n## 数据结构\n\n```js\nfunction Node(val) {\n    this.val = val;\n    this.children = [];\n}\n```\n\n## 递归\n\n```js\nfunction getLeafNodes(node) {\n    let num = 0;\n    if(node) {\n        if(node.children.length) {\n            node.children.forEach(child => {\n                num += getLeafsNum(child);\n            });\n        }\n        else {\n            num += 1;\n        }\n    }\n    return num;\n}\n```\n\n#### 举个🌰\n\n<table style='margin-top:-550px'>\n    <tr>\n        <td><img src='/images/tree1.png' width='320px' height='252'></td>\n        <td><img src='/images/tree2.png' width='320px' height='252'></td>\n    </tr>\n    <tr>\n        <td><img src='/images/tree3.png' width='320px'></td>\n        <td><img src='/images/tree4.png' width='320px'></td>\n    </tr>\n     <tr>\n        <td><img src='/images/tree5.png' width='320px'></td>\n        <td><img src='/images/tree6.png' width='320px'></td>\n    </tr>\n     <tr>\n        <td><img src='/images/tree7.png' width='320px'></td>\n        <td><img src='/images/tree8.png' width='320px'></td>\n    </tr>\n     <tr>\n        <td><img src='/images/tree9.png' width='320px'></td>\n    </tr>\n</table>\n\n## 层次遍历\n\n```js\nfunction getLeafNodes(node) {\n    let num = 0;\n    if(node) {\n        let queue = [];\n        queue.push(node);\n        while(queue.length) {\n            let p = queue.pop(); // 取出队列第一个元素\n            if(p.children.length) {\n                p.children.forEach(child => {\n                    queue.push(child);\n                }\n            }\n            else {\n                num++;\n            }\n        }\n        delete queue;\n    }\n    return res;\n}\n```\n\n#### 举个🌰\n\n层次遍历需要借助额外的空间，需要一个队列进行存储。同样是上面的树，通过层级遍历的过程如下所示，最后保留一个空方框是为了说明队列已空。\n\n<table style='margin-top: -140px'>\n    <tr>\n        <td><img src='/images/tree10.png' width='320px'></td>\n        <td>\n            <img src='/images/tree11.png' width='100px' style='margin: 0'>\n            <img src='/images/tree12.png' width='164px' style='margin: 0'>\n            <img src='/images/tree13.png' width='130px' style='margin: 0'>\n            <img src='/images/tree14.png' width='130px' style='margin: 0'>\n            <img src='/images/tree15.png' width='200px' style='margin: 0'>\n            <img src='/images/tree16.png' width='153px' style='margin: 0'>\n            <img src='/images/tree17.png' width='120px' style='margin: 0'>\n            <img src='/images/tree18.png' width='135px' style='margin: 0'>\n            <img src='/images/tree19.png' width='110px' style='margin: 0'>\n            <img src='/images/tree20.png' width='105px' style='margin: 0'>\n        </td>\n    </tr>\n</table>\n","slug":"leaf-nodes","published":1,"updated":"2018-10-17T09:38:47.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnt000x8b05cfjgd8wl","content":"<blockquote>\n<p>每日一言: 我的木吉他</p>\n</blockquote>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Node</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.children = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLeafNodes</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.children.length) &#123;</span><br><span class=\"line\">            node.children.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">                num += getLeafsNum(child);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            num += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"举个🌰\"><a href=\"#举个🌰\" class=\"headerlink\" title=\"举个🌰\"></a>举个🌰</h4><table style=\"margin-top:-550px\"><br>    <tr><br>        <td><img src=\"/images/tree1.png\" width=\"320px\" height=\"252\"></td><br>        <td><img src=\"/images/tree2.png\" width=\"320px\" height=\"252\"></td><br>    </tr><br>    <tr><br>        <td><img src=\"/images/tree3.png\" width=\"320px\"></td><br>        <td><img src=\"/images/tree4.png\" width=\"320px\"></td><br>    </tr><br>     <tr><br>        <td><img src=\"/images/tree5.png\" width=\"320px\"></td><br>        <td><img src=\"/images/tree6.png\" width=\"320px\"></td><br>    </tr><br>     <tr><br>        <td><img src=\"/images/tree7.png\" width=\"320px\"></td><br>        <td><img src=\"/images/tree8.png\" width=\"320px\"></td><br>    </tr><br>     <tr><br>        <td><img src=\"/images/tree9.png\" width=\"320px\"></td><br>    </tr><br></table>\n\n<h2 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLeafNodes</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">        queue.push(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(queue.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> p = queue.pop(); <span class=\"comment\">// 取出队列第一个元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.children.length) &#123;</span><br><span class=\"line\">                p.children.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    queue.push(child);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                num++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"举个🌰-1\"><a href=\"#举个🌰-1\" class=\"headerlink\" title=\"举个🌰\"></a>举个🌰</h4><p>层次遍历需要借助额外的空间，需要一个队列进行存储。同样是上面的树，通过层级遍历的过程如下所示，最后保留一个空方框是为了说明队列已空。</p>\n<table style=\"margin-top: -140px\"><br>    <tr><br>        <td><img src=\"/images/tree10.png\" width=\"320px\"></td><br>        <td><br>            <img src=\"/images/tree11.png\" width=\"100px\" style=\"margin: 0\"><br>            <img src=\"/images/tree12.png\" width=\"164px\" style=\"margin: 0\"><br>            <img src=\"/images/tree13.png\" width=\"130px\" style=\"margin: 0\"><br>            <img src=\"/images/tree14.png\" width=\"130px\" style=\"margin: 0\"><br>            <img src=\"/images/tree15.png\" width=\"200px\" style=\"margin: 0\"><br>            <img src=\"/images/tree16.png\" width=\"153px\" style=\"margin: 0\"><br>            <img src=\"/images/tree17.png\" width=\"120px\" style=\"margin: 0\"><br>            <img src=\"/images/tree18.png\" width=\"135px\" style=\"margin: 0\"><br>            <img src=\"/images/tree19.png\" width=\"110px\" style=\"margin: 0\"><br>            <img src=\"/images/tree20.png\" width=\"105px\" style=\"margin: 0\"><br>        </td><br>    </tr><br></table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言: 我的木吉他</p>\n</blockquote>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Node</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.children = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLeafNodes</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.children.length) &#123;</span><br><span class=\"line\">            node.children.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">                num += getLeafsNum(child);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            num += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"举个🌰\"><a href=\"#举个🌰\" class=\"headerlink\" title=\"举个🌰\"></a>举个🌰</h4><table style=\"margin-top:-550px\"><br>    <tr><br>        <td><img src=\"/images/tree1.png\" width=\"320px\" height=\"252\"></td><br>        <td><img src=\"/images/tree2.png\" width=\"320px\" height=\"252\"></td><br>    </tr><br>    <tr><br>        <td><img src=\"/images/tree3.png\" width=\"320px\"></td><br>        <td><img src=\"/images/tree4.png\" width=\"320px\"></td><br>    </tr><br>     <tr><br>        <td><img src=\"/images/tree5.png\" width=\"320px\"></td><br>        <td><img src=\"/images/tree6.png\" width=\"320px\"></td><br>    </tr><br>     <tr><br>        <td><img src=\"/images/tree7.png\" width=\"320px\"></td><br>        <td><img src=\"/images/tree8.png\" width=\"320px\"></td><br>    </tr><br>     <tr><br>        <td><img src=\"/images/tree9.png\" width=\"320px\"></td><br>    </tr><br></table>\n\n<h2 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLeafNodes</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">        queue.push(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(queue.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> p = queue.pop(); <span class=\"comment\">// 取出队列第一个元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.children.length) &#123;</span><br><span class=\"line\">                p.children.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    queue.push(child);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                num++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"举个🌰-1\"><a href=\"#举个🌰-1\" class=\"headerlink\" title=\"举个🌰\"></a>举个🌰</h4><p>层次遍历需要借助额外的空间，需要一个队列进行存储。同样是上面的树，通过层级遍历的过程如下所示，最后保留一个空方框是为了说明队列已空。</p>\n<table style=\"margin-top: -140px\"><br>    <tr><br>        <td><img src=\"/images/tree10.png\" width=\"320px\"></td><br>        <td><br>            <img src=\"/images/tree11.png\" width=\"100px\" style=\"margin: 0\"><br>            <img src=\"/images/tree12.png\" width=\"164px\" style=\"margin: 0\"><br>            <img src=\"/images/tree13.png\" width=\"130px\" style=\"margin: 0\"><br>            <img src=\"/images/tree14.png\" width=\"130px\" style=\"margin: 0\"><br>            <img src=\"/images/tree15.png\" width=\"200px\" style=\"margin: 0\"><br>            <img src=\"/images/tree16.png\" width=\"153px\" style=\"margin: 0\"><br>            <img src=\"/images/tree17.png\" width=\"120px\" style=\"margin: 0\"><br>            <img src=\"/images/tree18.png\" width=\"135px\" style=\"margin: 0\"><br>            <img src=\"/images/tree19.png\" width=\"110px\" style=\"margin: 0\"><br>            <img src=\"/images/tree20.png\" width=\"105px\" style=\"margin: 0\"><br>        </td><br>    </tr><br></table>\n"},{"title":"原型及原型链的简单理解","date":"2018-09-23T02:43:31.000Z","_content":"\n面试的时候被到原型的相关问题，回来后再次学习了一下原型及原型链，在这里做个总结。\n\n**问题**\n\n```\ncase1:\n\nfunction F() {}\nvar f = new F();\n\ncase2:\n\nfunction F() {return '123';}\nvar f = new F();\n\ncase3:\n\nfunction F() {return {a:1};}\nvar f = new F();\n\n```\n\n这两种情况，f 的原型是如何指向的？\n\n**理解**\n\n想要知道 f 的原型指向，需要先了解 f 具体是什么。下面先说一下经过上述步骤后 的具体值分别是什么。\n\n首先，通过 new 来调用函数或者方法的方式，是`构造函数调用`。有三种情况：\n\n1. 构造函数不使用 return 关键字，这种情况下，会初始化一个新的对象，这个对象继承自构造函数的 prototype 属性；当构造函数的执行体执行完毕时，会返回这个新对象。此时，构造函数调用表达式的计算结果就是这个新对象的值，如问题中的 case1。\n2. 构造函数显式的使用了 return 关键字，返回了一个原始值，如问题中的 case2；这种情况下，仍然会初始化一个新的对象，这个对象继承自构造函数的 prototype 属性，return 的返回值将会被忽略，同时使用新对象作为调用结果。\n3. 构造函数显式的使用了 return 关键字，并且返回了一个对象，如问题中的 case3，这种情况下，调用表达式的值就是这个对象。\n\n如果问题描述不是很清楚，可以从代码层面理解一下，new 过程的代码实现：\n\n```\nfunction new() {\n    // 创建一个空的对象\n    let obj = new Object()\n    // 获得构造函数\n    let Con = [].shift.call(arguments)\n    // 链接到原型\n    obj.__proto__ = Con.prototype\n    // 绑定 this，执行构造函数\n    let result = Con.apply(obj, arguments)\n    // 确保 new 出来的是个对象\n    return typeof result === 'object' ? result : obj;\n}\n```\n\n从代码也可以看出，new 的过程最后会判断函数中 return 的是否是 object，不是的话才会返回一个新的对象\n\n所以上述问题中的三种情况，结果分别是：\n\n```\ncase1:\nconsole.log(f);  // F {}\n\ncase2:\nconsole.log(f);  // F {}\n\ncase3:\nconsole.log(f); // {a: 1}\n\n```\n\n所以，根据原型链可知\n\n```\ncase1:\n\nf.__proto__ === F.prototype;\nF.__proto__ === Function.prototype;\nF.prototype.__proto__ === Object.prototype // 原型对象也是对象\n\ncase2:\n\n同 case1\n\ncase3:\n\nf.__proto__ === Object.prototype\nF.__proto__ === Function.prototype\nF.prototype.__proto__ === Object.prototype // 原型对象也是对象\n\n```\n\n- 参考文档：\n\t- https://github.com/KieSun/Blog/issues/2\n\t- javascript 权威指南\n\n\n\n","source":"_posts/js-prototype.md","raw":"---\ntitle: 原型及原型链的简单理解\ndate: 2018-09-23 10:43:31\ntags: ['javascript', '原型', '面试']\n---\n\n面试的时候被到原型的相关问题，回来后再次学习了一下原型及原型链，在这里做个总结。\n\n**问题**\n\n```\ncase1:\n\nfunction F() {}\nvar f = new F();\n\ncase2:\n\nfunction F() {return '123';}\nvar f = new F();\n\ncase3:\n\nfunction F() {return {a:1};}\nvar f = new F();\n\n```\n\n这两种情况，f 的原型是如何指向的？\n\n**理解**\n\n想要知道 f 的原型指向，需要先了解 f 具体是什么。下面先说一下经过上述步骤后 的具体值分别是什么。\n\n首先，通过 new 来调用函数或者方法的方式，是`构造函数调用`。有三种情况：\n\n1. 构造函数不使用 return 关键字，这种情况下，会初始化一个新的对象，这个对象继承自构造函数的 prototype 属性；当构造函数的执行体执行完毕时，会返回这个新对象。此时，构造函数调用表达式的计算结果就是这个新对象的值，如问题中的 case1。\n2. 构造函数显式的使用了 return 关键字，返回了一个原始值，如问题中的 case2；这种情况下，仍然会初始化一个新的对象，这个对象继承自构造函数的 prototype 属性，return 的返回值将会被忽略，同时使用新对象作为调用结果。\n3. 构造函数显式的使用了 return 关键字，并且返回了一个对象，如问题中的 case3，这种情况下，调用表达式的值就是这个对象。\n\n如果问题描述不是很清楚，可以从代码层面理解一下，new 过程的代码实现：\n\n```\nfunction new() {\n    // 创建一个空的对象\n    let obj = new Object()\n    // 获得构造函数\n    let Con = [].shift.call(arguments)\n    // 链接到原型\n    obj.__proto__ = Con.prototype\n    // 绑定 this，执行构造函数\n    let result = Con.apply(obj, arguments)\n    // 确保 new 出来的是个对象\n    return typeof result === 'object' ? result : obj;\n}\n```\n\n从代码也可以看出，new 的过程最后会判断函数中 return 的是否是 object，不是的话才会返回一个新的对象\n\n所以上述问题中的三种情况，结果分别是：\n\n```\ncase1:\nconsole.log(f);  // F {}\n\ncase2:\nconsole.log(f);  // F {}\n\ncase3:\nconsole.log(f); // {a: 1}\n\n```\n\n所以，根据原型链可知\n\n```\ncase1:\n\nf.__proto__ === F.prototype;\nF.__proto__ === Function.prototype;\nF.prototype.__proto__ === Object.prototype // 原型对象也是对象\n\ncase2:\n\n同 case1\n\ncase3:\n\nf.__proto__ === Object.prototype\nF.__proto__ === Function.prototype\nF.prototype.__proto__ === Object.prototype // 原型对象也是对象\n\n```\n\n- 参考文档：\n\t- https://github.com/KieSun/Blog/issues/2\n\t- javascript 权威指南\n\n\n\n","slug":"js-prototype","published":1,"updated":"2018-09-28T09:11:28.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnv00108b05orx7v9bq","content":"<p>面试的时候被到原型的相关问题，回来后再次学习了一下原型及原型链，在这里做个总结。</p>\n<p><strong>问题</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case1:</span><br><span class=\"line\"></span><br><span class=\"line\">function F() &#123;&#125;</span><br><span class=\"line\">var f = new F();</span><br><span class=\"line\"></span><br><span class=\"line\">case2:</span><br><span class=\"line\"></span><br><span class=\"line\">function F() &#123;return &apos;123&apos;;&#125;</span><br><span class=\"line\">var f = new F();</span><br><span class=\"line\"></span><br><span class=\"line\">case3:</span><br><span class=\"line\"></span><br><span class=\"line\">function F() &#123;return &#123;a:1&#125;;&#125;</span><br><span class=\"line\">var f = new F();</span><br></pre></td></tr></table></figure>\n<p>这两种情况，f 的原型是如何指向的？</p>\n<p><strong>理解</strong></p>\n<p>想要知道 f 的原型指向，需要先了解 f 具体是什么。下面先说一下经过上述步骤后 的具体值分别是什么。</p>\n<p>首先，通过 new 来调用函数或者方法的方式，是<code>构造函数调用</code>。有三种情况：</p>\n<ol>\n<li>构造函数不使用 return 关键字，这种情况下，会初始化一个新的对象，这个对象继承自构造函数的 prototype 属性；当构造函数的执行体执行完毕时，会返回这个新对象。此时，构造函数调用表达式的计算结果就是这个新对象的值，如问题中的 case1。</li>\n<li>构造函数显式的使用了 return 关键字，返回了一个原始值，如问题中的 case2；这种情况下，仍然会初始化一个新的对象，这个对象继承自构造函数的 prototype 属性，return 的返回值将会被忽略，同时使用新对象作为调用结果。</li>\n<li>构造函数显式的使用了 return 关键字，并且返回了一个对象，如问题中的 case3，这种情况下，调用表达式的值就是这个对象。</li>\n</ol>\n<p>如果问题描述不是很清楚，可以从代码层面理解一下，new 过程的代码实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function new() &#123;</span><br><span class=\"line\">    // 创建一个空的对象</span><br><span class=\"line\">    let obj = new Object()</span><br><span class=\"line\">    // 获得构造函数</span><br><span class=\"line\">    let Con = [].shift.call(arguments)</span><br><span class=\"line\">    // 链接到原型</span><br><span class=\"line\">    obj.__proto__ = Con.prototype</span><br><span class=\"line\">    // 绑定 this，执行构造函数</span><br><span class=\"line\">    let result = Con.apply(obj, arguments)</span><br><span class=\"line\">    // 确保 new 出来的是个对象</span><br><span class=\"line\">    return typeof result === &apos;object&apos; ? result : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码也可以看出，new 的过程最后会判断函数中 return 的是否是 object，不是的话才会返回一个新的对象</p>\n<p>所以上述问题中的三种情况，结果分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case1:</span><br><span class=\"line\">console.log(f);  // F &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case2:</span><br><span class=\"line\">console.log(f);  // F &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case3:</span><br><span class=\"line\">console.log(f); // &#123;a: 1&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，根据原型链可知</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case1:</span><br><span class=\"line\"></span><br><span class=\"line\">f.__proto__ === F.prototype;</span><br><span class=\"line\">F.__proto__ === Function.prototype;</span><br><span class=\"line\">F.prototype.__proto__ === Object.prototype // 原型对象也是对象</span><br><span class=\"line\"></span><br><span class=\"line\">case2:</span><br><span class=\"line\"></span><br><span class=\"line\">同 case1</span><br><span class=\"line\"></span><br><span class=\"line\">case3:</span><br><span class=\"line\"></span><br><span class=\"line\">f.__proto__ === Object.prototype</span><br><span class=\"line\">F.__proto__ === Function.prototype</span><br><span class=\"line\">F.prototype.__proto__ === Object.prototype // 原型对象也是对象</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考文档：<ul>\n<li><a href=\"https://github.com/KieSun/Blog/issues/2\" target=\"_blank\" rel=\"noopener\">https://github.com/KieSun/Blog/issues/2</a></li>\n<li>javascript 权威指南</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>面试的时候被到原型的相关问题，回来后再次学习了一下原型及原型链，在这里做个总结。</p>\n<p><strong>问题</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case1:</span><br><span class=\"line\"></span><br><span class=\"line\">function F() &#123;&#125;</span><br><span class=\"line\">var f = new F();</span><br><span class=\"line\"></span><br><span class=\"line\">case2:</span><br><span class=\"line\"></span><br><span class=\"line\">function F() &#123;return &apos;123&apos;;&#125;</span><br><span class=\"line\">var f = new F();</span><br><span class=\"line\"></span><br><span class=\"line\">case3:</span><br><span class=\"line\"></span><br><span class=\"line\">function F() &#123;return &#123;a:1&#125;;&#125;</span><br><span class=\"line\">var f = new F();</span><br></pre></td></tr></table></figure>\n<p>这两种情况，f 的原型是如何指向的？</p>\n<p><strong>理解</strong></p>\n<p>想要知道 f 的原型指向，需要先了解 f 具体是什么。下面先说一下经过上述步骤后 的具体值分别是什么。</p>\n<p>首先，通过 new 来调用函数或者方法的方式，是<code>构造函数调用</code>。有三种情况：</p>\n<ol>\n<li>构造函数不使用 return 关键字，这种情况下，会初始化一个新的对象，这个对象继承自构造函数的 prototype 属性；当构造函数的执行体执行完毕时，会返回这个新对象。此时，构造函数调用表达式的计算结果就是这个新对象的值，如问题中的 case1。</li>\n<li>构造函数显式的使用了 return 关键字，返回了一个原始值，如问题中的 case2；这种情况下，仍然会初始化一个新的对象，这个对象继承自构造函数的 prototype 属性，return 的返回值将会被忽略，同时使用新对象作为调用结果。</li>\n<li>构造函数显式的使用了 return 关键字，并且返回了一个对象，如问题中的 case3，这种情况下，调用表达式的值就是这个对象。</li>\n</ol>\n<p>如果问题描述不是很清楚，可以从代码层面理解一下，new 过程的代码实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function new() &#123;</span><br><span class=\"line\">    // 创建一个空的对象</span><br><span class=\"line\">    let obj = new Object()</span><br><span class=\"line\">    // 获得构造函数</span><br><span class=\"line\">    let Con = [].shift.call(arguments)</span><br><span class=\"line\">    // 链接到原型</span><br><span class=\"line\">    obj.__proto__ = Con.prototype</span><br><span class=\"line\">    // 绑定 this，执行构造函数</span><br><span class=\"line\">    let result = Con.apply(obj, arguments)</span><br><span class=\"line\">    // 确保 new 出来的是个对象</span><br><span class=\"line\">    return typeof result === &apos;object&apos; ? result : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码也可以看出，new 的过程最后会判断函数中 return 的是否是 object，不是的话才会返回一个新的对象</p>\n<p>所以上述问题中的三种情况，结果分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case1:</span><br><span class=\"line\">console.log(f);  // F &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case2:</span><br><span class=\"line\">console.log(f);  // F &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case3:</span><br><span class=\"line\">console.log(f); // &#123;a: 1&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，根据原型链可知</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case1:</span><br><span class=\"line\"></span><br><span class=\"line\">f.__proto__ === F.prototype;</span><br><span class=\"line\">F.__proto__ === Function.prototype;</span><br><span class=\"line\">F.prototype.__proto__ === Object.prototype // 原型对象也是对象</span><br><span class=\"line\"></span><br><span class=\"line\">case2:</span><br><span class=\"line\"></span><br><span class=\"line\">同 case1</span><br><span class=\"line\"></span><br><span class=\"line\">case3:</span><br><span class=\"line\"></span><br><span class=\"line\">f.__proto__ === Object.prototype</span><br><span class=\"line\">F.__proto__ === Function.prototype</span><br><span class=\"line\">F.prototype.__proto__ === Object.prototype // 原型对象也是对象</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考文档：<ul>\n<li><a href=\"https://github.com/KieSun/Blog/issues/2\" target=\"_blank\" rel=\"noopener\">https://github.com/KieSun/Blog/issues/2</a></li>\n<li>javascript 权威指南</li>\n</ul>\n</li>\n</ul>\n"},{"title":"【学习笔记】lodash API - get","date":"2018-09-26T10:16:36.000Z","_content":"\n> 每日一言: 每天都超越自己, 请叫我王超越\n> 参考文档: https://www.lodashjs.com/docs/4.17.5.html#get\n\n# 写在前面\n\n开发的时候看到项目中用到了 lodash 的 `_.get` api, 虽然知道 lodash 是开源的 js 工具库, 但是里面 api 很多, 并没有每个都去研究. 从 `_.get` 的 api 名字来看, 以为是异步请求接口什么的, 结果看了源码才发现完全不是这样.\n\n# 简介\n\n先看一下官方文档对这个 api 的介绍\n\n- _.get(object, path, [defaultValue])\n```html\nGets the value at path of object. If the resolved value is undefined,\nthe defaultValue is returned in its place.\n```\n\n翻译过来就是: 获取对象路径上的值, 如果返回的是 `undefined`, 则用默认值代替.\n\n从文档中的介绍和示例并没有完全理解这个 api 的具体作用, 所以直接去看了一下源码, 下面对源码进行解读\n\n# 源码\n\n- 入口 get.js\n```js\n/* 入口 get.js */\nfunction get(object, path, defaultValue) {\n    var result = object == null ? undefined : baseGet(object, path);\n    return result === undefined ? defaultValue : result;\n}\n```\n入口代码很简单, 如果 result 是 undefined, 则返回默认值 `defaultValue`, 否则返回 result. 这里的关键是 `baseGet` 函数, 同时 `baseGet` 也有依赖, 所以下面把各个依赖函数解释下\n\n- 依赖函数 baseGet\n```js\n/**\n * @file _.baseGet.js \n * @function baseGet\n */\nvar castPath = require('./_castPath'),\n    toKey = require('./_toKey');\nfunction baseGet(object, path) {\n    path = castPath(path, object);\n\n    var index = 0, length = path.length;\n\n    while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n    }\n    return (index && index == length) ? object : undefined;\n}\n```\n\n    知道了下面每个函数的作用之后, 就能分析 baseGet 的逻辑:\n    - 获取数组形式的 path(path = castPath(path, object))\n    - 根据 path 循环查找\n    - 最终返回结果对应的具体值\n    - 举个栗子🌰\n\n    ```js\n    /**\n     * 用官网文档中的栗子来说明 \n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     * _.get(object, 'a[0].b.c')  // => 3\n     */\n\n    // baseGet 函数\n    // 1️⃣  可以获得 path = ['a', '0', 'b', 'c']\n    path = castPath(path, object);\n\n    // 2️⃣ while 循环过程可知 object 的变化过程\n    /**\n     * index = 0, object = object[path[0]] = [{ 'b': { 'c': 3 } }]\n     * index = 1, object = object[path[1]] = { 'b': { 'c': 3 } }\n     * index = 2, object = object[path[2]] = { 'c': 3 }\n     * index = 3, object = object[path[3]] = 3\n     * index = 4, 跳出\n     */\n    while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n    }\n\n    // get 函数\n    // 所以主入口中 \n    baseGet(object, path) // 3\n\n    var result = object == null ? undefined : baseGet(object, path);\n    // result = 3\n    // 所以最终结论是 3\n    ```\n    \n- 依赖函数 castPath\n```js\n/**\n * @file _castPath.js\n * @function castPath\n */\n var isArray = require('./isArray'), // 判断是否是对象\n     isKey = require('./_isKey'),\n     stringToPath = require('./_stringToPath'),\n     toString = require('./toString'); // 转换成字符串\n\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n```\n\n    如果 value 是数组, 则直接返回数组, 否则如果 value 可以作为 key, 则返回 [value], 否则现将 value 转换成字符串, 再以数组的形式返回\n\n- 依赖函数 toKey\n```js\n/**\n * @file _toKey.js\n * @function toKey\n */\nvar isSymbol = require('./isSymbol');\nvar INFINITY = 1 / 0;\n\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n```\n\n    将参数 value 转换成可以做对象 key 的格式, 有如下几种情况:\n\n    - value 的类型是 string 直接返回 value\n    - value 是 symbol 直接返回 value\n    - 不是前两种情况, 如果 value 是 0 , 则返回 '-0', 否则返回 value + '' 作为key\n\n- 依赖函数 isKey\n```js\nvar isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n```\n\n    从函数名可以知道 isKey 是判断一个 value 是否可以作为一个对象中的 key, 从代码中可以看出, 以下几种情况均是 true:\n    \n    - value 的类型是 `number`, `symbol` 或者 `boolean`\n    - value 是null\n    - value 是 symbol 值\n    - value 是任意字母或数字或下划线或汉字组成的字符串\n    - value 不是对象(!reIsDeepProp.test(value))\n    - object 不是 null 并且 value 不是 object 的键值\n\n- 依赖函数 stringToPath\n```js\nvar memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n```\n    虽然函数名为 stringToPath, 这里 path 其实是一个数组, 所以是将字符串转换为数组, 同时如果字符串第一个字符是 `.`, 则用空字符串代替\n\n\n# 写在后面\n\n所以 `_.get` 是根据传入的 path(可以是字符串或数组格式) 来获取对应的 object 中的值\n","source":"_posts/lodash-get.md","raw":"---\ntitle: 【学习笔记】lodash API - get\ndate: 2018-09-26 18:16:36\ntags: ['javascript', 'lodash', '源码']\n---\n\n> 每日一言: 每天都超越自己, 请叫我王超越\n> 参考文档: https://www.lodashjs.com/docs/4.17.5.html#get\n\n# 写在前面\n\n开发的时候看到项目中用到了 lodash 的 `_.get` api, 虽然知道 lodash 是开源的 js 工具库, 但是里面 api 很多, 并没有每个都去研究. 从 `_.get` 的 api 名字来看, 以为是异步请求接口什么的, 结果看了源码才发现完全不是这样.\n\n# 简介\n\n先看一下官方文档对这个 api 的介绍\n\n- _.get(object, path, [defaultValue])\n```html\nGets the value at path of object. If the resolved value is undefined,\nthe defaultValue is returned in its place.\n```\n\n翻译过来就是: 获取对象路径上的值, 如果返回的是 `undefined`, 则用默认值代替.\n\n从文档中的介绍和示例并没有完全理解这个 api 的具体作用, 所以直接去看了一下源码, 下面对源码进行解读\n\n# 源码\n\n- 入口 get.js\n```js\n/* 入口 get.js */\nfunction get(object, path, defaultValue) {\n    var result = object == null ? undefined : baseGet(object, path);\n    return result === undefined ? defaultValue : result;\n}\n```\n入口代码很简单, 如果 result 是 undefined, 则返回默认值 `defaultValue`, 否则返回 result. 这里的关键是 `baseGet` 函数, 同时 `baseGet` 也有依赖, 所以下面把各个依赖函数解释下\n\n- 依赖函数 baseGet\n```js\n/**\n * @file _.baseGet.js \n * @function baseGet\n */\nvar castPath = require('./_castPath'),\n    toKey = require('./_toKey');\nfunction baseGet(object, path) {\n    path = castPath(path, object);\n\n    var index = 0, length = path.length;\n\n    while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n    }\n    return (index && index == length) ? object : undefined;\n}\n```\n\n    知道了下面每个函数的作用之后, 就能分析 baseGet 的逻辑:\n    - 获取数组形式的 path(path = castPath(path, object))\n    - 根据 path 循环查找\n    - 最终返回结果对应的具体值\n    - 举个栗子🌰\n\n    ```js\n    /**\n     * 用官网文档中的栗子来说明 \n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     * _.get(object, 'a[0].b.c')  // => 3\n     */\n\n    // baseGet 函数\n    // 1️⃣  可以获得 path = ['a', '0', 'b', 'c']\n    path = castPath(path, object);\n\n    // 2️⃣ while 循环过程可知 object 的变化过程\n    /**\n     * index = 0, object = object[path[0]] = [{ 'b': { 'c': 3 } }]\n     * index = 1, object = object[path[1]] = { 'b': { 'c': 3 } }\n     * index = 2, object = object[path[2]] = { 'c': 3 }\n     * index = 3, object = object[path[3]] = 3\n     * index = 4, 跳出\n     */\n    while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n    }\n\n    // get 函数\n    // 所以主入口中 \n    baseGet(object, path) // 3\n\n    var result = object == null ? undefined : baseGet(object, path);\n    // result = 3\n    // 所以最终结论是 3\n    ```\n    \n- 依赖函数 castPath\n```js\n/**\n * @file _castPath.js\n * @function castPath\n */\n var isArray = require('./isArray'), // 判断是否是对象\n     isKey = require('./_isKey'),\n     stringToPath = require('./_stringToPath'),\n     toString = require('./toString'); // 转换成字符串\n\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n```\n\n    如果 value 是数组, 则直接返回数组, 否则如果 value 可以作为 key, 则返回 [value], 否则现将 value 转换成字符串, 再以数组的形式返回\n\n- 依赖函数 toKey\n```js\n/**\n * @file _toKey.js\n * @function toKey\n */\nvar isSymbol = require('./isSymbol');\nvar INFINITY = 1 / 0;\n\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n```\n\n    将参数 value 转换成可以做对象 key 的格式, 有如下几种情况:\n\n    - value 的类型是 string 直接返回 value\n    - value 是 symbol 直接返回 value\n    - 不是前两种情况, 如果 value 是 0 , 则返回 '-0', 否则返回 value + '' 作为key\n\n- 依赖函数 isKey\n```js\nvar isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n```\n\n    从函数名可以知道 isKey 是判断一个 value 是否可以作为一个对象中的 key, 从代码中可以看出, 以下几种情况均是 true:\n    \n    - value 的类型是 `number`, `symbol` 或者 `boolean`\n    - value 是null\n    - value 是 symbol 值\n    - value 是任意字母或数字或下划线或汉字组成的字符串\n    - value 不是对象(!reIsDeepProp.test(value))\n    - object 不是 null 并且 value 不是 object 的键值\n\n- 依赖函数 stringToPath\n```js\nvar memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n```\n    虽然函数名为 stringToPath, 这里 path 其实是一个数组, 所以是将字符串转换为数组, 同时如果字符串第一个字符是 `.`, 则用空字符串代替\n\n\n# 写在后面\n\n所以 `_.get` 是根据传入的 path(可以是字符串或数组格式) 来获取对应的 object 中的值\n","slug":"lodash-get","published":1,"updated":"2018-09-27T12:10:59.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnw00118b05w50b8fro","content":"<blockquote>\n<p>每日一言: 每天都超越自己, 请叫我王超越<br>参考文档: <a href=\"https://www.lodashjs.com/docs/4.17.5.html#get\" target=\"_blank\" rel=\"noopener\">https://www.lodashjs.com/docs/4.17.5.html#get</a></p>\n</blockquote>\n<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>开发的时候看到项目中用到了 lodash 的 <code>_.get</code> api, 虽然知道 lodash 是开源的 js 工具库, 但是里面 api 很多, 并没有每个都去研究. 从 <code>_.get</code> 的 api 名字来看, 以为是异步请求接口什么的, 结果看了源码才发现完全不是这样.</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>先看一下官方文档对这个 api 的介绍</p>\n<ul>\n<li>_.get(object, path, [defaultValue])<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gets the value at path of object. If the resolved value is undefined,</span><br><span class=\"line\">the defaultValue is returned in its place.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>翻译过来就是: 获取对象路径上的值, 如果返回的是 <code>undefined</code>, 则用默认值代替.</p>\n<p>从文档中的介绍和示例并没有完全理解这个 api 的具体作用, 所以直接去看了一下源码, 下面对源码进行解读</p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><ul>\n<li>入口 get.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 入口 get.js */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">object, path, defaultValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = object == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : baseGet(object, path);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result === <span class=\"literal\">undefined</span> ? defaultValue : result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>入口代码很简单, 如果 result 是 undefined, 则返回默认值 <code>defaultValue</code>, 否则返回 result. 这里的关键是 <code>baseGet</code> 函数, 同时 <code>baseGet</code> 也有依赖, 所以下面把各个依赖函数解释下</p>\n<ul>\n<li><p>依赖函数 baseGet</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @file _.baseGet.js </span></span><br><span class=\"line\"><span class=\"comment\"> * @function baseGet</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> castPath = <span class=\"built_in\">require</span>(<span class=\"string\">'./_castPath'</span>),</span><br><span class=\"line\">    toKey = <span class=\"built_in\">require</span>(<span class=\"string\">'./_toKey'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baseGet</span>(<span class=\"params\">object, path</span>) </span>&#123;</span><br><span class=\"line\">    path = castPath(path, object);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>, length = path.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (object != <span class=\"literal\">null</span> &amp;&amp; index &lt; length) &#123;</span><br><span class=\"line\">        object = object[toKey(path[index++])];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (index &amp;&amp; index == length) ? object : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  知道了下面每个函数的作用之后, 就能分析 baseGet 的逻辑:</p>\n<ul>\n<li>获取数组形式的 path(path = castPath(path, object))</li>\n<li>根据 path 循环查找</li>\n<li>最终返回结果对应的具体值</li>\n<li><p>举个栗子🌰</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用官网文档中的栗子来说明 </span></span><br><span class=\"line\"><span class=\"comment\"> * var object = &#123; 'a': [&#123; 'b': &#123; 'c': 3 &#125; &#125;] &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> * _.get(object, 'a[0].b.c')  // =&gt; 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// baseGet 函数</span></span><br><span class=\"line\"><span class=\"comment\">// 1️⃣  可以获得 path = ['a', '0', 'b', 'c']</span></span><br><span class=\"line\">path = castPath(path, object);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2️⃣ while 循环过程可知 object 的变化过程</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * index = 0, object = object[path[0]] = [&#123; 'b': &#123; 'c': 3 &#125; &#125;]</span></span><br><span class=\"line\"><span class=\"comment\"> * index = 1, object = object[path[1]] = &#123; 'b': &#123; 'c': 3 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * index = 2, object = object[path[2]] = &#123; 'c': 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * index = 3, object = object[path[3]] = 3</span></span><br><span class=\"line\"><span class=\"comment\"> * index = 4, 跳出</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (object != <span class=\"literal\">null</span> &amp;&amp; index &lt; length) &#123;</span><br><span class=\"line\">    object = object[toKey(path[index++])];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get 函数</span></span><br><span class=\"line\"><span class=\"comment\">// 所以主入口中 </span></span><br><span class=\"line\">baseGet(object, path) <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = object == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : baseGet(object, path);</span><br><span class=\"line\"><span class=\"comment\">// result = 3</span></span><br><span class=\"line\"><span class=\"comment\">// 所以最终结论是 3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>依赖函数 castPath</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @file _castPath.js</span></span><br><span class=\"line\"><span class=\"comment\"> * @function castPath</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> isArray = <span class=\"built_in\">require</span>(<span class=\"string\">'./isArray'</span>), <span class=\"comment\">// 判断是否是对象</span></span><br><span class=\"line\">     isKey = <span class=\"built_in\">require</span>(<span class=\"string\">'./_isKey'</span>),</span><br><span class=\"line\">     stringToPath = <span class=\"built_in\">require</span>(<span class=\"string\">'./_stringToPath'</span>),</span><br><span class=\"line\">     toString = <span class=\"built_in\">require</span>(<span class=\"string\">'./toString'</span>); <span class=\"comment\">// 转换成字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">castPath</span>(<span class=\"params\">value, object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isArray(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isKey(value, object) ? [value] : stringToPath(toString(value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  如果 value 是数组, 则直接返回数组, 否则如果 value 可以作为 key, 则返回 [value], 否则现将 value 转换成字符串, 再以数组的形式返回</p>\n</li>\n<li><p>依赖函数 toKey</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @file _toKey.js</span></span><br><span class=\"line\"><span class=\"comment\"> * @function toKey</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymbol = <span class=\"built_in\">require</span>(<span class=\"string\">'./isSymbol'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> INFINITY = <span class=\"number\">1</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toKey</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value == <span class=\"string\">'string'</span> || isSymbol(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = (value + <span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (result == <span class=\"string\">'0'</span> &amp;&amp; (<span class=\"number\">1</span> / value) == -INFINITY) ? <span class=\"string\">'-0'</span> : result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  将参数 value 转换成可以做对象 key 的格式, 有如下几种情况:</p>\n<ul>\n<li>value 的类型是 string 直接返回 value</li>\n<li>value 是 symbol 直接返回 value</li>\n<li>不是前两种情况, 如果 value 是 0 , 则返回 ‘-0’, 否则返回 value + ‘’ 作为key</li>\n</ul>\n</li>\n<li><p>依赖函数 isKey</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isArray = <span class=\"built_in\">require</span>(<span class=\"string\">'./isArray'</span>),</span><br><span class=\"line\">    isSymbol = <span class=\"built_in\">require</span>(<span class=\"string\">'./isSymbol'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Used to match property names within property paths. */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reIsDeepProp = <span class=\"regexp\">/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/</span>,</span><br><span class=\"line\">    reIsPlainProp = <span class=\"regexp\">/^\\w*$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isKey</span>(<span class=\"params\">value, object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isArray(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type == <span class=\"string\">'number'</span> || type == <span class=\"string\">'symbol'</span> || type == <span class=\"string\">'boolean'</span> ||</span><br><span class=\"line\">      value == <span class=\"literal\">null</span> || isSymbol(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||</span><br><span class=\"line\">    (object != <span class=\"literal\">null</span> &amp;&amp; value <span class=\"keyword\">in</span> <span class=\"built_in\">Object</span>(object));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  从函数名可以知道 isKey 是判断一个 value 是否可以作为一个对象中的 key, 从代码中可以看出, 以下几种情况均是 true:</p>\n<ul>\n<li>value 的类型是 <code>number</code>, <code>symbol</code> 或者 <code>boolean</code></li>\n<li>value 是null</li>\n<li>value 是 symbol 值</li>\n<li>value 是任意字母或数字或下划线或汉字组成的字符串</li>\n<li>value 不是对象(!reIsDeepProp.test(value))</li>\n<li>object 不是 null 并且 value 不是 object 的键值</li>\n</ul>\n</li>\n<li><p>依赖函数 stringToPath</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> memoizeCapped = <span class=\"built_in\">require</span>(<span class=\"string\">'./_memoizeCapped'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Used to match property names within property paths. */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rePropName = <span class=\"regexp\">/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Used to match backslashes in property paths. */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reEscapeChar = <span class=\"regexp\">/\\\\(\\\\)?/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stringToPath = memoizeCapped(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (string.charCodeAt(<span class=\"number\">0</span>) === <span class=\"number\">46</span> <span class=\"comment\">/* . */</span>) &#123;</span><br><span class=\"line\">    result.push(<span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  string.replace(rePropName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match, number, quote, subString</span>) </span>&#123;</span><br><span class=\"line\">    result.push(quote ? subString.replace(reEscapeChar, <span class=\"string\">'$1'</span>) : (number || match));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>  虽然函数名为 stringToPath, 这里 path 其实是一个数组, 所以是将字符串转换为数组, 同时如果字符串第一个字符是 <code>.</code>, 则用空字符串代替</p>\n</li>\n</ul>\n<h1 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h1><p>所以 <code>_.get</code> 是根据传入的 path(可以是字符串或数组格式) 来获取对应的 object 中的值</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言: 每天都超越自己, 请叫我王超越<br>参考文档: <a href=\"https://www.lodashjs.com/docs/4.17.5.html#get\" target=\"_blank\" rel=\"noopener\">https://www.lodashjs.com/docs/4.17.5.html#get</a></p>\n</blockquote>\n<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>开发的时候看到项目中用到了 lodash 的 <code>_.get</code> api, 虽然知道 lodash 是开源的 js 工具库, 但是里面 api 很多, 并没有每个都去研究. 从 <code>_.get</code> 的 api 名字来看, 以为是异步请求接口什么的, 结果看了源码才发现完全不是这样.</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>先看一下官方文档对这个 api 的介绍</p>\n<ul>\n<li>_.get(object, path, [defaultValue])<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gets the value at path of object. If the resolved value is undefined,</span><br><span class=\"line\">the defaultValue is returned in its place.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>翻译过来就是: 获取对象路径上的值, 如果返回的是 <code>undefined</code>, 则用默认值代替.</p>\n<p>从文档中的介绍和示例并没有完全理解这个 api 的具体作用, 所以直接去看了一下源码, 下面对源码进行解读</p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><ul>\n<li>入口 get.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 入口 get.js */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">object, path, defaultValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = object == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : baseGet(object, path);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result === <span class=\"literal\">undefined</span> ? defaultValue : result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>入口代码很简单, 如果 result 是 undefined, 则返回默认值 <code>defaultValue</code>, 否则返回 result. 这里的关键是 <code>baseGet</code> 函数, 同时 <code>baseGet</code> 也有依赖, 所以下面把各个依赖函数解释下</p>\n<ul>\n<li><p>依赖函数 baseGet</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @file _.baseGet.js </span></span><br><span class=\"line\"><span class=\"comment\"> * @function baseGet</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> castPath = <span class=\"built_in\">require</span>(<span class=\"string\">'./_castPath'</span>),</span><br><span class=\"line\">    toKey = <span class=\"built_in\">require</span>(<span class=\"string\">'./_toKey'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baseGet</span>(<span class=\"params\">object, path</span>) </span>&#123;</span><br><span class=\"line\">    path = castPath(path, object);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>, length = path.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (object != <span class=\"literal\">null</span> &amp;&amp; index &lt; length) &#123;</span><br><span class=\"line\">        object = object[toKey(path[index++])];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (index &amp;&amp; index == length) ? object : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  知道了下面每个函数的作用之后, 就能分析 baseGet 的逻辑:</p>\n<ul>\n<li>获取数组形式的 path(path = castPath(path, object))</li>\n<li>根据 path 循环查找</li>\n<li>最终返回结果对应的具体值</li>\n<li><p>举个栗子🌰</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用官网文档中的栗子来说明 </span></span><br><span class=\"line\"><span class=\"comment\"> * var object = &#123; 'a': [&#123; 'b': &#123; 'c': 3 &#125; &#125;] &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> * _.get(object, 'a[0].b.c')  // =&gt; 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// baseGet 函数</span></span><br><span class=\"line\"><span class=\"comment\">// 1️⃣  可以获得 path = ['a', '0', 'b', 'c']</span></span><br><span class=\"line\">path = castPath(path, object);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2️⃣ while 循环过程可知 object 的变化过程</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * index = 0, object = object[path[0]] = [&#123; 'b': &#123; 'c': 3 &#125; &#125;]</span></span><br><span class=\"line\"><span class=\"comment\"> * index = 1, object = object[path[1]] = &#123; 'b': &#123; 'c': 3 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * index = 2, object = object[path[2]] = &#123; 'c': 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * index = 3, object = object[path[3]] = 3</span></span><br><span class=\"line\"><span class=\"comment\"> * index = 4, 跳出</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (object != <span class=\"literal\">null</span> &amp;&amp; index &lt; length) &#123;</span><br><span class=\"line\">    object = object[toKey(path[index++])];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get 函数</span></span><br><span class=\"line\"><span class=\"comment\">// 所以主入口中 </span></span><br><span class=\"line\">baseGet(object, path) <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = object == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : baseGet(object, path);</span><br><span class=\"line\"><span class=\"comment\">// result = 3</span></span><br><span class=\"line\"><span class=\"comment\">// 所以最终结论是 3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>依赖函数 castPath</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @file _castPath.js</span></span><br><span class=\"line\"><span class=\"comment\"> * @function castPath</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> isArray = <span class=\"built_in\">require</span>(<span class=\"string\">'./isArray'</span>), <span class=\"comment\">// 判断是否是对象</span></span><br><span class=\"line\">     isKey = <span class=\"built_in\">require</span>(<span class=\"string\">'./_isKey'</span>),</span><br><span class=\"line\">     stringToPath = <span class=\"built_in\">require</span>(<span class=\"string\">'./_stringToPath'</span>),</span><br><span class=\"line\">     toString = <span class=\"built_in\">require</span>(<span class=\"string\">'./toString'</span>); <span class=\"comment\">// 转换成字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">castPath</span>(<span class=\"params\">value, object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isArray(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isKey(value, object) ? [value] : stringToPath(toString(value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  如果 value 是数组, 则直接返回数组, 否则如果 value 可以作为 key, 则返回 [value], 否则现将 value 转换成字符串, 再以数组的形式返回</p>\n</li>\n<li><p>依赖函数 toKey</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @file _toKey.js</span></span><br><span class=\"line\"><span class=\"comment\"> * @function toKey</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymbol = <span class=\"built_in\">require</span>(<span class=\"string\">'./isSymbol'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> INFINITY = <span class=\"number\">1</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toKey</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value == <span class=\"string\">'string'</span> || isSymbol(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = (value + <span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (result == <span class=\"string\">'0'</span> &amp;&amp; (<span class=\"number\">1</span> / value) == -INFINITY) ? <span class=\"string\">'-0'</span> : result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  将参数 value 转换成可以做对象 key 的格式, 有如下几种情况:</p>\n<ul>\n<li>value 的类型是 string 直接返回 value</li>\n<li>value 是 symbol 直接返回 value</li>\n<li>不是前两种情况, 如果 value 是 0 , 则返回 ‘-0’, 否则返回 value + ‘’ 作为key</li>\n</ul>\n</li>\n<li><p>依赖函数 isKey</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isArray = <span class=\"built_in\">require</span>(<span class=\"string\">'./isArray'</span>),</span><br><span class=\"line\">    isSymbol = <span class=\"built_in\">require</span>(<span class=\"string\">'./isSymbol'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Used to match property names within property paths. */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reIsDeepProp = <span class=\"regexp\">/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/</span>,</span><br><span class=\"line\">    reIsPlainProp = <span class=\"regexp\">/^\\w*$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isKey</span>(<span class=\"params\">value, object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isArray(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type == <span class=\"string\">'number'</span> || type == <span class=\"string\">'symbol'</span> || type == <span class=\"string\">'boolean'</span> ||</span><br><span class=\"line\">      value == <span class=\"literal\">null</span> || isSymbol(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||</span><br><span class=\"line\">    (object != <span class=\"literal\">null</span> &amp;&amp; value <span class=\"keyword\">in</span> <span class=\"built_in\">Object</span>(object));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  从函数名可以知道 isKey 是判断一个 value 是否可以作为一个对象中的 key, 从代码中可以看出, 以下几种情况均是 true:</p>\n<ul>\n<li>value 的类型是 <code>number</code>, <code>symbol</code> 或者 <code>boolean</code></li>\n<li>value 是null</li>\n<li>value 是 symbol 值</li>\n<li>value 是任意字母或数字或下划线或汉字组成的字符串</li>\n<li>value 不是对象(!reIsDeepProp.test(value))</li>\n<li>object 不是 null 并且 value 不是 object 的键值</li>\n</ul>\n</li>\n<li><p>依赖函数 stringToPath</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> memoizeCapped = <span class=\"built_in\">require</span>(<span class=\"string\">'./_memoizeCapped'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Used to match property names within property paths. */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rePropName = <span class=\"regexp\">/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Used to match backslashes in property paths. */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reEscapeChar = <span class=\"regexp\">/\\\\(\\\\)?/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stringToPath = memoizeCapped(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (string.charCodeAt(<span class=\"number\">0</span>) === <span class=\"number\">46</span> <span class=\"comment\">/* . */</span>) &#123;</span><br><span class=\"line\">    result.push(<span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  string.replace(rePropName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match, number, quote, subString</span>) </span>&#123;</span><br><span class=\"line\">    result.push(quote ? subString.replace(reEscapeChar, <span class=\"string\">'$1'</span>) : (number || match));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>  虽然函数名为 stringToPath, 这里 path 其实是一个数组, 所以是将字符串转换为数组, 同时如果字符串第一个字符是 <code>.</code>, 则用空字符串代替</p>\n</li>\n</ul>\n<h1 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h1><p>所以 <code>_.get</code> 是根据传入的 path(可以是字符串或数组格式) 来获取对应的 object 中的值</p>\n"},{"title":"我的朋友-阿空","date":"2018-10-16T11:46:13.000Z","_content":"\n> 每日一言：墙头马上\n\n认识阿空是在 2013 年的 9 月，或许是在更早的 12 年，在东北师大的校园或者鞍山科技大学的小路上擦肩而过，她梳着她的高马尾，我仍然披肩齐刘海，脸上都充满了胶原蛋白。只不过那时候，我不认识她，她也不认识我。不知不觉，相识也有 5 年了，5 年不长也不短，我陪着她越减越肥，她陪着我从分手走到心如止水。\n\n本科毕业后在家呆了两周，就北上了。每天寝室、食堂、实验室三点一线，假期里的校园没有一点生机，正好可以安心学习，也是在这段时间内，慢慢适应了一个人生活，学习。9 月份的开学，来的很突然，我还没有准备好迎接我的新同学，新室友，学校就一下子沸腾起来，也是在这个 9 月，阿空走进了我的生活。\n\n报到那天，我一如既往，早早收拾好寝室就去实验室了，后来听末末说，阿空来的时候，有好几个男生帮忙搬东西，厉害的不行。我们还在讨论着哪个是她男朋友，她说，都是基友。。。\n\n晚上，寝室的 4 个人都聚齐了，自然是自我介绍。阿空是保研过来的，和同寝室的本校生保研的白果是一个导师，同时，我，阿空和白果是老乡，一下子也让我们亲近不少，离开本科后第一次在省外遇到这么多老乡，自然是开心的。末末和我是通过考研录取的，不得不提我初试本专业倒数第二的成绩 😓。末末老家是安徽的，本科是本市的另外一个大学读的。我们 4 个里面，我是唯一一个在这个校园，这个城市，甚至这个省没有认识的人的，但是后来从寝室到实验室，室友，老师，师兄弟姐妹们，都给我很多关怀，在这里也是愉快的度过了 2 年研究生生活。\n\n### 阿空阅读困难却很聪明\n\n研一的课比较多，很多都在早上，像一些很难的必修课，还必须起个大早去占座。阿空和我是对铺，睡觉头对头，有的时候还可以说悄悄话。每天早上六点半或者七点左右，末末和白果就开始起床洗漱，然后是我，大概7点半，然后是阿空，能起来的话大概在 8 点，起不来的话，一觉就睡到 9 点或 10 点。经常早上是我伸手去关掉她的闹铃。一个月以后，只有末末还在坚持早起，我和白果，果断被感染，要不然在起很晚，飞奔到教室（还好有猴哥帮忙占座），要不然第一节课完全不去上了。期末考试的时候，数理统计这种，我们最少也提前一周去自习室复习，只有阿空，在阿空考前最后一晚没睡，然后考了 90 多分。\n\n阿空有轻微阅读困难症，这也是我后来才知道的。她喜欢看韩剧，不管看什么，经常是韩剧说一句，她重复一遍汉语，然后哈哈大笑，我们开始以为是很好笑的剧，然后看了几眼，一致认为是阿空笑点低。真正知道她有阅读困难症是在一场考试中，大概是毛概这种开卷考试，由于是开卷，我们提前准备了好多资料带进去，考试的时候分工合作，每人找一道题，抄完答案标记给别人。阿空就坐在我旁边，我写完一个给她一个，等我写完两三道题之后发现她还在写第一题。我看着他对着答案，念一句，写一句，每一句念的还很慢，我说你快点，等下交卷了，她说，我阅读困难。到这时我才知道，原来看韩剧的时候她念出来是因为眼睛看的跟不上字幕，😓，然后我给她念，催着她尽快写完了。\n\n### 阿空是陪我最久的朋友\n\n从 13 年到现在，相识的 5 年里，2 年研究生生活，3 年北漂，阿空一直都在我身边。\n\n研一后期，白果开始和她是好哥们谈恋爱，寝室剩我和阿空没有谈恋爱。平时没有课我们基本泡在实验室，我们都喜欢唱歌，爱臭美。\n\n周末在寝室睡到昏天黑地的时候，醒来能看到阿空在对铺睡的像死猪。心血来潮要去图书馆看书的时候，她看她的时间简史，我看我的林徽因。ktv 鬼哭狼嚎的时候，前奏是我，高音绝对是他，像个汉子一样。14 年夏天，白果去了杭州实习，我来了北京，阿空依然很有缘分的和我是一个公司实习。每天一起去上班，下班基本也一起回家。毕业前，周末没事去公园拍照，去咖啡馆和咖啡，都是阿空和我一起，同时，她拍照的水平也日精月益。北京的香山，南锣鼓巷，也是阿空和我一起去的。第一次体验剑道课，第一次去看开心麻花的话剧，第一次听五月天演唱会。\n\n她几乎知道我所有的秘密，她知道什么时间有谁跟我表白了，见过我因为分手哭的歇斯底里，知道我喜欢谁，知道我讨厌谁，知道我工作上所有的不顺心和开心。也知道我唯一一次喝醉是什么时候，参与了我 50% 以上的旅行。从毕业前夕，她每次生日我都在，我的每次生日也只有她。\n\n### 阿空是个很善良的人\n\n为什么觉得阿空善良，因为她从来不会生气，从来！！\n\n阿空长的比较女汉子，哈哈哈哈，被她看到估计要揍我。但是性格却很好，无论什么情况，她都不会生气。16年元旦去上海的时候，由于我记错车站，差点误了飞机，但是他也没生气，而是想办法解决问题。\n\n毕业后，家里也给她介绍过很多男生，但是没有一次修成正果，我们大家也是为他操碎了心，就在今年情人节，这孩子高调的开始秀恩爱了，和小男友去看了五月天演唱会，和我们聊天也懂得越来越多，开始学会撒娇。然后，我觉得她的口周皮炎一定是被她小男友亲的。\n\n总之，大大的祝福送给我的好朋友 - 阿空。\n","source":"_posts/myfriend-kong.md","raw":"---\ntitle: 我的朋友-阿空\ndate: 2018-10-16 19:46:13\ntags: ['碎片', '记事']\n---\n\n> 每日一言：墙头马上\n\n认识阿空是在 2013 年的 9 月，或许是在更早的 12 年，在东北师大的校园或者鞍山科技大学的小路上擦肩而过，她梳着她的高马尾，我仍然披肩齐刘海，脸上都充满了胶原蛋白。只不过那时候，我不认识她，她也不认识我。不知不觉，相识也有 5 年了，5 年不长也不短，我陪着她越减越肥，她陪着我从分手走到心如止水。\n\n本科毕业后在家呆了两周，就北上了。每天寝室、食堂、实验室三点一线，假期里的校园没有一点生机，正好可以安心学习，也是在这段时间内，慢慢适应了一个人生活，学习。9 月份的开学，来的很突然，我还没有准备好迎接我的新同学，新室友，学校就一下子沸腾起来，也是在这个 9 月，阿空走进了我的生活。\n\n报到那天，我一如既往，早早收拾好寝室就去实验室了，后来听末末说，阿空来的时候，有好几个男生帮忙搬东西，厉害的不行。我们还在讨论着哪个是她男朋友，她说，都是基友。。。\n\n晚上，寝室的 4 个人都聚齐了，自然是自我介绍。阿空是保研过来的，和同寝室的本校生保研的白果是一个导师，同时，我，阿空和白果是老乡，一下子也让我们亲近不少，离开本科后第一次在省外遇到这么多老乡，自然是开心的。末末和我是通过考研录取的，不得不提我初试本专业倒数第二的成绩 😓。末末老家是安徽的，本科是本市的另外一个大学读的。我们 4 个里面，我是唯一一个在这个校园，这个城市，甚至这个省没有认识的人的，但是后来从寝室到实验室，室友，老师，师兄弟姐妹们，都给我很多关怀，在这里也是愉快的度过了 2 年研究生生活。\n\n### 阿空阅读困难却很聪明\n\n研一的课比较多，很多都在早上，像一些很难的必修课，还必须起个大早去占座。阿空和我是对铺，睡觉头对头，有的时候还可以说悄悄话。每天早上六点半或者七点左右，末末和白果就开始起床洗漱，然后是我，大概7点半，然后是阿空，能起来的话大概在 8 点，起不来的话，一觉就睡到 9 点或 10 点。经常早上是我伸手去关掉她的闹铃。一个月以后，只有末末还在坚持早起，我和白果，果断被感染，要不然在起很晚，飞奔到教室（还好有猴哥帮忙占座），要不然第一节课完全不去上了。期末考试的时候，数理统计这种，我们最少也提前一周去自习室复习，只有阿空，在阿空考前最后一晚没睡，然后考了 90 多分。\n\n阿空有轻微阅读困难症，这也是我后来才知道的。她喜欢看韩剧，不管看什么，经常是韩剧说一句，她重复一遍汉语，然后哈哈大笑，我们开始以为是很好笑的剧，然后看了几眼，一致认为是阿空笑点低。真正知道她有阅读困难症是在一场考试中，大概是毛概这种开卷考试，由于是开卷，我们提前准备了好多资料带进去，考试的时候分工合作，每人找一道题，抄完答案标记给别人。阿空就坐在我旁边，我写完一个给她一个，等我写完两三道题之后发现她还在写第一题。我看着他对着答案，念一句，写一句，每一句念的还很慢，我说你快点，等下交卷了，她说，我阅读困难。到这时我才知道，原来看韩剧的时候她念出来是因为眼睛看的跟不上字幕，😓，然后我给她念，催着她尽快写完了。\n\n### 阿空是陪我最久的朋友\n\n从 13 年到现在，相识的 5 年里，2 年研究生生活，3 年北漂，阿空一直都在我身边。\n\n研一后期，白果开始和她是好哥们谈恋爱，寝室剩我和阿空没有谈恋爱。平时没有课我们基本泡在实验室，我们都喜欢唱歌，爱臭美。\n\n周末在寝室睡到昏天黑地的时候，醒来能看到阿空在对铺睡的像死猪。心血来潮要去图书馆看书的时候，她看她的时间简史，我看我的林徽因。ktv 鬼哭狼嚎的时候，前奏是我，高音绝对是他，像个汉子一样。14 年夏天，白果去了杭州实习，我来了北京，阿空依然很有缘分的和我是一个公司实习。每天一起去上班，下班基本也一起回家。毕业前，周末没事去公园拍照，去咖啡馆和咖啡，都是阿空和我一起，同时，她拍照的水平也日精月益。北京的香山，南锣鼓巷，也是阿空和我一起去的。第一次体验剑道课，第一次去看开心麻花的话剧，第一次听五月天演唱会。\n\n她几乎知道我所有的秘密，她知道什么时间有谁跟我表白了，见过我因为分手哭的歇斯底里，知道我喜欢谁，知道我讨厌谁，知道我工作上所有的不顺心和开心。也知道我唯一一次喝醉是什么时候，参与了我 50% 以上的旅行。从毕业前夕，她每次生日我都在，我的每次生日也只有她。\n\n### 阿空是个很善良的人\n\n为什么觉得阿空善良，因为她从来不会生气，从来！！\n\n阿空长的比较女汉子，哈哈哈哈，被她看到估计要揍我。但是性格却很好，无论什么情况，她都不会生气。16年元旦去上海的时候，由于我记错车站，差点误了飞机，但是他也没生气，而是想办法解决问题。\n\n毕业后，家里也给她介绍过很多男生，但是没有一次修成正果，我们大家也是为他操碎了心，就在今年情人节，这孩子高调的开始秀恩爱了，和小男友去看了五月天演唱会，和我们聊天也懂得越来越多，开始学会撒娇。然后，我觉得她的口周皮炎一定是被她小男友亲的。\n\n总之，大大的祝福送给我的好朋友 - 阿空。\n","slug":"myfriend-kong","published":1,"updated":"2018-10-18T02:35:21.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnx00138b05rc71k10t","content":"<blockquote>\n<p>每日一言：墙头马上</p>\n</blockquote>\n<p>认识阿空是在 2013 年的 9 月，或许是在更早的 12 年，在东北师大的校园或者鞍山科技大学的小路上擦肩而过，她梳着她的高马尾，我仍然披肩齐刘海，脸上都充满了胶原蛋白。只不过那时候，我不认识她，她也不认识我。不知不觉，相识也有 5 年了，5 年不长也不短，我陪着她越减越肥，她陪着我从分手走到心如止水。</p>\n<p>本科毕业后在家呆了两周，就北上了。每天寝室、食堂、实验室三点一线，假期里的校园没有一点生机，正好可以安心学习，也是在这段时间内，慢慢适应了一个人生活，学习。9 月份的开学，来的很突然，我还没有准备好迎接我的新同学，新室友，学校就一下子沸腾起来，也是在这个 9 月，阿空走进了我的生活。</p>\n<p>报到那天，我一如既往，早早收拾好寝室就去实验室了，后来听末末说，阿空来的时候，有好几个男生帮忙搬东西，厉害的不行。我们还在讨论着哪个是她男朋友，她说，都是基友。。。</p>\n<p>晚上，寝室的 4 个人都聚齐了，自然是自我介绍。阿空是保研过来的，和同寝室的本校生保研的白果是一个导师，同时，我，阿空和白果是老乡，一下子也让我们亲近不少，离开本科后第一次在省外遇到这么多老乡，自然是开心的。末末和我是通过考研录取的，不得不提我初试本专业倒数第二的成绩 😓。末末老家是安徽的，本科是本市的另外一个大学读的。我们 4 个里面，我是唯一一个在这个校园，这个城市，甚至这个省没有认识的人的，但是后来从寝室到实验室，室友，老师，师兄弟姐妹们，都给我很多关怀，在这里也是愉快的度过了 2 年研究生生活。</p>\n<h3 id=\"阿空阅读困难却很聪明\"><a href=\"#阿空阅读困难却很聪明\" class=\"headerlink\" title=\"阿空阅读困难却很聪明\"></a>阿空阅读困难却很聪明</h3><p>研一的课比较多，很多都在早上，像一些很难的必修课，还必须起个大早去占座。阿空和我是对铺，睡觉头对头，有的时候还可以说悄悄话。每天早上六点半或者七点左右，末末和白果就开始起床洗漱，然后是我，大概7点半，然后是阿空，能起来的话大概在 8 点，起不来的话，一觉就睡到 9 点或 10 点。经常早上是我伸手去关掉她的闹铃。一个月以后，只有末末还在坚持早起，我和白果，果断被感染，要不然在起很晚，飞奔到教室（还好有猴哥帮忙占座），要不然第一节课完全不去上了。期末考试的时候，数理统计这种，我们最少也提前一周去自习室复习，只有阿空，在阿空考前最后一晚没睡，然后考了 90 多分。</p>\n<p>阿空有轻微阅读困难症，这也是我后来才知道的。她喜欢看韩剧，不管看什么，经常是韩剧说一句，她重复一遍汉语，然后哈哈大笑，我们开始以为是很好笑的剧，然后看了几眼，一致认为是阿空笑点低。真正知道她有阅读困难症是在一场考试中，大概是毛概这种开卷考试，由于是开卷，我们提前准备了好多资料带进去，考试的时候分工合作，每人找一道题，抄完答案标记给别人。阿空就坐在我旁边，我写完一个给她一个，等我写完两三道题之后发现她还在写第一题。我看着他对着答案，念一句，写一句，每一句念的还很慢，我说你快点，等下交卷了，她说，我阅读困难。到这时我才知道，原来看韩剧的时候她念出来是因为眼睛看的跟不上字幕，😓，然后我给她念，催着她尽快写完了。</p>\n<h3 id=\"阿空是陪我最久的朋友\"><a href=\"#阿空是陪我最久的朋友\" class=\"headerlink\" title=\"阿空是陪我最久的朋友\"></a>阿空是陪我最久的朋友</h3><p>从 13 年到现在，相识的 5 年里，2 年研究生生活，3 年北漂，阿空一直都在我身边。</p>\n<p>研一后期，白果开始和她是好哥们谈恋爱，寝室剩我和阿空没有谈恋爱。平时没有课我们基本泡在实验室，我们都喜欢唱歌，爱臭美。</p>\n<p>周末在寝室睡到昏天黑地的时候，醒来能看到阿空在对铺睡的像死猪。心血来潮要去图书馆看书的时候，她看她的时间简史，我看我的林徽因。ktv 鬼哭狼嚎的时候，前奏是我，高音绝对是他，像个汉子一样。14 年夏天，白果去了杭州实习，我来了北京，阿空依然很有缘分的和我是一个公司实习。每天一起去上班，下班基本也一起回家。毕业前，周末没事去公园拍照，去咖啡馆和咖啡，都是阿空和我一起，同时，她拍照的水平也日精月益。北京的香山，南锣鼓巷，也是阿空和我一起去的。第一次体验剑道课，第一次去看开心麻花的话剧，第一次听五月天演唱会。</p>\n<p>她几乎知道我所有的秘密，她知道什么时间有谁跟我表白了，见过我因为分手哭的歇斯底里，知道我喜欢谁，知道我讨厌谁，知道我工作上所有的不顺心和开心。也知道我唯一一次喝醉是什么时候，参与了我 50% 以上的旅行。从毕业前夕，她每次生日我都在，我的每次生日也只有她。</p>\n<h3 id=\"阿空是个很善良的人\"><a href=\"#阿空是个很善良的人\" class=\"headerlink\" title=\"阿空是个很善良的人\"></a>阿空是个很善良的人</h3><p>为什么觉得阿空善良，因为她从来不会生气，从来！！</p>\n<p>阿空长的比较女汉子，哈哈哈哈，被她看到估计要揍我。但是性格却很好，无论什么情况，她都不会生气。16年元旦去上海的时候，由于我记错车站，差点误了飞机，但是他也没生气，而是想办法解决问题。</p>\n<p>毕业后，家里也给她介绍过很多男生，但是没有一次修成正果，我们大家也是为他操碎了心，就在今年情人节，这孩子高调的开始秀恩爱了，和小男友去看了五月天演唱会，和我们聊天也懂得越来越多，开始学会撒娇。然后，我觉得她的口周皮炎一定是被她小男友亲的。</p>\n<p>总之，大大的祝福送给我的好朋友 - 阿空。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言：墙头马上</p>\n</blockquote>\n<p>认识阿空是在 2013 年的 9 月，或许是在更早的 12 年，在东北师大的校园或者鞍山科技大学的小路上擦肩而过，她梳着她的高马尾，我仍然披肩齐刘海，脸上都充满了胶原蛋白。只不过那时候，我不认识她，她也不认识我。不知不觉，相识也有 5 年了，5 年不长也不短，我陪着她越减越肥，她陪着我从分手走到心如止水。</p>\n<p>本科毕业后在家呆了两周，就北上了。每天寝室、食堂、实验室三点一线，假期里的校园没有一点生机，正好可以安心学习，也是在这段时间内，慢慢适应了一个人生活，学习。9 月份的开学，来的很突然，我还没有准备好迎接我的新同学，新室友，学校就一下子沸腾起来，也是在这个 9 月，阿空走进了我的生活。</p>\n<p>报到那天，我一如既往，早早收拾好寝室就去实验室了，后来听末末说，阿空来的时候，有好几个男生帮忙搬东西，厉害的不行。我们还在讨论着哪个是她男朋友，她说，都是基友。。。</p>\n<p>晚上，寝室的 4 个人都聚齐了，自然是自我介绍。阿空是保研过来的，和同寝室的本校生保研的白果是一个导师，同时，我，阿空和白果是老乡，一下子也让我们亲近不少，离开本科后第一次在省外遇到这么多老乡，自然是开心的。末末和我是通过考研录取的，不得不提我初试本专业倒数第二的成绩 😓。末末老家是安徽的，本科是本市的另外一个大学读的。我们 4 个里面，我是唯一一个在这个校园，这个城市，甚至这个省没有认识的人的，但是后来从寝室到实验室，室友，老师，师兄弟姐妹们，都给我很多关怀，在这里也是愉快的度过了 2 年研究生生活。</p>\n<h3 id=\"阿空阅读困难却很聪明\"><a href=\"#阿空阅读困难却很聪明\" class=\"headerlink\" title=\"阿空阅读困难却很聪明\"></a>阿空阅读困难却很聪明</h3><p>研一的课比较多，很多都在早上，像一些很难的必修课，还必须起个大早去占座。阿空和我是对铺，睡觉头对头，有的时候还可以说悄悄话。每天早上六点半或者七点左右，末末和白果就开始起床洗漱，然后是我，大概7点半，然后是阿空，能起来的话大概在 8 点，起不来的话，一觉就睡到 9 点或 10 点。经常早上是我伸手去关掉她的闹铃。一个月以后，只有末末还在坚持早起，我和白果，果断被感染，要不然在起很晚，飞奔到教室（还好有猴哥帮忙占座），要不然第一节课完全不去上了。期末考试的时候，数理统计这种，我们最少也提前一周去自习室复习，只有阿空，在阿空考前最后一晚没睡，然后考了 90 多分。</p>\n<p>阿空有轻微阅读困难症，这也是我后来才知道的。她喜欢看韩剧，不管看什么，经常是韩剧说一句，她重复一遍汉语，然后哈哈大笑，我们开始以为是很好笑的剧，然后看了几眼，一致认为是阿空笑点低。真正知道她有阅读困难症是在一场考试中，大概是毛概这种开卷考试，由于是开卷，我们提前准备了好多资料带进去，考试的时候分工合作，每人找一道题，抄完答案标记给别人。阿空就坐在我旁边，我写完一个给她一个，等我写完两三道题之后发现她还在写第一题。我看着他对着答案，念一句，写一句，每一句念的还很慢，我说你快点，等下交卷了，她说，我阅读困难。到这时我才知道，原来看韩剧的时候她念出来是因为眼睛看的跟不上字幕，😓，然后我给她念，催着她尽快写完了。</p>\n<h3 id=\"阿空是陪我最久的朋友\"><a href=\"#阿空是陪我最久的朋友\" class=\"headerlink\" title=\"阿空是陪我最久的朋友\"></a>阿空是陪我最久的朋友</h3><p>从 13 年到现在，相识的 5 年里，2 年研究生生活，3 年北漂，阿空一直都在我身边。</p>\n<p>研一后期，白果开始和她是好哥们谈恋爱，寝室剩我和阿空没有谈恋爱。平时没有课我们基本泡在实验室，我们都喜欢唱歌，爱臭美。</p>\n<p>周末在寝室睡到昏天黑地的时候，醒来能看到阿空在对铺睡的像死猪。心血来潮要去图书馆看书的时候，她看她的时间简史，我看我的林徽因。ktv 鬼哭狼嚎的时候，前奏是我，高音绝对是他，像个汉子一样。14 年夏天，白果去了杭州实习，我来了北京，阿空依然很有缘分的和我是一个公司实习。每天一起去上班，下班基本也一起回家。毕业前，周末没事去公园拍照，去咖啡馆和咖啡，都是阿空和我一起，同时，她拍照的水平也日精月益。北京的香山，南锣鼓巷，也是阿空和我一起去的。第一次体验剑道课，第一次去看开心麻花的话剧，第一次听五月天演唱会。</p>\n<p>她几乎知道我所有的秘密，她知道什么时间有谁跟我表白了，见过我因为分手哭的歇斯底里，知道我喜欢谁，知道我讨厌谁，知道我工作上所有的不顺心和开心。也知道我唯一一次喝醉是什么时候，参与了我 50% 以上的旅行。从毕业前夕，她每次生日我都在，我的每次生日也只有她。</p>\n<h3 id=\"阿空是个很善良的人\"><a href=\"#阿空是个很善良的人\" class=\"headerlink\" title=\"阿空是个很善良的人\"></a>阿空是个很善良的人</h3><p>为什么觉得阿空善良，因为她从来不会生气，从来！！</p>\n<p>阿空长的比较女汉子，哈哈哈哈，被她看到估计要揍我。但是性格却很好，无论什么情况，她都不会生气。16年元旦去上海的时候，由于我记错车站，差点误了飞机，但是他也没生气，而是想办法解决问题。</p>\n<p>毕业后，家里也给她介绍过很多男生，但是没有一次修成正果，我们大家也是为他操碎了心，就在今年情人节，这孩子高调的开始秀恩爱了，和小男友去看了五月天演唱会，和我们聊天也懂得越来越多，开始学会撒娇。然后，我觉得她的口周皮炎一定是被她小男友亲的。</p>\n<p>总之，大大的祝福送给我的好朋友 - 阿空。</p>\n"},{"title":"node 升级 sass 编译报错解决方案","date":"2018-09-28T05:03:43.000Z","_content":"\n> 每日一言: 绿茶家的面包诱惑🍨真的好好吃👀\n\n目前本地使用的 node 版本是 7.7.4, 据说太高版本的 node 在编译的时候回有 sass 报错, 所以尝试解决了一下\n\n# 升级node  \n\n```js\nnode stable\n\n// node 切换版本  node 7.7.4\n```\n\n升级后对应的本地工具版本分别是:\n\n- node 10.10.0\n- npm 6.4.1\n- cnpm 6.0.0\n\n# 编译\n\n- 项目中编译\n```js\nnpm run build 编译\n\n```\n\n- 会发现报错:\n```js\nFound bindings for the following environments:\n\n    OS X 64-bit with Node.js 7.\n```\n\n- 解决方法:\n```js\nnpm rebuild node-sass\n```\n  \n- 再次编译\n```js\nnpm run build 编译 // 通过\n\n```\n\n- 可以对比升级前后产出目录diff\n```js\ndiff -urNa 目录1 目录2\n```\n","source":"_posts/node-sass.md","raw":"---\ntitle: node 升级 sass 编译报错解决方案\ndate: 2018-09-28 13:03:43\ntags: ['node', 'sass']\n---\n\n> 每日一言: 绿茶家的面包诱惑🍨真的好好吃👀\n\n目前本地使用的 node 版本是 7.7.4, 据说太高版本的 node 在编译的时候回有 sass 报错, 所以尝试解决了一下\n\n# 升级node  \n\n```js\nnode stable\n\n// node 切换版本  node 7.7.4\n```\n\n升级后对应的本地工具版本分别是:\n\n- node 10.10.0\n- npm 6.4.1\n- cnpm 6.0.0\n\n# 编译\n\n- 项目中编译\n```js\nnpm run build 编译\n\n```\n\n- 会发现报错:\n```js\nFound bindings for the following environments:\n\n    OS X 64-bit with Node.js 7.\n```\n\n- 解决方法:\n```js\nnpm rebuild node-sass\n```\n  \n- 再次编译\n```js\nnpm run build 编译 // 通过\n\n```\n\n- 可以对比升级前后产出目录diff\n```js\ndiff -urNa 目录1 目录2\n```\n","slug":"node-sass","published":1,"updated":"2018-09-28T05:10:46.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetny00158b05qr91hm88","content":"<blockquote>\n<p>每日一言: 绿茶家的面包诱惑🍨真的好好吃👀</p>\n</blockquote>\n<p>目前本地使用的 node 版本是 7.7.4, 据说太高版本的 node 在编译的时候回有 sass 报错, 所以尝试解决了一下</p>\n<h1 id=\"升级node\"><a href=\"#升级node\" class=\"headerlink\" title=\"升级node\"></a>升级node</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node stable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// node 切换版本  node 7.7.4</span></span><br></pre></td></tr></table></figure>\n<p>升级后对应的本地工具版本分别是:</p>\n<ul>\n<li>node 10.10.0</li>\n<li>npm 6.4.1</li>\n<li>cnpm 6.0.0</li>\n</ul>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><ul>\n<li><p>项目中编译</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build 编译</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>会发现报错:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found bindings <span class=\"keyword\">for</span> the following environments:</span><br><span class=\"line\"></span><br><span class=\"line\">    OS X <span class=\"number\">64</span>-bit <span class=\"keyword\">with</span> Node.js <span class=\"number\">7.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rebuild node-sass</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>再次编译</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build 编译 <span class=\"comment\">// 通过</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以对比升级前后产出目录diff</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff -urNa 目录<span class=\"number\">1</span> 目录<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言: 绿茶家的面包诱惑🍨真的好好吃👀</p>\n</blockquote>\n<p>目前本地使用的 node 版本是 7.7.4, 据说太高版本的 node 在编译的时候回有 sass 报错, 所以尝试解决了一下</p>\n<h1 id=\"升级node\"><a href=\"#升级node\" class=\"headerlink\" title=\"升级node\"></a>升级node</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node stable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// node 切换版本  node 7.7.4</span></span><br></pre></td></tr></table></figure>\n<p>升级后对应的本地工具版本分别是:</p>\n<ul>\n<li>node 10.10.0</li>\n<li>npm 6.4.1</li>\n<li>cnpm 6.0.0</li>\n</ul>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><ul>\n<li><p>项目中编译</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build 编译</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>会发现报错:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found bindings <span class=\"keyword\">for</span> the following environments:</span><br><span class=\"line\"></span><br><span class=\"line\">    OS X <span class=\"number\">64</span>-bit <span class=\"keyword\">with</span> Node.js <span class=\"number\">7.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rebuild node-sass</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>再次编译</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build 编译 <span class=\"comment\">// 通过</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以对比升级前后产出目录diff</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff -urNa 目录<span class=\"number\">1</span> 目录<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"promise A+ 规范解读及轻量级实现","date":"2018-08-25T05:09:13.000Z","_content":"\n> promise A+ 规范文档：https://promisesaplus.com/\n\n之所以要遵循 promise A+ 规范，是由于开源以及开发中单独写的 promise 库太多了，为了每种 promise 库可以相互兼容或调用，所以要遵守规范。\n\n## demo 代码\n\n笔者自己根据 promise 规范写了一个[轻量级 promise](https://github.com/pearlwang1106/promise)\n\n下面对 promise A+ 规范进行解读\n\n## 1. 术语\n\n1. `promise` 是一个有 `then` 方法的符合 promise A+ 规范的对象或者函数\n2. `thenable` 是定义了then 方法的对象或函数\n3. `value` 是任何Javascript值（比如 undefined，一个 thenable 或一个 promise 等）\n4. `exception` 是通过 throw 抛出的表达式的值\n5. `reason` 是一个用于描述 Promise 被拒绝原因的值\n\n## 2. 规定\n\n### 2.1 promise 状态\n\n一个 promise 只有**三种**状态：pending, fulfilled, 或 rejected\n\n#### 2.1.1 promise 是 pending 状态：\n\n- 2.1.1.1 既可以转换成 fulfilled 状态，也可以转换成 rejected 状态\n\n#### 2.1.2 promise 是 fulfilled 状态：\n\n- 2.1.2.1 不能转换成其他状态\n- 2.1.2.2 必须有一个不可以改变(===)的 `value`\n\n#### 2.1.3 promise 是 rejected 状态：\n\n- 2.1.3.1 不能转换成其他状态\n- 2.1.3.2 必须有一个不可以改变(===)的 `reason`\n\n### 2.2 then 方法\n\n一个 promise 必须有一个 then 方法用来返回这个 promise 当前或最终的 `value`，或者拒绝的 `reason`。\n\n一个 promise 的 `then` 方法有两个入参：\n\n```\npromise.then(onFulfilled, onRejected)\n```\n\n#### 2.2.1 onFulfilled 和 onRejected 都是可选参数\n\n- 2.2.1.1 如果 `onFulfilled` 不是一个函数，那么它就必须被忽略。\n- 2.2.1.2 如果 `onRejected` 不是一个函数，那么它就必须被忽略。\n\n#### 2.2.2 如果 `onFulfilled` 是一个函数\n\n- 2.2.2.1 必须在 promise 完成后调用，同时用 promise 的 `value` 作为他的第一个参数\n- 2.2.2.2 严禁在 promise 完成之前调用\n- 2.2.2.3 最多只能调用一次\n\n#### 2.2.3 如果 `onRejected` 是一个函数\n\n- 2.2.3.1 必须在 promise reject 后调用，同时用 promise 的 `reason` 作为他的第一个参数\n- 2.2.3.2 严禁在 promise reject 之前调用\n- 2.2.3.3 最多只能调用一次\n\n#### 2.2.4 严禁在当前执行上下文（[execution context](https://es5.github.io/#x10.3)）中调用 `onFulfilled` 或 `onRejected` [3.1]\n\n#### 2.2.5 【必须】`onFulfilled` 或 `onRejected` 必须是函数\n#### 2.2.6 同一个 promise 可以多次调用 `then` 方法\n\n- 2.2.6.1 当 promise 执行完成，所有的 `onFulfilled` 都必须按照其注册顺序执行\n- 2.2.6.2 当 promise 被拒绝，所有的 `onRejected` 都必须按照起注册顺序执行\n\n#### 2.2.7 `then` 必须返回一个新的 promise[3.3]\n\n```\npromise2 = promise1.then(onFulfilled, onRejected);\n```\n\n- 2.2.7.1 当 `onFulfilled` 或 `onRejected` renturn 一个 x，则执行 Promise 解析程序 [[Resolve]](promise2, x)\n- 2.2.7.2  当 `onFulfilled` 或 `onRejected` 抛出了一个异常 e，promise2 应当以 e 为 `reason` 被拒绝\n- 2.2.7.3 如果 `onFulfilled` 不是一个函数并且 promise1 已经 fulfilled，则 promise2 必须以 promise1 的值 fulfilled\n- 2.2.7.4 如果 `onRejected` 不是一个函数且 promise1 已经 rejected, 则 promise2 必须以相同的 reason 被拒绝\n\n### 2.3 promise 解析程序\n\nPromise 解析过程 是以一个 promise 和一个值做为参数的抽象过程，可表示为[[Resolve]](promise, x)。解析过程如下：\n\n#### 2.3.1 如果 x 和 promise1 相等，则跑错一个 TypeError\n#### 2.3.2 如果 x 是一个 promise，则根据其状态进行处理：\n\n- 2.3.2.1 如果 x 是 pending 状态，则直到 x fulfilled 或 reject 后才能改变状态\n- 2.3.2.2 如果 x 是 fulfilled 状态，将 x 的值用于 fulfill promise\n- 2.3.2.3 如果 x 是 rejected 状态，将x的原因用于reject promise\n\n#### 2.3.3 如果 x 是一个对象或一个函数\n\n- 2.3.3.1 `let then = x.then` [3.5]\n- 2.3.3.2 如果在取 x.then 的值的时候抛出了一个异常 e，则 reject promsie，并且 reason 是 e\n- 2.3.3.3 如果 then 是一个函数，以 x 为 this 调用 then 函数，并且第一个参数是 resolvePromise，第二个参数是 rejectPromise：\n    - 2.3.3.3.1 当 resolvePromise 被以 y 为参数调用, 执行 [[Resolve]](promise, y)\n    - 2.3.3.3.2 当 rejectPromise 被以 r 为参数调用, 则以 r 为原因将 promise 拒绝\n    - 2.3.3.3.3 如果 resolvePromise 和 rejectPromise 都被调用了，或者被调用了多次，则只第一次有效，后面的忽略\n    - 2.3.3.3.4 如果在调用then时抛出了异常，则：\n\t    - 2.3.3.3.4.1 如果 resolvePromise 或 rejectPromise 已经被调用了，则忽略\n\t    - 2.3.3.3.4.2 否则, 以 e 为 reason 将 promise 拒绝\n- 2.3.2.4 如果 then 不是一个函数，则 以 x 为值 fulfill promise。\n\n#### 2.3.4 如果 x 不是对象也不是函数，则以x为值 fulfill promise。\n\n---\n\n> 上述则是 promise A+ 规范中必须的规范，其他可以参考原英文文档，如有笔误可联系笔者进行更正\n> 近期实现完轻量级 promise 后会在更新此文\n\n\n\n\n","source":"_posts/promiseaplus.md","raw":"---\ntitle: promise A+ 规范解读及轻量级实现\ndate: 2018-08-25 13:09:13\ntags: ['javascript', 'promise']\n---\n\n> promise A+ 规范文档：https://promisesaplus.com/\n\n之所以要遵循 promise A+ 规范，是由于开源以及开发中单独写的 promise 库太多了，为了每种 promise 库可以相互兼容或调用，所以要遵守规范。\n\n## demo 代码\n\n笔者自己根据 promise 规范写了一个[轻量级 promise](https://github.com/pearlwang1106/promise)\n\n下面对 promise A+ 规范进行解读\n\n## 1. 术语\n\n1. `promise` 是一个有 `then` 方法的符合 promise A+ 规范的对象或者函数\n2. `thenable` 是定义了then 方法的对象或函数\n3. `value` 是任何Javascript值（比如 undefined，一个 thenable 或一个 promise 等）\n4. `exception` 是通过 throw 抛出的表达式的值\n5. `reason` 是一个用于描述 Promise 被拒绝原因的值\n\n## 2. 规定\n\n### 2.1 promise 状态\n\n一个 promise 只有**三种**状态：pending, fulfilled, 或 rejected\n\n#### 2.1.1 promise 是 pending 状态：\n\n- 2.1.1.1 既可以转换成 fulfilled 状态，也可以转换成 rejected 状态\n\n#### 2.1.2 promise 是 fulfilled 状态：\n\n- 2.1.2.1 不能转换成其他状态\n- 2.1.2.2 必须有一个不可以改变(===)的 `value`\n\n#### 2.1.3 promise 是 rejected 状态：\n\n- 2.1.3.1 不能转换成其他状态\n- 2.1.3.2 必须有一个不可以改变(===)的 `reason`\n\n### 2.2 then 方法\n\n一个 promise 必须有一个 then 方法用来返回这个 promise 当前或最终的 `value`，或者拒绝的 `reason`。\n\n一个 promise 的 `then` 方法有两个入参：\n\n```\npromise.then(onFulfilled, onRejected)\n```\n\n#### 2.2.1 onFulfilled 和 onRejected 都是可选参数\n\n- 2.2.1.1 如果 `onFulfilled` 不是一个函数，那么它就必须被忽略。\n- 2.2.1.2 如果 `onRejected` 不是一个函数，那么它就必须被忽略。\n\n#### 2.2.2 如果 `onFulfilled` 是一个函数\n\n- 2.2.2.1 必须在 promise 完成后调用，同时用 promise 的 `value` 作为他的第一个参数\n- 2.2.2.2 严禁在 promise 完成之前调用\n- 2.2.2.3 最多只能调用一次\n\n#### 2.2.3 如果 `onRejected` 是一个函数\n\n- 2.2.3.1 必须在 promise reject 后调用，同时用 promise 的 `reason` 作为他的第一个参数\n- 2.2.3.2 严禁在 promise reject 之前调用\n- 2.2.3.3 最多只能调用一次\n\n#### 2.2.4 严禁在当前执行上下文（[execution context](https://es5.github.io/#x10.3)）中调用 `onFulfilled` 或 `onRejected` [3.1]\n\n#### 2.2.5 【必须】`onFulfilled` 或 `onRejected` 必须是函数\n#### 2.2.6 同一个 promise 可以多次调用 `then` 方法\n\n- 2.2.6.1 当 promise 执行完成，所有的 `onFulfilled` 都必须按照其注册顺序执行\n- 2.2.6.2 当 promise 被拒绝，所有的 `onRejected` 都必须按照起注册顺序执行\n\n#### 2.2.7 `then` 必须返回一个新的 promise[3.3]\n\n```\npromise2 = promise1.then(onFulfilled, onRejected);\n```\n\n- 2.2.7.1 当 `onFulfilled` 或 `onRejected` renturn 一个 x，则执行 Promise 解析程序 [[Resolve]](promise2, x)\n- 2.2.7.2  当 `onFulfilled` 或 `onRejected` 抛出了一个异常 e，promise2 应当以 e 为 `reason` 被拒绝\n- 2.2.7.3 如果 `onFulfilled` 不是一个函数并且 promise1 已经 fulfilled，则 promise2 必须以 promise1 的值 fulfilled\n- 2.2.7.4 如果 `onRejected` 不是一个函数且 promise1 已经 rejected, 则 promise2 必须以相同的 reason 被拒绝\n\n### 2.3 promise 解析程序\n\nPromise 解析过程 是以一个 promise 和一个值做为参数的抽象过程，可表示为[[Resolve]](promise, x)。解析过程如下：\n\n#### 2.3.1 如果 x 和 promise1 相等，则跑错一个 TypeError\n#### 2.3.2 如果 x 是一个 promise，则根据其状态进行处理：\n\n- 2.3.2.1 如果 x 是 pending 状态，则直到 x fulfilled 或 reject 后才能改变状态\n- 2.3.2.2 如果 x 是 fulfilled 状态，将 x 的值用于 fulfill promise\n- 2.3.2.3 如果 x 是 rejected 状态，将x的原因用于reject promise\n\n#### 2.3.3 如果 x 是一个对象或一个函数\n\n- 2.3.3.1 `let then = x.then` [3.5]\n- 2.3.3.2 如果在取 x.then 的值的时候抛出了一个异常 e，则 reject promsie，并且 reason 是 e\n- 2.3.3.3 如果 then 是一个函数，以 x 为 this 调用 then 函数，并且第一个参数是 resolvePromise，第二个参数是 rejectPromise：\n    - 2.3.3.3.1 当 resolvePromise 被以 y 为参数调用, 执行 [[Resolve]](promise, y)\n    - 2.3.3.3.2 当 rejectPromise 被以 r 为参数调用, 则以 r 为原因将 promise 拒绝\n    - 2.3.3.3.3 如果 resolvePromise 和 rejectPromise 都被调用了，或者被调用了多次，则只第一次有效，后面的忽略\n    - 2.3.3.3.4 如果在调用then时抛出了异常，则：\n\t    - 2.3.3.3.4.1 如果 resolvePromise 或 rejectPromise 已经被调用了，则忽略\n\t    - 2.3.3.3.4.2 否则, 以 e 为 reason 将 promise 拒绝\n- 2.3.2.4 如果 then 不是一个函数，则 以 x 为值 fulfill promise。\n\n#### 2.3.4 如果 x 不是对象也不是函数，则以x为值 fulfill promise。\n\n---\n\n> 上述则是 promise A+ 规范中必须的规范，其他可以参考原英文文档，如有笔误可联系笔者进行更正\n> 近期实现完轻量级 promise 后会在更新此文\n\n\n\n\n","slug":"promiseaplus","published":1,"updated":"2018-08-26T14:38:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetnz00188b05pka7qlrq","content":"<blockquote>\n<p>promise A+ 规范文档：<a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">https://promisesaplus.com/</a></p>\n</blockquote>\n<p>之所以要遵循 promise A+ 规范，是由于开源以及开发中单独写的 promise 库太多了，为了每种 promise 库可以相互兼容或调用，所以要遵守规范。</p>\n<h2 id=\"demo-代码\"><a href=\"#demo-代码\" class=\"headerlink\" title=\"demo 代码\"></a>demo 代码</h2><p>笔者自己根据 promise 规范写了一个<a href=\"https://github.com/pearlwang1106/promise\" target=\"_blank\" rel=\"noopener\">轻量级 promise</a></p>\n<p>下面对 promise A+ 规范进行解读</p>\n<h2 id=\"1-术语\"><a href=\"#1-术语\" class=\"headerlink\" title=\"1. 术语\"></a>1. 术语</h2><ol>\n<li><code>promise</code> 是一个有 <code>then</code> 方法的符合 promise A+ 规范的对象或者函数</li>\n<li><code>thenable</code> 是定义了then 方法的对象或函数</li>\n<li><code>value</code> 是任何Javascript值（比如 undefined，一个 thenable 或一个 promise 等）</li>\n<li><code>exception</code> 是通过 throw 抛出的表达式的值</li>\n<li><code>reason</code> 是一个用于描述 Promise 被拒绝原因的值</li>\n</ol>\n<h2 id=\"2-规定\"><a href=\"#2-规定\" class=\"headerlink\" title=\"2. 规定\"></a>2. 规定</h2><h3 id=\"2-1-promise-状态\"><a href=\"#2-1-promise-状态\" class=\"headerlink\" title=\"2.1 promise 状态\"></a>2.1 promise 状态</h3><p>一个 promise 只有<strong>三种</strong>状态：pending, fulfilled, 或 rejected</p>\n<h4 id=\"2-1-1-promise-是-pending-状态：\"><a href=\"#2-1-1-promise-是-pending-状态：\" class=\"headerlink\" title=\"2.1.1 promise 是 pending 状态：\"></a>2.1.1 promise 是 pending 状态：</h4><ul>\n<li>2.1.1.1 既可以转换成 fulfilled 状态，也可以转换成 rejected 状态</li>\n</ul>\n<h4 id=\"2-1-2-promise-是-fulfilled-状态：\"><a href=\"#2-1-2-promise-是-fulfilled-状态：\" class=\"headerlink\" title=\"2.1.2 promise 是 fulfilled 状态：\"></a>2.1.2 promise 是 fulfilled 状态：</h4><ul>\n<li>2.1.2.1 不能转换成其他状态</li>\n<li>2.1.2.2 必须有一个不可以改变(===)的 <code>value</code></li>\n</ul>\n<h4 id=\"2-1-3-promise-是-rejected-状态：\"><a href=\"#2-1-3-promise-是-rejected-状态：\" class=\"headerlink\" title=\"2.1.3 promise 是 rejected 状态：\"></a>2.1.3 promise 是 rejected 状态：</h4><ul>\n<li>2.1.3.1 不能转换成其他状态</li>\n<li>2.1.3.2 必须有一个不可以改变(===)的 <code>reason</code></li>\n</ul>\n<h3 id=\"2-2-then-方法\"><a href=\"#2-2-then-方法\" class=\"headerlink\" title=\"2.2 then 方法\"></a>2.2 then 方法</h3><p>一个 promise 必须有一个 then 方法用来返回这个 promise 当前或最终的 <code>value</code>，或者拒绝的 <code>reason</code>。</p>\n<p>一个 promise 的 <code>then</code> 方法有两个入参：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-1-onFulfilled-和-onRejected-都是可选参数\"><a href=\"#2-2-1-onFulfilled-和-onRejected-都是可选参数\" class=\"headerlink\" title=\"2.2.1 onFulfilled 和 onRejected 都是可选参数\"></a>2.2.1 onFulfilled 和 onRejected 都是可选参数</h4><ul>\n<li>2.2.1.1 如果 <code>onFulfilled</code> 不是一个函数，那么它就必须被忽略。</li>\n<li>2.2.1.2 如果 <code>onRejected</code> 不是一个函数，那么它就必须被忽略。</li>\n</ul>\n<h4 id=\"2-2-2-如果-onFulfilled-是一个函数\"><a href=\"#2-2-2-如果-onFulfilled-是一个函数\" class=\"headerlink\" title=\"2.2.2 如果 onFulfilled 是一个函数\"></a>2.2.2 如果 <code>onFulfilled</code> 是一个函数</h4><ul>\n<li>2.2.2.1 必须在 promise 完成后调用，同时用 promise 的 <code>value</code> 作为他的第一个参数</li>\n<li>2.2.2.2 严禁在 promise 完成之前调用</li>\n<li>2.2.2.3 最多只能调用一次</li>\n</ul>\n<h4 id=\"2-2-3-如果-onRejected-是一个函数\"><a href=\"#2-2-3-如果-onRejected-是一个函数\" class=\"headerlink\" title=\"2.2.3 如果 onRejected 是一个函数\"></a>2.2.3 如果 <code>onRejected</code> 是一个函数</h4><ul>\n<li>2.2.3.1 必须在 promise reject 后调用，同时用 promise 的 <code>reason</code> 作为他的第一个参数</li>\n<li>2.2.3.2 严禁在 promise reject 之前调用</li>\n<li>2.2.3.3 最多只能调用一次</li>\n</ul>\n<h4 id=\"2-2-4-严禁在当前执行上下文（execution-context）中调用-onFulfilled-或-onRejected-3-1\"><a href=\"#2-2-4-严禁在当前执行上下文（execution-context）中调用-onFulfilled-或-onRejected-3-1\" class=\"headerlink\" title=\"2.2.4 严禁在当前执行上下文（execution context）中调用 onFulfilled 或 onRejected [3.1]\"></a>2.2.4 严禁在当前执行上下文（<a href=\"https://es5.github.io/#x10.3\" target=\"_blank\" rel=\"noopener\">execution context</a>）中调用 <code>onFulfilled</code> 或 <code>onRejected</code> [3.1]</h4><h4 id=\"2-2-5-【必须】onFulfilled-或-onRejected-必须是函数\"><a href=\"#2-2-5-【必须】onFulfilled-或-onRejected-必须是函数\" class=\"headerlink\" title=\"2.2.5 【必须】onFulfilled 或 onRejected 必须是函数\"></a>2.2.5 【必须】<code>onFulfilled</code> 或 <code>onRejected</code> 必须是函数</h4><h4 id=\"2-2-6-同一个-promise-可以多次调用-then-方法\"><a href=\"#2-2-6-同一个-promise-可以多次调用-then-方法\" class=\"headerlink\" title=\"2.2.6 同一个 promise 可以多次调用 then 方法\"></a>2.2.6 同一个 promise 可以多次调用 <code>then</code> 方法</h4><ul>\n<li>2.2.6.1 当 promise 执行完成，所有的 <code>onFulfilled</code> 都必须按照其注册顺序执行</li>\n<li>2.2.6.2 当 promise 被拒绝，所有的 <code>onRejected</code> 都必须按照起注册顺序执行</li>\n</ul>\n<h4 id=\"2-2-7-then-必须返回一个新的-promise-3-3\"><a href=\"#2-2-7-then-必须返回一个新的-promise-3-3\" class=\"headerlink\" title=\"2.2.7 then 必须返回一个新的 promise[3.3]\"></a>2.2.7 <code>then</code> 必须返回一个新的 promise[3.3]</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise2 = promise1.then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.2.7.1 当 <code>onFulfilled</code> 或 <code>onRejected</code> renturn 一个 x，则执行 Promise 解析程序 <a href=\"promise2, x\">[Resolve]</a></li>\n<li>2.2.7.2  当 <code>onFulfilled</code> 或 <code>onRejected</code> 抛出了一个异常 e，promise2 应当以 e 为 <code>reason</code> 被拒绝</li>\n<li>2.2.7.3 如果 <code>onFulfilled</code> 不是一个函数并且 promise1 已经 fulfilled，则 promise2 必须以 promise1 的值 fulfilled</li>\n<li>2.2.7.4 如果 <code>onRejected</code> 不是一个函数且 promise1 已经 rejected, 则 promise2 必须以相同的 reason 被拒绝</li>\n</ul>\n<h3 id=\"2-3-promise-解析程序\"><a href=\"#2-3-promise-解析程序\" class=\"headerlink\" title=\"2.3 promise 解析程序\"></a>2.3 promise 解析程序</h3><p>Promise 解析过程 是以一个 promise 和一个值做为参数的抽象过程，可表示为<a href=\"promise, x\">[Resolve]</a>。解析过程如下：</p>\n<h4 id=\"2-3-1-如果-x-和-promise1-相等，则跑错一个-TypeError\"><a href=\"#2-3-1-如果-x-和-promise1-相等，则跑错一个-TypeError\" class=\"headerlink\" title=\"2.3.1 如果 x 和 promise1 相等，则跑错一个 TypeError\"></a>2.3.1 如果 x 和 promise1 相等，则跑错一个 TypeError</h4><h4 id=\"2-3-2-如果-x-是一个-promise，则根据其状态进行处理：\"><a href=\"#2-3-2-如果-x-是一个-promise，则根据其状态进行处理：\" class=\"headerlink\" title=\"2.3.2 如果 x 是一个 promise，则根据其状态进行处理：\"></a>2.3.2 如果 x 是一个 promise，则根据其状态进行处理：</h4><ul>\n<li>2.3.2.1 如果 x 是 pending 状态，则直到 x fulfilled 或 reject 后才能改变状态</li>\n<li>2.3.2.2 如果 x 是 fulfilled 状态，将 x 的值用于 fulfill promise</li>\n<li>2.3.2.3 如果 x 是 rejected 状态，将x的原因用于reject promise</li>\n</ul>\n<h4 id=\"2-3-3-如果-x-是一个对象或一个函数\"><a href=\"#2-3-3-如果-x-是一个对象或一个函数\" class=\"headerlink\" title=\"2.3.3 如果 x 是一个对象或一个函数\"></a>2.3.3 如果 x 是一个对象或一个函数</h4><ul>\n<li>2.3.3.1 <code>let then = x.then</code> [3.5]</li>\n<li>2.3.3.2 如果在取 x.then 的值的时候抛出了一个异常 e，则 reject promsie，并且 reason 是 e</li>\n<li>2.3.3.3 如果 then 是一个函数，以 x 为 this 调用 then 函数，并且第一个参数是 resolvePromise，第二个参数是 rejectPromise：<ul>\n<li>2.3.3.3.1 当 resolvePromise 被以 y 为参数调用, 执行 <a href=\"promise, y\">[Resolve]</a></li>\n<li>2.3.3.3.2 当 rejectPromise 被以 r 为参数调用, 则以 r 为原因将 promise 拒绝</li>\n<li>2.3.3.3.3 如果 resolvePromise 和 rejectPromise 都被调用了，或者被调用了多次，则只第一次有效，后面的忽略</li>\n<li>2.3.3.3.4 如果在调用then时抛出了异常，则：<ul>\n<li>2.3.3.3.4.1 如果 resolvePromise 或 rejectPromise 已经被调用了，则忽略</li>\n<li>2.3.3.3.4.2 否则, 以 e 为 reason 将 promise 拒绝</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3.2.4 如果 then 不是一个函数，则 以 x 为值 fulfill promise。</li>\n</ul>\n<h4 id=\"2-3-4-如果-x-不是对象也不是函数，则以x为值-fulfill-promise。\"><a href=\"#2-3-4-如果-x-不是对象也不是函数，则以x为值-fulfill-promise。\" class=\"headerlink\" title=\"2.3.4 如果 x 不是对象也不是函数，则以x为值 fulfill promise。\"></a>2.3.4 如果 x 不是对象也不是函数，则以x为值 fulfill promise。</h4><hr>\n<blockquote>\n<p>上述则是 promise A+ 规范中必须的规范，其他可以参考原英文文档，如有笔误可联系笔者进行更正<br>近期实现完轻量级 promise 后会在更新此文</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>promise A+ 规范文档：<a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">https://promisesaplus.com/</a></p>\n</blockquote>\n<p>之所以要遵循 promise A+ 规范，是由于开源以及开发中单独写的 promise 库太多了，为了每种 promise 库可以相互兼容或调用，所以要遵守规范。</p>\n<h2 id=\"demo-代码\"><a href=\"#demo-代码\" class=\"headerlink\" title=\"demo 代码\"></a>demo 代码</h2><p>笔者自己根据 promise 规范写了一个<a href=\"https://github.com/pearlwang1106/promise\" target=\"_blank\" rel=\"noopener\">轻量级 promise</a></p>\n<p>下面对 promise A+ 规范进行解读</p>\n<h2 id=\"1-术语\"><a href=\"#1-术语\" class=\"headerlink\" title=\"1. 术语\"></a>1. 术语</h2><ol>\n<li><code>promise</code> 是一个有 <code>then</code> 方法的符合 promise A+ 规范的对象或者函数</li>\n<li><code>thenable</code> 是定义了then 方法的对象或函数</li>\n<li><code>value</code> 是任何Javascript值（比如 undefined，一个 thenable 或一个 promise 等）</li>\n<li><code>exception</code> 是通过 throw 抛出的表达式的值</li>\n<li><code>reason</code> 是一个用于描述 Promise 被拒绝原因的值</li>\n</ol>\n<h2 id=\"2-规定\"><a href=\"#2-规定\" class=\"headerlink\" title=\"2. 规定\"></a>2. 规定</h2><h3 id=\"2-1-promise-状态\"><a href=\"#2-1-promise-状态\" class=\"headerlink\" title=\"2.1 promise 状态\"></a>2.1 promise 状态</h3><p>一个 promise 只有<strong>三种</strong>状态：pending, fulfilled, 或 rejected</p>\n<h4 id=\"2-1-1-promise-是-pending-状态：\"><a href=\"#2-1-1-promise-是-pending-状态：\" class=\"headerlink\" title=\"2.1.1 promise 是 pending 状态：\"></a>2.1.1 promise 是 pending 状态：</h4><ul>\n<li>2.1.1.1 既可以转换成 fulfilled 状态，也可以转换成 rejected 状态</li>\n</ul>\n<h4 id=\"2-1-2-promise-是-fulfilled-状态：\"><a href=\"#2-1-2-promise-是-fulfilled-状态：\" class=\"headerlink\" title=\"2.1.2 promise 是 fulfilled 状态：\"></a>2.1.2 promise 是 fulfilled 状态：</h4><ul>\n<li>2.1.2.1 不能转换成其他状态</li>\n<li>2.1.2.2 必须有一个不可以改变(===)的 <code>value</code></li>\n</ul>\n<h4 id=\"2-1-3-promise-是-rejected-状态：\"><a href=\"#2-1-3-promise-是-rejected-状态：\" class=\"headerlink\" title=\"2.1.3 promise 是 rejected 状态：\"></a>2.1.3 promise 是 rejected 状态：</h4><ul>\n<li>2.1.3.1 不能转换成其他状态</li>\n<li>2.1.3.2 必须有一个不可以改变(===)的 <code>reason</code></li>\n</ul>\n<h3 id=\"2-2-then-方法\"><a href=\"#2-2-then-方法\" class=\"headerlink\" title=\"2.2 then 方法\"></a>2.2 then 方法</h3><p>一个 promise 必须有一个 then 方法用来返回这个 promise 当前或最终的 <code>value</code>，或者拒绝的 <code>reason</code>。</p>\n<p>一个 promise 的 <code>then</code> 方法有两个入参：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-1-onFulfilled-和-onRejected-都是可选参数\"><a href=\"#2-2-1-onFulfilled-和-onRejected-都是可选参数\" class=\"headerlink\" title=\"2.2.1 onFulfilled 和 onRejected 都是可选参数\"></a>2.2.1 onFulfilled 和 onRejected 都是可选参数</h4><ul>\n<li>2.2.1.1 如果 <code>onFulfilled</code> 不是一个函数，那么它就必须被忽略。</li>\n<li>2.2.1.2 如果 <code>onRejected</code> 不是一个函数，那么它就必须被忽略。</li>\n</ul>\n<h4 id=\"2-2-2-如果-onFulfilled-是一个函数\"><a href=\"#2-2-2-如果-onFulfilled-是一个函数\" class=\"headerlink\" title=\"2.2.2 如果 onFulfilled 是一个函数\"></a>2.2.2 如果 <code>onFulfilled</code> 是一个函数</h4><ul>\n<li>2.2.2.1 必须在 promise 完成后调用，同时用 promise 的 <code>value</code> 作为他的第一个参数</li>\n<li>2.2.2.2 严禁在 promise 完成之前调用</li>\n<li>2.2.2.3 最多只能调用一次</li>\n</ul>\n<h4 id=\"2-2-3-如果-onRejected-是一个函数\"><a href=\"#2-2-3-如果-onRejected-是一个函数\" class=\"headerlink\" title=\"2.2.3 如果 onRejected 是一个函数\"></a>2.2.3 如果 <code>onRejected</code> 是一个函数</h4><ul>\n<li>2.2.3.1 必须在 promise reject 后调用，同时用 promise 的 <code>reason</code> 作为他的第一个参数</li>\n<li>2.2.3.2 严禁在 promise reject 之前调用</li>\n<li>2.2.3.3 最多只能调用一次</li>\n</ul>\n<h4 id=\"2-2-4-严禁在当前执行上下文（execution-context）中调用-onFulfilled-或-onRejected-3-1\"><a href=\"#2-2-4-严禁在当前执行上下文（execution-context）中调用-onFulfilled-或-onRejected-3-1\" class=\"headerlink\" title=\"2.2.4 严禁在当前执行上下文（execution context）中调用 onFulfilled 或 onRejected [3.1]\"></a>2.2.4 严禁在当前执行上下文（<a href=\"https://es5.github.io/#x10.3\" target=\"_blank\" rel=\"noopener\">execution context</a>）中调用 <code>onFulfilled</code> 或 <code>onRejected</code> [3.1]</h4><h4 id=\"2-2-5-【必须】onFulfilled-或-onRejected-必须是函数\"><a href=\"#2-2-5-【必须】onFulfilled-或-onRejected-必须是函数\" class=\"headerlink\" title=\"2.2.5 【必须】onFulfilled 或 onRejected 必须是函数\"></a>2.2.5 【必须】<code>onFulfilled</code> 或 <code>onRejected</code> 必须是函数</h4><h4 id=\"2-2-6-同一个-promise-可以多次调用-then-方法\"><a href=\"#2-2-6-同一个-promise-可以多次调用-then-方法\" class=\"headerlink\" title=\"2.2.6 同一个 promise 可以多次调用 then 方法\"></a>2.2.6 同一个 promise 可以多次调用 <code>then</code> 方法</h4><ul>\n<li>2.2.6.1 当 promise 执行完成，所有的 <code>onFulfilled</code> 都必须按照其注册顺序执行</li>\n<li>2.2.6.2 当 promise 被拒绝，所有的 <code>onRejected</code> 都必须按照起注册顺序执行</li>\n</ul>\n<h4 id=\"2-2-7-then-必须返回一个新的-promise-3-3\"><a href=\"#2-2-7-then-必须返回一个新的-promise-3-3\" class=\"headerlink\" title=\"2.2.7 then 必须返回一个新的 promise[3.3]\"></a>2.2.7 <code>then</code> 必须返回一个新的 promise[3.3]</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise2 = promise1.then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.2.7.1 当 <code>onFulfilled</code> 或 <code>onRejected</code> renturn 一个 x，则执行 Promise 解析程序 <a href=\"promise2, x\">[Resolve]</a></li>\n<li>2.2.7.2  当 <code>onFulfilled</code> 或 <code>onRejected</code> 抛出了一个异常 e，promise2 应当以 e 为 <code>reason</code> 被拒绝</li>\n<li>2.2.7.3 如果 <code>onFulfilled</code> 不是一个函数并且 promise1 已经 fulfilled，则 promise2 必须以 promise1 的值 fulfilled</li>\n<li>2.2.7.4 如果 <code>onRejected</code> 不是一个函数且 promise1 已经 rejected, 则 promise2 必须以相同的 reason 被拒绝</li>\n</ul>\n<h3 id=\"2-3-promise-解析程序\"><a href=\"#2-3-promise-解析程序\" class=\"headerlink\" title=\"2.3 promise 解析程序\"></a>2.3 promise 解析程序</h3><p>Promise 解析过程 是以一个 promise 和一个值做为参数的抽象过程，可表示为<a href=\"promise, x\">[Resolve]</a>。解析过程如下：</p>\n<h4 id=\"2-3-1-如果-x-和-promise1-相等，则跑错一个-TypeError\"><a href=\"#2-3-1-如果-x-和-promise1-相等，则跑错一个-TypeError\" class=\"headerlink\" title=\"2.3.1 如果 x 和 promise1 相等，则跑错一个 TypeError\"></a>2.3.1 如果 x 和 promise1 相等，则跑错一个 TypeError</h4><h4 id=\"2-3-2-如果-x-是一个-promise，则根据其状态进行处理：\"><a href=\"#2-3-2-如果-x-是一个-promise，则根据其状态进行处理：\" class=\"headerlink\" title=\"2.3.2 如果 x 是一个 promise，则根据其状态进行处理：\"></a>2.3.2 如果 x 是一个 promise，则根据其状态进行处理：</h4><ul>\n<li>2.3.2.1 如果 x 是 pending 状态，则直到 x fulfilled 或 reject 后才能改变状态</li>\n<li>2.3.2.2 如果 x 是 fulfilled 状态，将 x 的值用于 fulfill promise</li>\n<li>2.3.2.3 如果 x 是 rejected 状态，将x的原因用于reject promise</li>\n</ul>\n<h4 id=\"2-3-3-如果-x-是一个对象或一个函数\"><a href=\"#2-3-3-如果-x-是一个对象或一个函数\" class=\"headerlink\" title=\"2.3.3 如果 x 是一个对象或一个函数\"></a>2.3.3 如果 x 是一个对象或一个函数</h4><ul>\n<li>2.3.3.1 <code>let then = x.then</code> [3.5]</li>\n<li>2.3.3.2 如果在取 x.then 的值的时候抛出了一个异常 e，则 reject promsie，并且 reason 是 e</li>\n<li>2.3.3.3 如果 then 是一个函数，以 x 为 this 调用 then 函数，并且第一个参数是 resolvePromise，第二个参数是 rejectPromise：<ul>\n<li>2.3.3.3.1 当 resolvePromise 被以 y 为参数调用, 执行 <a href=\"promise, y\">[Resolve]</a></li>\n<li>2.3.3.3.2 当 rejectPromise 被以 r 为参数调用, 则以 r 为原因将 promise 拒绝</li>\n<li>2.3.3.3.3 如果 resolvePromise 和 rejectPromise 都被调用了，或者被调用了多次，则只第一次有效，后面的忽略</li>\n<li>2.3.3.3.4 如果在调用then时抛出了异常，则：<ul>\n<li>2.3.3.3.4.1 如果 resolvePromise 或 rejectPromise 已经被调用了，则忽略</li>\n<li>2.3.3.3.4.2 否则, 以 e 为 reason 将 promise 拒绝</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3.2.4 如果 then 不是一个函数，则 以 x 为值 fulfill promise。</li>\n</ul>\n<h4 id=\"2-3-4-如果-x-不是对象也不是函数，则以x为值-fulfill-promise。\"><a href=\"#2-3-4-如果-x-不是对象也不是函数，则以x为值-fulfill-promise。\" class=\"headerlink\" title=\"2.3.4 如果 x 不是对象也不是函数，则以x为值 fulfill promise。\"></a>2.3.4 如果 x 不是对象也不是函数，则以x为值 fulfill promise。</h4><hr>\n<blockquote>\n<p>上述则是 promise A+ 规范中必须的规范，其他可以参考原英文文档，如有笔误可联系笔者进行更正<br>近期实现完轻量级 promise 后会在更新此文</p>\n</blockquote>\n"},{"title":"喜欢的话","date":"2018-09-29T11:14:22.000Z","_content":"\n> 每日一言: u can u bb\n\n今天一直在看如何把项目中的 vue cli 从 2.x 升级到 3.x, 还没有搞定, 昨天打车回去路过北京电影学院, 突然想起两年前的那个夜晚, 同事们聚餐后第二场, 找了半天找到一个偏僻的 ktv. 同去的还有马上要生宝宝的, 就是那个晚上, 所有人都放下介怀, 玩的痛苦淋漓. 时间易逝, 我们都不再是从前的我们.  \n\n所以, 现在, 就是想写几句喜欢的话\n\n- 小四\n\n```\n我左手是过目不忘的萤火, 右手是十年一个漫长的打坐\n```\n\n- 思达\n\n```\n诗人在孤独, 我在吃饭\n```\n\n- 王小波\n\n```\n似水流年是一个人所有的一切, 只有这个东西, 才整整归你所有\n```\n","source":"_posts/phrase.md","raw":"---\ntitle: 喜欢的话\ndate: 2018-09-29 19:14:22\ntags: ['随笔', '碎片']\n---\n\n> 每日一言: u can u bb\n\n今天一直在看如何把项目中的 vue cli 从 2.x 升级到 3.x, 还没有搞定, 昨天打车回去路过北京电影学院, 突然想起两年前的那个夜晚, 同事们聚餐后第二场, 找了半天找到一个偏僻的 ktv. 同去的还有马上要生宝宝的, 就是那个晚上, 所有人都放下介怀, 玩的痛苦淋漓. 时间易逝, 我们都不再是从前的我们.  \n\n所以, 现在, 就是想写几句喜欢的话\n\n- 小四\n\n```\n我左手是过目不忘的萤火, 右手是十年一个漫长的打坐\n```\n\n- 思达\n\n```\n诗人在孤独, 我在吃饭\n```\n\n- 王小波\n\n```\n似水流年是一个人所有的一切, 只有这个东西, 才整整归你所有\n```\n","slug":"phrase","published":1,"updated":"2018-09-29T11:28:16.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvneto1001a8b05dzycpp5g","content":"<blockquote>\n<p>每日一言: u can u bb</p>\n</blockquote>\n<p>今天一直在看如何把项目中的 vue cli 从 2.x 升级到 3.x, 还没有搞定, 昨天打车回去路过北京电影学院, 突然想起两年前的那个夜晚, 同事们聚餐后第二场, 找了半天找到一个偏僻的 ktv. 同去的还有马上要生宝宝的, 就是那个晚上, 所有人都放下介怀, 玩的痛苦淋漓. 时间易逝, 我们都不再是从前的我们.  </p>\n<p>所以, 现在, 就是想写几句喜欢的话</p>\n<ul>\n<li>小四</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我左手是过目不忘的萤火, 右手是十年一个漫长的打坐</span><br></pre></td></tr></table></figure>\n<ul>\n<li>思达</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">诗人在孤独, 我在吃饭</span><br></pre></td></tr></table></figure>\n<ul>\n<li>王小波</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">似水流年是一个人所有的一切, 只有这个东西, 才整整归你所有</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言: u can u bb</p>\n</blockquote>\n<p>今天一直在看如何把项目中的 vue cli 从 2.x 升级到 3.x, 还没有搞定, 昨天打车回去路过北京电影学院, 突然想起两年前的那个夜晚, 同事们聚餐后第二场, 找了半天找到一个偏僻的 ktv. 同去的还有马上要生宝宝的, 就是那个晚上, 所有人都放下介怀, 玩的痛苦淋漓. 时间易逝, 我们都不再是从前的我们.  </p>\n<p>所以, 现在, 就是想写几句喜欢的话</p>\n<ul>\n<li>小四</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我左手是过目不忘的萤火, 右手是十年一个漫长的打坐</span><br></pre></td></tr></table></figure>\n<ul>\n<li>思达</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">诗人在孤独, 我在吃饭</span><br></pre></td></tr></table></figure>\n<ul>\n<li>王小波</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">似水流年是一个人所有的一切, 只有这个东西, 才整整归你所有</span><br></pre></td></tr></table></figure>\n"},{"title":"伪元素 vs 伪类","date":"2018-08-28T05:24:33.000Z","_content":"\n> 原文链接：https://css-tricks.com/to-double-colon-or-not-do-double-colon/\n\n看了一篇讲双冒号和单冒号的博文，感觉讲的蛮细致的，所以这里翻译出来，如有翻译有误的地方辛苦指正。\n\n## 问题\n\n试问：CSS 中的双冒号 `::before` 和 单冒号 `:before` 哪种是伪元素的正确表述方式？\n\n从技术角度讲，双冒号 `::before` 是正确的，但是这样并不意味着所有情况都用双冒号。\n\n\n## 定义\n\n- 双冒号选择器表示的是伪元素\n- 单冒号选择器表示的是伪选择器\n\n而 `::before` 肯定是表示伪元素，所以这里应该用双冒号。\n\n## 解释\n\n伪元素和伪选择器的用法经常会让人感到困惑，所以一般都是直接使用 `::before` 和 `::after`，这两者都是通过中页面添加新的元素来达到想要实现都页面效果。\n\n但是类似 `::first-letter` 这样都用法也是一个伪元素。所以我觉得它是用来选择页面上不存在的 HTML 元素中的一部分的。也就是说你想要选择的元素没有像 `<span>` 这样的标签包裹着，所以这 `first letter` 也可以认为是你要添加到页面上的一个元素。而伪选择器却不同，他们指向的都是页面中已经存在的元素，比如 `:nth-child(2)`。\n\n事实上，有一些特殊场景下不能通过双冒号来使用伪元素：\n\n- IE8 以下的IE浏览器只支持 `:before` 不支持 `::before`\n- 由于有大量站点使用了 `:before` 而浏览器的升级是向下兼容的，所以所有的现代浏览器都是支持这两种方式的\n- 少写一个字符也算是一种奖励吧\n\n听有些人说他们使用的 CSS 代码规范检查工具（或者自动化工具）要求必须使用单冒号。就我个人而言，无论选择哪种方式都是可以的。\n\n另一方面，有一个反面论点：\n\n- 单冒号伪元素是错误的，因为不会有伪元素是用单冒号的\n- 如果你认为这也是有区别的，不妨平时写代码的时候也按照正确的方式进行开发\n- 这些说的已经够混乱了，所以让我们按照正确的方法进行\n\n我已经通过配置我的自动化工具强制开发过程中使用双冒号了，因为我的开发过程中不会兼容到 IE8，所以目前开发中没有任何问题。\n","source":"_posts/pseudo.md","raw":"---\ntitle: 伪元素 vs 伪类\ndate: 2018-08-28 13:24:33\ntags: ['css', '伪元素', '伪类']\n---\n\n> 原文链接：https://css-tricks.com/to-double-colon-or-not-do-double-colon/\n\n看了一篇讲双冒号和单冒号的博文，感觉讲的蛮细致的，所以这里翻译出来，如有翻译有误的地方辛苦指正。\n\n## 问题\n\n试问：CSS 中的双冒号 `::before` 和 单冒号 `:before` 哪种是伪元素的正确表述方式？\n\n从技术角度讲，双冒号 `::before` 是正确的，但是这样并不意味着所有情况都用双冒号。\n\n\n## 定义\n\n- 双冒号选择器表示的是伪元素\n- 单冒号选择器表示的是伪选择器\n\n而 `::before` 肯定是表示伪元素，所以这里应该用双冒号。\n\n## 解释\n\n伪元素和伪选择器的用法经常会让人感到困惑，所以一般都是直接使用 `::before` 和 `::after`，这两者都是通过中页面添加新的元素来达到想要实现都页面效果。\n\n但是类似 `::first-letter` 这样都用法也是一个伪元素。所以我觉得它是用来选择页面上不存在的 HTML 元素中的一部分的。也就是说你想要选择的元素没有像 `<span>` 这样的标签包裹着，所以这 `first letter` 也可以认为是你要添加到页面上的一个元素。而伪选择器却不同，他们指向的都是页面中已经存在的元素，比如 `:nth-child(2)`。\n\n事实上，有一些特殊场景下不能通过双冒号来使用伪元素：\n\n- IE8 以下的IE浏览器只支持 `:before` 不支持 `::before`\n- 由于有大量站点使用了 `:before` 而浏览器的升级是向下兼容的，所以所有的现代浏览器都是支持这两种方式的\n- 少写一个字符也算是一种奖励吧\n\n听有些人说他们使用的 CSS 代码规范检查工具（或者自动化工具）要求必须使用单冒号。就我个人而言，无论选择哪种方式都是可以的。\n\n另一方面，有一个反面论点：\n\n- 单冒号伪元素是错误的，因为不会有伪元素是用单冒号的\n- 如果你认为这也是有区别的，不妨平时写代码的时候也按照正确的方式进行开发\n- 这些说的已经够混乱了，所以让我们按照正确的方法进行\n\n我已经通过配置我的自动化工具强制开发过程中使用双冒号了，因为我的开发过程中不会兼容到 IE8，所以目前开发中没有任何问题。\n","slug":"pseudo","published":1,"updated":"2018-09-12T02:17:10.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvneto2001b8b05tmwhbilf","content":"<blockquote>\n<p>原文链接：<a href=\"https://css-tricks.com/to-double-colon-or-not-do-double-colon/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/to-double-colon-or-not-do-double-colon/</a></p>\n</blockquote>\n<p>看了一篇讲双冒号和单冒号的博文，感觉讲的蛮细致的，所以这里翻译出来，如有翻译有误的地方辛苦指正。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>试问：CSS 中的双冒号 <code>::before</code> 和 单冒号 <code>:before</code> 哪种是伪元素的正确表述方式？</p>\n<p>从技术角度讲，双冒号 <code>::before</code> 是正确的，但是这样并不意味着所有情况都用双冒号。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ul>\n<li>双冒号选择器表示的是伪元素</li>\n<li>单冒号选择器表示的是伪选择器</li>\n</ul>\n<p>而 <code>::before</code> 肯定是表示伪元素，所以这里应该用双冒号。</p>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>伪元素和伪选择器的用法经常会让人感到困惑，所以一般都是直接使用 <code>::before</code> 和 <code>::after</code>，这两者都是通过中页面添加新的元素来达到想要实现都页面效果。</p>\n<p>但是类似 <code>::first-letter</code> 这样都用法也是一个伪元素。所以我觉得它是用来选择页面上不存在的 HTML 元素中的一部分的。也就是说你想要选择的元素没有像 <code>&lt;span&gt;</code> 这样的标签包裹着，所以这 <code>first letter</code> 也可以认为是你要添加到页面上的一个元素。而伪选择器却不同，他们指向的都是页面中已经存在的元素，比如 <code>:nth-child(2)</code>。</p>\n<p>事实上，有一些特殊场景下不能通过双冒号来使用伪元素：</p>\n<ul>\n<li>IE8 以下的IE浏览器只支持 <code>:before</code> 不支持 <code>::before</code></li>\n<li>由于有大量站点使用了 <code>:before</code> 而浏览器的升级是向下兼容的，所以所有的现代浏览器都是支持这两种方式的</li>\n<li>少写一个字符也算是一种奖励吧</li>\n</ul>\n<p>听有些人说他们使用的 CSS 代码规范检查工具（或者自动化工具）要求必须使用单冒号。就我个人而言，无论选择哪种方式都是可以的。</p>\n<p>另一方面，有一个反面论点：</p>\n<ul>\n<li>单冒号伪元素是错误的，因为不会有伪元素是用单冒号的</li>\n<li>如果你认为这也是有区别的，不妨平时写代码的时候也按照正确的方式进行开发</li>\n<li>这些说的已经够混乱了，所以让我们按照正确的方法进行</li>\n</ul>\n<p>我已经通过配置我的自动化工具强制开发过程中使用双冒号了，因为我的开发过程中不会兼容到 IE8，所以目前开发中没有任何问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>原文链接：<a href=\"https://css-tricks.com/to-double-colon-or-not-do-double-colon/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/to-double-colon-or-not-do-double-colon/</a></p>\n</blockquote>\n<p>看了一篇讲双冒号和单冒号的博文，感觉讲的蛮细致的，所以这里翻译出来，如有翻译有误的地方辛苦指正。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>试问：CSS 中的双冒号 <code>::before</code> 和 单冒号 <code>:before</code> 哪种是伪元素的正确表述方式？</p>\n<p>从技术角度讲，双冒号 <code>::before</code> 是正确的，但是这样并不意味着所有情况都用双冒号。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ul>\n<li>双冒号选择器表示的是伪元素</li>\n<li>单冒号选择器表示的是伪选择器</li>\n</ul>\n<p>而 <code>::before</code> 肯定是表示伪元素，所以这里应该用双冒号。</p>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>伪元素和伪选择器的用法经常会让人感到困惑，所以一般都是直接使用 <code>::before</code> 和 <code>::after</code>，这两者都是通过中页面添加新的元素来达到想要实现都页面效果。</p>\n<p>但是类似 <code>::first-letter</code> 这样都用法也是一个伪元素。所以我觉得它是用来选择页面上不存在的 HTML 元素中的一部分的。也就是说你想要选择的元素没有像 <code>&lt;span&gt;</code> 这样的标签包裹着，所以这 <code>first letter</code> 也可以认为是你要添加到页面上的一个元素。而伪选择器却不同，他们指向的都是页面中已经存在的元素，比如 <code>:nth-child(2)</code>。</p>\n<p>事实上，有一些特殊场景下不能通过双冒号来使用伪元素：</p>\n<ul>\n<li>IE8 以下的IE浏览器只支持 <code>:before</code> 不支持 <code>::before</code></li>\n<li>由于有大量站点使用了 <code>:before</code> 而浏览器的升级是向下兼容的，所以所有的现代浏览器都是支持这两种方式的</li>\n<li>少写一个字符也算是一种奖励吧</li>\n</ul>\n<p>听有些人说他们使用的 CSS 代码规范检查工具（或者自动化工具）要求必须使用单冒号。就我个人而言，无论选择哪种方式都是可以的。</p>\n<p>另一方面，有一个反面论点：</p>\n<ul>\n<li>单冒号伪元素是错误的，因为不会有伪元素是用单冒号的</li>\n<li>如果你认为这也是有区别的，不妨平时写代码的时候也按照正确的方式进行开发</li>\n<li>这些说的已经够混乱了，所以让我们按照正确的方法进行</li>\n</ul>\n<p>我已经通过配置我的自动化工具强制开发过程中使用双冒号了，因为我的开发过程中不会兼容到 IE8，所以目前开发中没有任何问题。</p>\n"},{"title":"【LeetCode】Single Number I && II && III","date":"2018-09-24T05:24:33.000Z","_content":"\n> 题目连接: \n> I:   https://leetcode.com/problems/single-number/description/\n> II:  https://leetcode.com/problems/single-number-ii/description/\n> III: https://leetcode.com/problems/single-number-iii/description/\n\n### 题目描述\n\n**Single Number I**: 给一个整数数组，数组中只有一个整数只出现一次，其他的整数分别出现两次\n\n- 输入：[4, 1, 2, 1, 2]\n- 输出：4\n\n**Single Number II**: 给一个整数数组，数组中只有一个整数只出现一次，其他的整数最少现两次\n\n- 输入：[2, 2, 3, 2]\n- 输出：3\n\n**Single Number III**: 给一个整数数组，求出数组中只出现一次的数组结果\n\n- 输入：[1, 2, 1, 3, 2, 5]\n- 输出：[3, 5]\n\n### 思路\n\n**Single Number I**: 最简单的方法是通过位运算，一次遍历即可\n**Single Number II**: \n\n- 第一种：从第一个元素开始向后找，找到所有重复的元素置空，双重循环时间复杂度要 O(n^2)\n- 第二种：空间换时间，一遍循环将每个数字出现的次数存到一个对象中（因为有负数的情况，所以用数组），最后将次数为 1 的返回\n\n**Single Number I**: 在 II 的基础上，返回数组即可\n\n### 代码\n\n**Single Number I**:\n\n```\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    var r = 0;\n    for(i = 0; i < nums.length; i++) {\n        r = r ^ nums[i];\n    }\n    return r;\n};\n```\n\n**Single Number II**:\n\n```\n/**\n * \n * 第一种\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    var f;\n    for(var i = 0; i < nums.length; i++) {\n        f = 0;\n        for(var j = i + 1; j < nums.length; j++) {\n            if (nums[j] === nums[i]) {\n                nums[j] = null;\n                f = 1;\n            }\n        }\n        if (f === 1) {\n                nums[i] = null;\n            }\n    }\n    for(var i = 0; i < nums.length; i++) {\n        if (nums[i] !== null) {\n            return nums[i]\n        }\n    }\n    \n};\n\n\n/**\n * 第二种\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    var a = {};\n    for(var i = 0; i < nums.length; i++) {\n        if(!!a[nums[i]]) {\n            a[nums[i]] += 1;\n        }\n        else {\n            a[nums[i]] = 1;\n        }\n    }\n    for(var i = 0; i < nums.length; i++) {\n        if(a[nums[i]] === 1) {\n            delete a;\n            return nums[i];\n        }\n    }\n    \n};\n```\n\n**Single Number III**:\n\n```\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar singleNumber = function(nums) {\n    var a = {};\n    var r = [];\n    for(var i = 0; i < nums.length; i++) {\n        if(!!a[nums[i]]) {\n            a[nums[i]] += 1;\n        }\n        else {\n            a[nums[i]] = 1;\n        }\n    }\n    for(var i = 0; i < nums.length; i++) {\n        if(a[nums[i]] === 1) {\n            r.push(nums[i]);\n        }\n    }\n    delete a;\n    return r;\n};\n```\n","source":"_posts/single-number.md","raw":"---\ntitle: 【LeetCode】Single Number I && II && III\ndate: 2018-09-24 13:24:33\ntags: ['leetcode', 'javascript', '整数', '去重']\n---\n\n> 题目连接: \n> I:   https://leetcode.com/problems/single-number/description/\n> II:  https://leetcode.com/problems/single-number-ii/description/\n> III: https://leetcode.com/problems/single-number-iii/description/\n\n### 题目描述\n\n**Single Number I**: 给一个整数数组，数组中只有一个整数只出现一次，其他的整数分别出现两次\n\n- 输入：[4, 1, 2, 1, 2]\n- 输出：4\n\n**Single Number II**: 给一个整数数组，数组中只有一个整数只出现一次，其他的整数最少现两次\n\n- 输入：[2, 2, 3, 2]\n- 输出：3\n\n**Single Number III**: 给一个整数数组，求出数组中只出现一次的数组结果\n\n- 输入：[1, 2, 1, 3, 2, 5]\n- 输出：[3, 5]\n\n### 思路\n\n**Single Number I**: 最简单的方法是通过位运算，一次遍历即可\n**Single Number II**: \n\n- 第一种：从第一个元素开始向后找，找到所有重复的元素置空，双重循环时间复杂度要 O(n^2)\n- 第二种：空间换时间，一遍循环将每个数字出现的次数存到一个对象中（因为有负数的情况，所以用数组），最后将次数为 1 的返回\n\n**Single Number I**: 在 II 的基础上，返回数组即可\n\n### 代码\n\n**Single Number I**:\n\n```\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    var r = 0;\n    for(i = 0; i < nums.length; i++) {\n        r = r ^ nums[i];\n    }\n    return r;\n};\n```\n\n**Single Number II**:\n\n```\n/**\n * \n * 第一种\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    var f;\n    for(var i = 0; i < nums.length; i++) {\n        f = 0;\n        for(var j = i + 1; j < nums.length; j++) {\n            if (nums[j] === nums[i]) {\n                nums[j] = null;\n                f = 1;\n            }\n        }\n        if (f === 1) {\n                nums[i] = null;\n            }\n    }\n    for(var i = 0; i < nums.length; i++) {\n        if (nums[i] !== null) {\n            return nums[i]\n        }\n    }\n    \n};\n\n\n/**\n * 第二种\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    var a = {};\n    for(var i = 0; i < nums.length; i++) {\n        if(!!a[nums[i]]) {\n            a[nums[i]] += 1;\n        }\n        else {\n            a[nums[i]] = 1;\n        }\n    }\n    for(var i = 0; i < nums.length; i++) {\n        if(a[nums[i]] === 1) {\n            delete a;\n            return nums[i];\n        }\n    }\n    \n};\n```\n\n**Single Number III**:\n\n```\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar singleNumber = function(nums) {\n    var a = {};\n    var r = [];\n    for(var i = 0; i < nums.length; i++) {\n        if(!!a[nums[i]]) {\n            a[nums[i]] += 1;\n        }\n        else {\n            a[nums[i]] = 1;\n        }\n    }\n    for(var i = 0; i < nums.length; i++) {\n        if(a[nums[i]] === 1) {\n            r.push(nums[i]);\n        }\n    }\n    delete a;\n    return r;\n};\n```\n","slug":"single-number","published":1,"updated":"2018-09-28T09:09:41.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvneto3001e8b05g3125emo","content":"<blockquote>\n<p>题目连接:<br>I:   <a href=\"https://leetcode.com/problems/single-number/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/single-number/description/</a><br>II:  <a href=\"https://leetcode.com/problems/single-number-ii/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/single-number-ii/description/</a><br>III: <a href=\"https://leetcode.com/problems/single-number-iii/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/single-number-iii/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p><strong>Single Number I</strong>: 给一个整数数组，数组中只有一个整数只出现一次，其他的整数分别出现两次</p>\n<ul>\n<li>输入：[4, 1, 2, 1, 2]</li>\n<li>输出：4</li>\n</ul>\n<p><strong>Single Number II</strong>: 给一个整数数组，数组中只有一个整数只出现一次，其他的整数最少现两次</p>\n<ul>\n<li>输入：[2, 2, 3, 2]</li>\n<li>输出：3</li>\n</ul>\n<p><strong>Single Number III</strong>: 给一个整数数组，求出数组中只出现一次的数组结果</p>\n<ul>\n<li>输入：[1, 2, 1, 3, 2, 5]</li>\n<li>输出：[3, 5]</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><strong>Single Number I</strong>: 最简单的方法是通过位运算，一次遍历即可<br><strong>Single Number II</strong>: </p>\n<ul>\n<li>第一种：从第一个元素开始向后找，找到所有重复的元素置空，双重循环时间复杂度要 O(n^2)</li>\n<li>第二种：空间换时间，一遍循环将每个数字出现的次数存到一个对象中（因为有负数的情况，所以用数组），最后将次数为 1 的返回</li>\n</ul>\n<p><strong>Single Number I</strong>: 在 II 的基础上，返回数组即可</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><strong>Single Number I</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number[]&#125; nums</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var singleNumber = function(nums) &#123;</span><br><span class=\"line\">    var r = 0;</span><br><span class=\"line\">    for(i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        r = r ^ nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>Single Number II</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 第一种</span><br><span class=\"line\"> * @param &#123;number[]&#125; nums</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var singleNumber = function(nums) &#123;</span><br><span class=\"line\">    var f;</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        f = 0;</span><br><span class=\"line\">        for(var j = i + 1; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            if (nums[j] === nums[i]) &#123;</span><br><span class=\"line\">                nums[j] = null;</span><br><span class=\"line\">                f = 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (f === 1) &#123;</span><br><span class=\"line\">                nums[i] = null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        if (nums[i] !== null) &#123;</span><br><span class=\"line\">            return nums[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 第二种</span><br><span class=\"line\"> * @param &#123;number[]&#125; nums</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var singleNumber = function(nums) &#123;</span><br><span class=\"line\">    var a = &#123;&#125;;</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        if(!!a[nums[i]]) &#123;</span><br><span class=\"line\">            a[nums[i]] += 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            a[nums[i]] = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        if(a[nums[i]] === 1) &#123;</span><br><span class=\"line\">            delete a;</span><br><span class=\"line\">            return nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>Single Number III</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number[]&#125; nums</span><br><span class=\"line\"> * @return &#123;number[]&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var singleNumber = function(nums) &#123;</span><br><span class=\"line\">    var a = &#123;&#125;;</span><br><span class=\"line\">    var r = [];</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        if(!!a[nums[i]]) &#123;</span><br><span class=\"line\">            a[nums[i]] += 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            a[nums[i]] = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        if(a[nums[i]] === 1) &#123;</span><br><span class=\"line\">            r.push(nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delete a;</span><br><span class=\"line\">    return r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>题目连接:<br>I:   <a href=\"https://leetcode.com/problems/single-number/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/single-number/description/</a><br>II:  <a href=\"https://leetcode.com/problems/single-number-ii/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/single-number-ii/description/</a><br>III: <a href=\"https://leetcode.com/problems/single-number-iii/description/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/single-number-iii/description/</a></p>\n</blockquote>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p><strong>Single Number I</strong>: 给一个整数数组，数组中只有一个整数只出现一次，其他的整数分别出现两次</p>\n<ul>\n<li>输入：[4, 1, 2, 1, 2]</li>\n<li>输出：4</li>\n</ul>\n<p><strong>Single Number II</strong>: 给一个整数数组，数组中只有一个整数只出现一次，其他的整数最少现两次</p>\n<ul>\n<li>输入：[2, 2, 3, 2]</li>\n<li>输出：3</li>\n</ul>\n<p><strong>Single Number III</strong>: 给一个整数数组，求出数组中只出现一次的数组结果</p>\n<ul>\n<li>输入：[1, 2, 1, 3, 2, 5]</li>\n<li>输出：[3, 5]</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p><strong>Single Number I</strong>: 最简单的方法是通过位运算，一次遍历即可<br><strong>Single Number II</strong>: </p>\n<ul>\n<li>第一种：从第一个元素开始向后找，找到所有重复的元素置空，双重循环时间复杂度要 O(n^2)</li>\n<li>第二种：空间换时间，一遍循环将每个数字出现的次数存到一个对象中（因为有负数的情况，所以用数组），最后将次数为 1 的返回</li>\n</ul>\n<p><strong>Single Number I</strong>: 在 II 的基础上，返回数组即可</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><strong>Single Number I</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number[]&#125; nums</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var singleNumber = function(nums) &#123;</span><br><span class=\"line\">    var r = 0;</span><br><span class=\"line\">    for(i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        r = r ^ nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>Single Number II</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 第一种</span><br><span class=\"line\"> * @param &#123;number[]&#125; nums</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var singleNumber = function(nums) &#123;</span><br><span class=\"line\">    var f;</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        f = 0;</span><br><span class=\"line\">        for(var j = i + 1; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            if (nums[j] === nums[i]) &#123;</span><br><span class=\"line\">                nums[j] = null;</span><br><span class=\"line\">                f = 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (f === 1) &#123;</span><br><span class=\"line\">                nums[i] = null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        if (nums[i] !== null) &#123;</span><br><span class=\"line\">            return nums[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 第二种</span><br><span class=\"line\"> * @param &#123;number[]&#125; nums</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var singleNumber = function(nums) &#123;</span><br><span class=\"line\">    var a = &#123;&#125;;</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        if(!!a[nums[i]]) &#123;</span><br><span class=\"line\">            a[nums[i]] += 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            a[nums[i]] = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        if(a[nums[i]] === 1) &#123;</span><br><span class=\"line\">            delete a;</span><br><span class=\"line\">            return nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>Single Number III</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number[]&#125; nums</span><br><span class=\"line\"> * @return &#123;number[]&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var singleNumber = function(nums) &#123;</span><br><span class=\"line\">    var a = &#123;&#125;;</span><br><span class=\"line\">    var r = [];</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        if(!!a[nums[i]]) &#123;</span><br><span class=\"line\">            a[nums[i]] += 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            a[nums[i]] = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        if(a[nums[i]] === 1) &#123;</span><br><span class=\"line\">            r.push(nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delete a;</span><br><span class=\"line\">    return r;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"我的早起生活","date":"2018-10-25T11:47:09.000Z","_content":"\n> 每日一言：暖雨晴风初破冻，柳眼梅腮，已觉春心动\n\n在豆瓣上看到一篇文章，题目是《我的早起生活》，讲的是作者当时努力考研的一些琐事。同为经历过考研的人，总会有一些共鸣；文章看的多了，又都会有一些文人的矫情。\n\n考研这件事情，每个人的出发点都不一样，对于我，不过是年轻时，想为了爱情拼一下命。虽然仍然走向了毕业就分手的结果，但是所有的经历都是生命的财富。\n\n在我看完了 2 遍 76 集的甄嬛传，500+ 集海贼王，绣了 3 幅十字绣之后，我终于决定要准备考研。我是一个懒人，考研要报班，要上课，这些都是使我决定考研的阻力。但是在临近毕业之际，同学们都为自己以后的生活，做打算，我受到了影响。加之心里一直想去 BAT 这种大厂工作，能读研对实现我这个想法也是有帮助的。最重要的是，当时的ex一心一意要考研，虽然为此争论过好几次，平时什么都听我的，但是这次怎么也说不动，反而是我被劝说走了考研路。\n\n东北的冬天格外冷，凌晨五点半，窗外的天还是半黑的，食堂还没有开门。到图书馆的路上，积雪已经被踩实，白天融化的部分已经变成了冰。操场里的雪能到膝盖，如果是艳阳的大晴天，真想进去打两个滚。到图书馆旁边的小花园，是我早上的常住地，背单词，大声读英语阅读到 7 点。天气不好，外面光线不好的时候，就在图书馆的二楼大厅，把自己的声音混入到周围的背诵声音之中，我自己也听不清我到底背了什么。\n\n吃过早饭就到图书馆的座位，去做数学题。我们学校为考研的学生分配的考研座位，很荣幸我是1号，也许是个幸运的数字，同时也是个幸运的座位，靠着暖气，一点都不会冷。汤家凤有一本《无师自通考研数学复习大全》，大概有330页，我从头到尾做了2遍，然而数学可能只考了109分。\n\n大约到早上8点多，同学们也陆陆续续的过来复习，偶尔一起讨论下某年数学题，或者政治背诵技巧。大约中午十一点半的时候一起去食堂吃午饭。部分同学午饭后选择回寝室休息，我则是回图书馆趴半个小时，下午三点左右ex睡醒之后会过来复习。下午是复习专业课和背政治一小时。由于数据结构学的比较好，所以专业课我都用在其他三门上，尤其网络复习时间最多，但是，最后我还是放弃了网络。晚上做英语阅读，背单词。ex英语很好，会时不时的教我一些方法。最后英语考了51分压线。也许一切都是幸运吧。\n\n现在回想那段时间，并没有觉得累，没有甜也没有苦。是渐渐被淡忘的青春。\n\n你有见过凌晨四五点的月亮吗？你有因为想家放声哭过吗？你有没有拼了命也希望做成一件事情？你有没有在努力的时候因为害怕失败而感到迷茫？有没有在脆弱的时候因为不善表达的父亲一句话就泪流满面？\n\n对啊，所有的经历都是生命的财富。","source":"_posts/postgraduate.md","raw":"---\ntitle: 我的早起生活\ndate: 2018-10-25 19:47:09\ntags: ['随笔', '碎片']\n---\n\n> 每日一言：暖雨晴风初破冻，柳眼梅腮，已觉春心动\n\n在豆瓣上看到一篇文章，题目是《我的早起生活》，讲的是作者当时努力考研的一些琐事。同为经历过考研的人，总会有一些共鸣；文章看的多了，又都会有一些文人的矫情。\n\n考研这件事情，每个人的出发点都不一样，对于我，不过是年轻时，想为了爱情拼一下命。虽然仍然走向了毕业就分手的结果，但是所有的经历都是生命的财富。\n\n在我看完了 2 遍 76 集的甄嬛传，500+ 集海贼王，绣了 3 幅十字绣之后，我终于决定要准备考研。我是一个懒人，考研要报班，要上课，这些都是使我决定考研的阻力。但是在临近毕业之际，同学们都为自己以后的生活，做打算，我受到了影响。加之心里一直想去 BAT 这种大厂工作，能读研对实现我这个想法也是有帮助的。最重要的是，当时的ex一心一意要考研，虽然为此争论过好几次，平时什么都听我的，但是这次怎么也说不动，反而是我被劝说走了考研路。\n\n东北的冬天格外冷，凌晨五点半，窗外的天还是半黑的，食堂还没有开门。到图书馆的路上，积雪已经被踩实，白天融化的部分已经变成了冰。操场里的雪能到膝盖，如果是艳阳的大晴天，真想进去打两个滚。到图书馆旁边的小花园，是我早上的常住地，背单词，大声读英语阅读到 7 点。天气不好，外面光线不好的时候，就在图书馆的二楼大厅，把自己的声音混入到周围的背诵声音之中，我自己也听不清我到底背了什么。\n\n吃过早饭就到图书馆的座位，去做数学题。我们学校为考研的学生分配的考研座位，很荣幸我是1号，也许是个幸运的数字，同时也是个幸运的座位，靠着暖气，一点都不会冷。汤家凤有一本《无师自通考研数学复习大全》，大概有330页，我从头到尾做了2遍，然而数学可能只考了109分。\n\n大约到早上8点多，同学们也陆陆续续的过来复习，偶尔一起讨论下某年数学题，或者政治背诵技巧。大约中午十一点半的时候一起去食堂吃午饭。部分同学午饭后选择回寝室休息，我则是回图书馆趴半个小时，下午三点左右ex睡醒之后会过来复习。下午是复习专业课和背政治一小时。由于数据结构学的比较好，所以专业课我都用在其他三门上，尤其网络复习时间最多，但是，最后我还是放弃了网络。晚上做英语阅读，背单词。ex英语很好，会时不时的教我一些方法。最后英语考了51分压线。也许一切都是幸运吧。\n\n现在回想那段时间，并没有觉得累，没有甜也没有苦。是渐渐被淡忘的青春。\n\n你有见过凌晨四五点的月亮吗？你有因为想家放声哭过吗？你有没有拼了命也希望做成一件事情？你有没有在努力的时候因为害怕失败而感到迷茫？有没有在脆弱的时候因为不善表达的父亲一句话就泪流满面？\n\n对啊，所有的经历都是生命的财富。","slug":"postgraduate","published":1,"updated":"2018-10-26T11:33:46.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvneto4001g8b051ycivdje","content":"<blockquote>\n<p>每日一言：暖雨晴风初破冻，柳眼梅腮，已觉春心动</p>\n</blockquote>\n<p>在豆瓣上看到一篇文章，题目是《我的早起生活》，讲的是作者当时努力考研的一些琐事。同为经历过考研的人，总会有一些共鸣；文章看的多了，又都会有一些文人的矫情。</p>\n<p>考研这件事情，每个人的出发点都不一样，对于我，不过是年轻时，想为了爱情拼一下命。虽然仍然走向了毕业就分手的结果，但是所有的经历都是生命的财富。</p>\n<p>在我看完了 2 遍 76 集的甄嬛传，500+ 集海贼王，绣了 3 幅十字绣之后，我终于决定要准备考研。我是一个懒人，考研要报班，要上课，这些都是使我决定考研的阻力。但是在临近毕业之际，同学们都为自己以后的生活，做打算，我受到了影响。加之心里一直想去 BAT 这种大厂工作，能读研对实现我这个想法也是有帮助的。最重要的是，当时的ex一心一意要考研，虽然为此争论过好几次，平时什么都听我的，但是这次怎么也说不动，反而是我被劝说走了考研路。</p>\n<p>东北的冬天格外冷，凌晨五点半，窗外的天还是半黑的，食堂还没有开门。到图书馆的路上，积雪已经被踩实，白天融化的部分已经变成了冰。操场里的雪能到膝盖，如果是艳阳的大晴天，真想进去打两个滚。到图书馆旁边的小花园，是我早上的常住地，背单词，大声读英语阅读到 7 点。天气不好，外面光线不好的时候，就在图书馆的二楼大厅，把自己的声音混入到周围的背诵声音之中，我自己也听不清我到底背了什么。</p>\n<p>吃过早饭就到图书馆的座位，去做数学题。我们学校为考研的学生分配的考研座位，很荣幸我是1号，也许是个幸运的数字，同时也是个幸运的座位，靠着暖气，一点都不会冷。汤家凤有一本《无师自通考研数学复习大全》，大概有330页，我从头到尾做了2遍，然而数学可能只考了109分。</p>\n<p>大约到早上8点多，同学们也陆陆续续的过来复习，偶尔一起讨论下某年数学题，或者政治背诵技巧。大约中午十一点半的时候一起去食堂吃午饭。部分同学午饭后选择回寝室休息，我则是回图书馆趴半个小时，下午三点左右ex睡醒之后会过来复习。下午是复习专业课和背政治一小时。由于数据结构学的比较好，所以专业课我都用在其他三门上，尤其网络复习时间最多，但是，最后我还是放弃了网络。晚上做英语阅读，背单词。ex英语很好，会时不时的教我一些方法。最后英语考了51分压线。也许一切都是幸运吧。</p>\n<p>现在回想那段时间，并没有觉得累，没有甜也没有苦。是渐渐被淡忘的青春。</p>\n<p>你有见过凌晨四五点的月亮吗？你有因为想家放声哭过吗？你有没有拼了命也希望做成一件事情？你有没有在努力的时候因为害怕失败而感到迷茫？有没有在脆弱的时候因为不善表达的父亲一句话就泪流满面？</p>\n<p>对啊，所有的经历都是生命的财富。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言：暖雨晴风初破冻，柳眼梅腮，已觉春心动</p>\n</blockquote>\n<p>在豆瓣上看到一篇文章，题目是《我的早起生活》，讲的是作者当时努力考研的一些琐事。同为经历过考研的人，总会有一些共鸣；文章看的多了，又都会有一些文人的矫情。</p>\n<p>考研这件事情，每个人的出发点都不一样，对于我，不过是年轻时，想为了爱情拼一下命。虽然仍然走向了毕业就分手的结果，但是所有的经历都是生命的财富。</p>\n<p>在我看完了 2 遍 76 集的甄嬛传，500+ 集海贼王，绣了 3 幅十字绣之后，我终于决定要准备考研。我是一个懒人，考研要报班，要上课，这些都是使我决定考研的阻力。但是在临近毕业之际，同学们都为自己以后的生活，做打算，我受到了影响。加之心里一直想去 BAT 这种大厂工作，能读研对实现我这个想法也是有帮助的。最重要的是，当时的ex一心一意要考研，虽然为此争论过好几次，平时什么都听我的，但是这次怎么也说不动，反而是我被劝说走了考研路。</p>\n<p>东北的冬天格外冷，凌晨五点半，窗外的天还是半黑的，食堂还没有开门。到图书馆的路上，积雪已经被踩实，白天融化的部分已经变成了冰。操场里的雪能到膝盖，如果是艳阳的大晴天，真想进去打两个滚。到图书馆旁边的小花园，是我早上的常住地，背单词，大声读英语阅读到 7 点。天气不好，外面光线不好的时候，就在图书馆的二楼大厅，把自己的声音混入到周围的背诵声音之中，我自己也听不清我到底背了什么。</p>\n<p>吃过早饭就到图书馆的座位，去做数学题。我们学校为考研的学生分配的考研座位，很荣幸我是1号，也许是个幸运的数字，同时也是个幸运的座位，靠着暖气，一点都不会冷。汤家凤有一本《无师自通考研数学复习大全》，大概有330页，我从头到尾做了2遍，然而数学可能只考了109分。</p>\n<p>大约到早上8点多，同学们也陆陆续续的过来复习，偶尔一起讨论下某年数学题，或者政治背诵技巧。大约中午十一点半的时候一起去食堂吃午饭。部分同学午饭后选择回寝室休息，我则是回图书馆趴半个小时，下午三点左右ex睡醒之后会过来复习。下午是复习专业课和背政治一小时。由于数据结构学的比较好，所以专业课我都用在其他三门上，尤其网络复习时间最多，但是，最后我还是放弃了网络。晚上做英语阅读，背单词。ex英语很好，会时不时的教我一些方法。最后英语考了51分压线。也许一切都是幸运吧。</p>\n<p>现在回想那段时间，并没有觉得累，没有甜也没有苦。是渐渐被淡忘的青春。</p>\n<p>你有见过凌晨四五点的月亮吗？你有因为想家放声哭过吗？你有没有拼了命也希望做成一件事情？你有没有在努力的时候因为害怕失败而感到迷茫？有没有在脆弱的时候因为不善表达的父亲一句话就泪流满面？</p>\n<p>对啊，所有的经历都是生命的财富。</p>\n"},{"title":"【学习笔记】Vue mixin","date":"2018-10-24T11:03:52.000Z","_content":"\n> 每日一言：有点无聊，我们来一起骂男人吧\n> 参考文档：https://vuejs.org/v2/guide/mixins.html\n\n## 定义\n\n【摘自 vue 官网】混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。\n\n简单讲，混入就是讲一个数据对象中的属性合并到组件中，达到对可复用的属性，方法，功能等一个比较高的利用率。\n\n### 举个 🌰\n\n```js\n/* 摘自官网 */\nvar myMixin = {\n  created: function () {\n    this.hello();\n  },\n  methods: {\n    hello: function () {\n      console.log('hello from mixin!');\n    }\n  }\n}\n\n/* 调用 */\nvar Component = Vue.extend({\n  mixins: [myMixin]\n});\nvar component = new Component(); // => \"hello from mixin!\"\n```\n上述例子可以看出，首先定义了一个 mixin 对象 myMixin，对象中有两个 function，created 和 methods。然后通过 Vue.extend 将 myMixin 混入到组件 Component 中，也就是说 Component 组件用用了 created 和 methods 两个方法。此时通过 new 去创建一个组件实例的时候会自动执行这两个个函数。\n\n## 规则\n\n- 当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合\n```js\n/* 摘自官网 */\nvar mixin = {\n  data: function () {\n    return {\n      message: 'hello',\n      foo: 'abc'\n    }\n  }\n}\n\nnew Vue({\n  mixins: [mixin],\n  data: function () {\n    return {\n      message: 'goodbye',\n      bar: 'def'\n    }\n  },\n  created: function () {\n    console.log(this.$data)\n    // => { message: \"goodbye\", foo: \"abc\", bar: \"def\" }\n  }\n})\n```\n- 混入对象的钩子将在组件自身钩子之前调用\n- 值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对\n- 也可以全局注册混入对象，一旦使用全局混入对象，将会影响到 所有 之后创建的 Vue 实例，需要恰当使用\n\n## 混入策略\n\n- 参考：https://vuejs.org/v2/guide/mixins.html#Custom-Option-Merge-Strategies\n","source":"_posts/vue-mixin.md","raw":"---\ntitle: 【学习笔记】Vue mixin\ndate: 2018-10-24 19:03:52\ntags: ['javascript', 'vue', 'mixin']\n---\n\n> 每日一言：有点无聊，我们来一起骂男人吧\n> 参考文档：https://vuejs.org/v2/guide/mixins.html\n\n## 定义\n\n【摘自 vue 官网】混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。\n\n简单讲，混入就是讲一个数据对象中的属性合并到组件中，达到对可复用的属性，方法，功能等一个比较高的利用率。\n\n### 举个 🌰\n\n```js\n/* 摘自官网 */\nvar myMixin = {\n  created: function () {\n    this.hello();\n  },\n  methods: {\n    hello: function () {\n      console.log('hello from mixin!');\n    }\n  }\n}\n\n/* 调用 */\nvar Component = Vue.extend({\n  mixins: [myMixin]\n});\nvar component = new Component(); // => \"hello from mixin!\"\n```\n上述例子可以看出，首先定义了一个 mixin 对象 myMixin，对象中有两个 function，created 和 methods。然后通过 Vue.extend 将 myMixin 混入到组件 Component 中，也就是说 Component 组件用用了 created 和 methods 两个方法。此时通过 new 去创建一个组件实例的时候会自动执行这两个个函数。\n\n## 规则\n\n- 当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合\n```js\n/* 摘自官网 */\nvar mixin = {\n  data: function () {\n    return {\n      message: 'hello',\n      foo: 'abc'\n    }\n  }\n}\n\nnew Vue({\n  mixins: [mixin],\n  data: function () {\n    return {\n      message: 'goodbye',\n      bar: 'def'\n    }\n  },\n  created: function () {\n    console.log(this.$data)\n    // => { message: \"goodbye\", foo: \"abc\", bar: \"def\" }\n  }\n})\n```\n- 混入对象的钩子将在组件自身钩子之前调用\n- 值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对\n- 也可以全局注册混入对象，一旦使用全局混入对象，将会影响到 所有 之后创建的 Vue 实例，需要恰当使用\n\n## 混入策略\n\n- 参考：https://vuejs.org/v2/guide/mixins.html#Custom-Option-Merge-Strategies\n","slug":"vue-mixin","published":1,"updated":"2018-10-25T11:47:27.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvneto5001j8b05a0sz4e5p","content":"<blockquote>\n<p>每日一言：有点无聊，我们来一起骂男人吧<br>参考文档：<a href=\"https://vuejs.org/v2/guide/mixins.html\" target=\"_blank\" rel=\"noopener\">https://vuejs.org/v2/guide/mixins.html</a></p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>【摘自 vue 官网】混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</p>\n<p>简单讲，混入就是讲一个数据对象中的属性合并到组件中，达到对可复用的属性，方法，功能等一个比较高的利用率。</p>\n<h3 id=\"举个-🌰\"><a href=\"#举个-🌰\" class=\"headerlink\" title=\"举个 🌰\"></a>举个 🌰</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 摘自官网 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myMixin = &#123;</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hello();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    hello: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello from mixin!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 调用 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend(&#123;</span><br><span class=\"line\">  mixins: [myMixin]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> Component(); <span class=\"comment\">// =&gt; \"hello from mixin!\"</span></span><br></pre></td></tr></table></figure>\n<p>上述例子可以看出，首先定义了一个 mixin 对象 myMixin，对象中有两个 function，created 和 methods。然后通过 Vue.extend 将 myMixin 混入到组件 Component 中，也就是说 Component 组件用用了 created 和 methods 两个方法。此时通过 new 去创建一个组件实例的时候会自动执行这两个个函数。</p>\n<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><ul>\n<li><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 摘自官网 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      message: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">      foo: <span class=\"string\">'abc'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  mixins: [mixin],</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      message: <span class=\"string\">'goodbye'</span>,</span><br><span class=\"line\">      bar: <span class=\"string\">'def'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$data)</span><br><span class=\"line\">    <span class=\"comment\">// =&gt; &#123; message: \"goodbye\", foo: \"abc\", bar: \"def\" &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>混入对象的钩子将在组件自身钩子之前调用</p>\n</li>\n<li>值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对</li>\n<li>也可以全局注册混入对象，一旦使用全局混入对象，将会影响到 所有 之后创建的 Vue 实例，需要恰当使用</li>\n</ul>\n<h2 id=\"混入策略\"><a href=\"#混入策略\" class=\"headerlink\" title=\"混入策略\"></a>混入策略</h2><ul>\n<li>参考：<a href=\"https://vuejs.org/v2/guide/mixins.html#Custom-Option-Merge-Strategies\" target=\"_blank\" rel=\"noopener\">https://vuejs.org/v2/guide/mixins.html#Custom-Option-Merge-Strategies</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言：有点无聊，我们来一起骂男人吧<br>参考文档：<a href=\"https://vuejs.org/v2/guide/mixins.html\" target=\"_blank\" rel=\"noopener\">https://vuejs.org/v2/guide/mixins.html</a></p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>【摘自 vue 官网】混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</p>\n<p>简单讲，混入就是讲一个数据对象中的属性合并到组件中，达到对可复用的属性，方法，功能等一个比较高的利用率。</p>\n<h3 id=\"举个-🌰\"><a href=\"#举个-🌰\" class=\"headerlink\" title=\"举个 🌰\"></a>举个 🌰</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 摘自官网 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myMixin = &#123;</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hello();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    hello: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello from mixin!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 调用 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend(&#123;</span><br><span class=\"line\">  mixins: [myMixin]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> Component(); <span class=\"comment\">// =&gt; \"hello from mixin!\"</span></span><br></pre></td></tr></table></figure>\n<p>上述例子可以看出，首先定义了一个 mixin 对象 myMixin，对象中有两个 function，created 和 methods。然后通过 Vue.extend 将 myMixin 混入到组件 Component 中，也就是说 Component 组件用用了 created 和 methods 两个方法。此时通过 new 去创建一个组件实例的时候会自动执行这两个个函数。</p>\n<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><ul>\n<li><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 摘自官网 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      message: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">      foo: <span class=\"string\">'abc'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  mixins: [mixin],</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      message: <span class=\"string\">'goodbye'</span>,</span><br><span class=\"line\">      bar: <span class=\"string\">'def'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$data)</span><br><span class=\"line\">    <span class=\"comment\">// =&gt; &#123; message: \"goodbye\", foo: \"abc\", bar: \"def\" &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>混入对象的钩子将在组件自身钩子之前调用</p>\n</li>\n<li>值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对</li>\n<li>也可以全局注册混入对象，一旦使用全局混入对象，将会影响到 所有 之后创建的 Vue 实例，需要恰当使用</li>\n</ul>\n<h2 id=\"混入策略\"><a href=\"#混入策略\" class=\"headerlink\" title=\"混入策略\"></a>混入策略</h2><ul>\n<li>参考：<a href=\"https://vuejs.org/v2/guide/mixins.html#Custom-Option-Merge-Strategies\" target=\"_blank\" rel=\"noopener\">https://vuejs.org/v2/guide/mixins.html#Custom-Option-Merge-Strategies</a></li>\n</ul>\n"},{"title":"Sass 学习","date":"2018-09-13T07:24:54.000Z","_content":"\n> 参考文档: https://www.sass.hk/docs/\n\nSass 可以认为是 css 的预处理, 在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅. 开源库[compass](http://compass-style.org/) 中就是基于 sass 完成的一个非常丰富的样式框架，包括大量定义好的mixin，函数，以及对SASS的扩展\n\n## sass 主要特点\n\n- 支持变量\n    - 变量作用域\n    - 变量命名中线和下划线不做区分($custom-name 和 $custom_name 是一样的)\n\n    ```css\n    $width: 5em;\n    #main {\n    width: $width;\n    }\n\n    /* 编译后 */\n    #main {\n    width: 5em;\n    }\n    ```\n- 允许嵌套\n    - 父选择器用 & 表示\n    - 属性嵌套\n    - 群组嵌套\n- `//` 注释编译后不会在 css 中显示\n- 支持命令行操作(SassScript)\n- 支持导入文件(@import)\n    - sass(如果不想导入文件被编译为css, 则以下划线开头命名, 导入时不用加下划线, 如下例)\n    - scss\n    - css\n\n    ```css\n    /* 文件 _colors.scss */\n\n    @import colors\n    ```\n\n- 支持继承\n    - 多重继承\n    - 链式继承\n- 支持控制指令 (@if @else 等)\n- 支持混合器(@mixin) (用于定义可重复使用的样式，避免了使用无语意的 class)\n- 支持函数\n\n这里只是个人的学习笔记, 详细使用可以参考: https://www.sass.hk/docs/, 后续使用过程中如果遇到觉得比较重点的问题会继续更新\n","source":"_posts/sass.md","raw":"---\ntitle: Sass 学习\ndate: 2018-09-13 15:24:54\ntags: ['sass']\n---\n\n> 参考文档: https://www.sass.hk/docs/\n\nSass 可以认为是 css 的预处理, 在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅. 开源库[compass](http://compass-style.org/) 中就是基于 sass 完成的一个非常丰富的样式框架，包括大量定义好的mixin，函数，以及对SASS的扩展\n\n## sass 主要特点\n\n- 支持变量\n    - 变量作用域\n    - 变量命名中线和下划线不做区分($custom-name 和 $custom_name 是一样的)\n\n    ```css\n    $width: 5em;\n    #main {\n    width: $width;\n    }\n\n    /* 编译后 */\n    #main {\n    width: 5em;\n    }\n    ```\n- 允许嵌套\n    - 父选择器用 & 表示\n    - 属性嵌套\n    - 群组嵌套\n- `//` 注释编译后不会在 css 中显示\n- 支持命令行操作(SassScript)\n- 支持导入文件(@import)\n    - sass(如果不想导入文件被编译为css, 则以下划线开头命名, 导入时不用加下划线, 如下例)\n    - scss\n    - css\n\n    ```css\n    /* 文件 _colors.scss */\n\n    @import colors\n    ```\n\n- 支持继承\n    - 多重继承\n    - 链式继承\n- 支持控制指令 (@if @else 等)\n- 支持混合器(@mixin) (用于定义可重复使用的样式，避免了使用无语意的 class)\n- 支持函数\n\n这里只是个人的学习笔记, 详细使用可以参考: https://www.sass.hk/docs/, 后续使用过程中如果遇到觉得比较重点的问题会继续更新\n","slug":"sass","published":1,"updated":"2018-09-13T07:57:37.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvneto6001l8b059amywm85","content":"<blockquote>\n<p>参考文档: <a href=\"https://www.sass.hk/docs/\" target=\"_blank\" rel=\"noopener\">https://www.sass.hk/docs/</a></p>\n</blockquote>\n<p>Sass 可以认为是 css 的预处理, 在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅. 开源库<a href=\"http://compass-style.org/\" target=\"_blank\" rel=\"noopener\">compass</a> 中就是基于 sass 完成的一个非常丰富的样式框架，包括大量定义好的mixin，函数，以及对SASS的扩展</p>\n<h2 id=\"sass-主要特点\"><a href=\"#sass-主要特点\" class=\"headerlink\" title=\"sass 主要特点\"></a>sass 主要特点</h2><ul>\n<li><p>支持变量</p>\n<ul>\n<li>变量作用域</li>\n<li><p>变量命名中线和下划线不做区分($custom-name 和 $custom_name 是一样的)</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$width: 5em;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 编译后 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>允许嵌套</p>\n<ul>\n<li>父选择器用 &amp; 表示</li>\n<li>属性嵌套</li>\n<li>群组嵌套</li>\n</ul>\n</li>\n<li><code>//</code> 注释编译后不会在 css 中显示</li>\n<li>支持命令行操作(SassScript)</li>\n<li><p>支持导入文件(@import)</p>\n<ul>\n<li>sass(如果不想导入文件被编译为css, 则以下划线开头命名, 导入时不用加下划线, 如下例)</li>\n<li>scss</li>\n<li><p>css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 文件 _colors.scss */</span></span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">import</span> colors</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>支持继承</p>\n<ul>\n<li>多重继承</li>\n<li>链式继承</li>\n</ul>\n</li>\n<li>支持控制指令 (@if @else 等)</li>\n<li>支持混合器(@mixin) (用于定义可重复使用的样式，避免了使用无语意的 class)</li>\n<li>支持函数</li>\n</ul>\n<p>这里只是个人的学习笔记, 详细使用可以参考: <a href=\"https://www.sass.hk/docs/\" target=\"_blank\" rel=\"noopener\">https://www.sass.hk/docs/</a>, 后续使用过程中如果遇到觉得比较重点的问题会继续更新</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考文档: <a href=\"https://www.sass.hk/docs/\" target=\"_blank\" rel=\"noopener\">https://www.sass.hk/docs/</a></p>\n</blockquote>\n<p>Sass 可以认为是 css 的预处理, 在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅. 开源库<a href=\"http://compass-style.org/\" target=\"_blank\" rel=\"noopener\">compass</a> 中就是基于 sass 完成的一个非常丰富的样式框架，包括大量定义好的mixin，函数，以及对SASS的扩展</p>\n<h2 id=\"sass-主要特点\"><a href=\"#sass-主要特点\" class=\"headerlink\" title=\"sass 主要特点\"></a>sass 主要特点</h2><ul>\n<li><p>支持变量</p>\n<ul>\n<li>变量作用域</li>\n<li><p>变量命名中线和下划线不做区分($custom-name 和 $custom_name 是一样的)</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$width: 5em;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 编译后 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>允许嵌套</p>\n<ul>\n<li>父选择器用 &amp; 表示</li>\n<li>属性嵌套</li>\n<li>群组嵌套</li>\n</ul>\n</li>\n<li><code>//</code> 注释编译后不会在 css 中显示</li>\n<li>支持命令行操作(SassScript)</li>\n<li><p>支持导入文件(@import)</p>\n<ul>\n<li>sass(如果不想导入文件被编译为css, 则以下划线开头命名, 导入时不用加下划线, 如下例)</li>\n<li>scss</li>\n<li><p>css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 文件 _colors.scss */</span></span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">import</span> colors</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>支持继承</p>\n<ul>\n<li>多重继承</li>\n<li>链式继承</li>\n</ul>\n</li>\n<li>支持控制指令 (@if @else 等)</li>\n<li>支持混合器(@mixin) (用于定义可重复使用的样式，避免了使用无语意的 class)</li>\n<li>支持函数</li>\n</ul>\n<p>这里只是个人的学习笔记, 详细使用可以参考: <a href=\"https://www.sass.hk/docs/\" target=\"_blank\" rel=\"noopener\">https://www.sass.hk/docs/</a>, 后续使用过程中如果遇到觉得比较重点的问题会继续更新</p>\n"},{"title":"超级便宜的台湾本土面膜","date":"2018-10-10T11:41:00.000Z","_content":"\n> 每日一言： 雨的气息是回家的小路\n\n自从去日本旅行，打开了旅行购物的大门之后便一发不可收拾。五一去台湾的时候，西门町遍地的屈臣氏，康是美，门口、店内全部是日本药妆，台湾本土面膜，真的是我控制不住我自己。\n\n不过由于有在日本购物的经验，对比起来，在台湾买日本药妆反而贵了很多，所以小红书找了一下台湾本土护肤面膜，台湾的宠爱之名什么的就不说了，毕竟比前男友面膜还要贵😓，最后让我找到了这个“丰台湾”面膜，之前买10元以下的面膜都会觉得劣质，这个真的不觉得，用来日常敷脸在合适不过。\n\n## 推荐\n\n- 芦荟丝瓜\n    - 推荐指数：4星\n    - 功能：补水\n    - 效果：用完之后，水水的，第二天起床还感觉皮肤嫩嫩的，不过只能坚持1天\n\n- 薏仁牛奶\n    - 推荐指数：5星\n    - 功能：美白\n    - 效果：我个人是比较排斥美白面膜的，但是这个用完了，感觉美白透亮\n- 珍珠红薏仁和山玫瑰\n    - 这两个我没买，珍珠红薏仁网上比较推荐，山玫瑰没什么效果\n\n## 价格\n\n- 一盒 5 片 \n- 新台币 299/2盒， 399/3盒（约 6 元/片）\n","source":"_posts/taiwan-local-mask.md","raw":"---\ntitle: 超级便宜的台湾本土面膜\ndate: 2018-10-10 19:41:00\ntags: ['护肤', '面膜', '台湾']\n---\n\n> 每日一言： 雨的气息是回家的小路\n\n自从去日本旅行，打开了旅行购物的大门之后便一发不可收拾。五一去台湾的时候，西门町遍地的屈臣氏，康是美，门口、店内全部是日本药妆，台湾本土面膜，真的是我控制不住我自己。\n\n不过由于有在日本购物的经验，对比起来，在台湾买日本药妆反而贵了很多，所以小红书找了一下台湾本土护肤面膜，台湾的宠爱之名什么的就不说了，毕竟比前男友面膜还要贵😓，最后让我找到了这个“丰台湾”面膜，之前买10元以下的面膜都会觉得劣质，这个真的不觉得，用来日常敷脸在合适不过。\n\n## 推荐\n\n- 芦荟丝瓜\n    - 推荐指数：4星\n    - 功能：补水\n    - 效果：用完之后，水水的，第二天起床还感觉皮肤嫩嫩的，不过只能坚持1天\n\n- 薏仁牛奶\n    - 推荐指数：5星\n    - 功能：美白\n    - 效果：我个人是比较排斥美白面膜的，但是这个用完了，感觉美白透亮\n- 珍珠红薏仁和山玫瑰\n    - 这两个我没买，珍珠红薏仁网上比较推荐，山玫瑰没什么效果\n\n## 价格\n\n- 一盒 5 片 \n- 新台币 299/2盒， 399/3盒（约 6 元/片）\n","slug":"taiwan-local-mask","published":1,"updated":"2018-10-10T12:06:26.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvneto7001o8b054lakrzwg","content":"<blockquote>\n<p>每日一言： 雨的气息是回家的小路</p>\n</blockquote>\n<p>自从去日本旅行，打开了旅行购物的大门之后便一发不可收拾。五一去台湾的时候，西门町遍地的屈臣氏，康是美，门口、店内全部是日本药妆，台湾本土面膜，真的是我控制不住我自己。</p>\n<p>不过由于有在日本购物的经验，对比起来，在台湾买日本药妆反而贵了很多，所以小红书找了一下台湾本土护肤面膜，台湾的宠爱之名什么的就不说了，毕竟比前男友面膜还要贵😓，最后让我找到了这个“丰台湾”面膜，之前买10元以下的面膜都会觉得劣质，这个真的不觉得，用来日常敷脸在合适不过。</p>\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><ul>\n<li><p>芦荟丝瓜</p>\n<ul>\n<li>推荐指数：4星</li>\n<li>功能：补水</li>\n<li>效果：用完之后，水水的，第二天起床还感觉皮肤嫩嫩的，不过只能坚持1天</li>\n</ul>\n</li>\n<li><p>薏仁牛奶</p>\n<ul>\n<li>推荐指数：5星</li>\n<li>功能：美白</li>\n<li>效果：我个人是比较排斥美白面膜的，但是这个用完了，感觉美白透亮</li>\n</ul>\n</li>\n<li>珍珠红薏仁和山玫瑰<ul>\n<li>这两个我没买，珍珠红薏仁网上比较推荐，山玫瑰没什么效果</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"价格\"><a href=\"#价格\" class=\"headerlink\" title=\"价格\"></a>价格</h2><ul>\n<li>一盒 5 片 </li>\n<li>新台币 299/2盒， 399/3盒（约 6 元/片）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言： 雨的气息是回家的小路</p>\n</blockquote>\n<p>自从去日本旅行，打开了旅行购物的大门之后便一发不可收拾。五一去台湾的时候，西门町遍地的屈臣氏，康是美，门口、店内全部是日本药妆，台湾本土面膜，真的是我控制不住我自己。</p>\n<p>不过由于有在日本购物的经验，对比起来，在台湾买日本药妆反而贵了很多，所以小红书找了一下台湾本土护肤面膜，台湾的宠爱之名什么的就不说了，毕竟比前男友面膜还要贵😓，最后让我找到了这个“丰台湾”面膜，之前买10元以下的面膜都会觉得劣质，这个真的不觉得，用来日常敷脸在合适不过。</p>\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><ul>\n<li><p>芦荟丝瓜</p>\n<ul>\n<li>推荐指数：4星</li>\n<li>功能：补水</li>\n<li>效果：用完之后，水水的，第二天起床还感觉皮肤嫩嫩的，不过只能坚持1天</li>\n</ul>\n</li>\n<li><p>薏仁牛奶</p>\n<ul>\n<li>推荐指数：5星</li>\n<li>功能：美白</li>\n<li>效果：我个人是比较排斥美白面膜的，但是这个用完了，感觉美白透亮</li>\n</ul>\n</li>\n<li>珍珠红薏仁和山玫瑰<ul>\n<li>这两个我没买，珍珠红薏仁网上比较推荐，山玫瑰没什么效果</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"价格\"><a href=\"#价格\" class=\"headerlink\" title=\"价格\"></a>价格</h2><ul>\n<li>一盒 5 片 </li>\n<li>新台币 299/2盒， 399/3盒（约 6 元/片）</li>\n</ul>\n"},{"title":"【学习笔记】Vuex","date":"2018-10-17T11:59:12.000Z","_content":"\n> 每日一言：在这个声音吵杂的世界里相遇\n> 参考文档：https://vuex.vuejs.org/zh/\n\n## 什么是 Vuex\n\n[摘自官网] Vuex 是一个专为 Vue.js 应用程序开发的**状态管理模式**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n简单讲，是 Vue 的状态管理库。以一个单例模式管理组件的共享状态。\n\n## 使用场景\n\n- 一个中大型单页应用中\n- 跨组件、跨页面的数据\n- 跨复杂组件的数据\n\n## 最简单的 store\n\n```js\n/* 摘自官网 */\nconst store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        increment (state) {\n        state.count++\n        }\n    }\n});\n\n/* 触发变更 */\nstore.commit('increment')\n\nconsole.log(store.state.count) // -> 1\n```\n\n## 核心概念\n\n说明：官网中介绍的很详细，本文作为学习笔记，简单记录学习过程中的重点\n\n### State\n\n> 单一状态树，可以认为 vuex 的所有状态都在 state 下面\n\n#### 获取\n\n- 单一状态\n    - store.state.xxx\n    - 子组件：this.$store.state.xxx\n- 多状态\n    - mapState 辅助函数，可以获取多个状态\n    - ...mapState({}) 混入\n\n### Getter\n\n> 为了解决多个组件需要用到同一状态的情况，vuex 允许在 store 中定义 getter，接收 state 作为第一个参数，也可以接收其他 getter 作为第二个参数\n\n#### 访问\n\n- 通过属性访问\n    - store.getters.xxx\n    - 子组件：this.$store.getters.xxx\n- 通过方法访问\n- mapGetters 辅助函数：...mapGetters([])\n\n### Mutation\n\n> 更改 store 中状态的唯一方法。\n\n```js\nstore.commit('yourFunction')\n```\n\n- 提交载荷\n```js\nstore.commit('increment', 10)\n\nstore.commit('increment', {\n  amount: 10\n})\n\nstore.commit({\n  type: 'increment',\n  amount: 10\n})\n\n// 组件中提交\nthis.$store.commit('xxx')\n// 或\n...mapMutations([])\n```\n\n#### 注意\n\n- 【建议】使用常量替代 Mutation 事件类型\n- 【必须】Mutation 必须是同步函数\n\n### Action\n\n> 类似于 mutation。Action 提交的是 mutation，而不是直接变更状态，可以包含任意的异步操作\n\n#### 分发\n\n- store.dispatch('increment')\n- 组件中分发\n    - this.$store.dispatch('xxx')\n    - ...mapActions([])\n- 组合（结合 promsie）\n\n### Module\n\n> Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块\n\n\n## 其他\n\n其他关于项目结构、插件、测试等可以参考官网文档。","source":"_posts/vuex.md","raw":"---\ntitle: 【学习笔记】Vuex\ndate: 2018-10-17 19:59:12\ntags: ['javascript', 'vue', 'vuex']\n---\n\n> 每日一言：在这个声音吵杂的世界里相遇\n> 参考文档：https://vuex.vuejs.org/zh/\n\n## 什么是 Vuex\n\n[摘自官网] Vuex 是一个专为 Vue.js 应用程序开发的**状态管理模式**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n简单讲，是 Vue 的状态管理库。以一个单例模式管理组件的共享状态。\n\n## 使用场景\n\n- 一个中大型单页应用中\n- 跨组件、跨页面的数据\n- 跨复杂组件的数据\n\n## 最简单的 store\n\n```js\n/* 摘自官网 */\nconst store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        increment (state) {\n        state.count++\n        }\n    }\n});\n\n/* 触发变更 */\nstore.commit('increment')\n\nconsole.log(store.state.count) // -> 1\n```\n\n## 核心概念\n\n说明：官网中介绍的很详细，本文作为学习笔记，简单记录学习过程中的重点\n\n### State\n\n> 单一状态树，可以认为 vuex 的所有状态都在 state 下面\n\n#### 获取\n\n- 单一状态\n    - store.state.xxx\n    - 子组件：this.$store.state.xxx\n- 多状态\n    - mapState 辅助函数，可以获取多个状态\n    - ...mapState({}) 混入\n\n### Getter\n\n> 为了解决多个组件需要用到同一状态的情况，vuex 允许在 store 中定义 getter，接收 state 作为第一个参数，也可以接收其他 getter 作为第二个参数\n\n#### 访问\n\n- 通过属性访问\n    - store.getters.xxx\n    - 子组件：this.$store.getters.xxx\n- 通过方法访问\n- mapGetters 辅助函数：...mapGetters([])\n\n### Mutation\n\n> 更改 store 中状态的唯一方法。\n\n```js\nstore.commit('yourFunction')\n```\n\n- 提交载荷\n```js\nstore.commit('increment', 10)\n\nstore.commit('increment', {\n  amount: 10\n})\n\nstore.commit({\n  type: 'increment',\n  amount: 10\n})\n\n// 组件中提交\nthis.$store.commit('xxx')\n// 或\n...mapMutations([])\n```\n\n#### 注意\n\n- 【建议】使用常量替代 Mutation 事件类型\n- 【必须】Mutation 必须是同步函数\n\n### Action\n\n> 类似于 mutation。Action 提交的是 mutation，而不是直接变更状态，可以包含任意的异步操作\n\n#### 分发\n\n- store.dispatch('increment')\n- 组件中分发\n    - this.$store.dispatch('xxx')\n    - ...mapActions([])\n- 组合（结合 promsie）\n\n### Module\n\n> Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块\n\n\n## 其他\n\n其他关于项目结构、插件、测试等可以参考官网文档。","slug":"vuex","published":1,"updated":"2018-10-18T11:36:52.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvneto8001q8b05883tfygj","content":"<blockquote>\n<p>每日一言：在这个声音吵杂的世界里相遇<br>参考文档：<a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">https://vuex.vuejs.org/zh/</a></p>\n</blockquote>\n<h2 id=\"什么是-Vuex\"><a href=\"#什么是-Vuex\" class=\"headerlink\" title=\"什么是 Vuex\"></a>什么是 Vuex</h2><p>[摘自官网] Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>简单讲，是 Vue 的状态管理库。以一个单例模式管理组件的共享状态。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>一个中大型单页应用中</li>\n<li>跨组件、跨页面的数据</li>\n<li>跨复杂组件的数据</li>\n</ul>\n<h2 id=\"最简单的-store\"><a href=\"#最简单的-store\" class=\"headerlink\" title=\"最简单的 store\"></a>最简单的 store</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 摘自官网 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        increment (state) &#123;</span><br><span class=\"line\">        state.count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 触发变更 */</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(store.state.count) <span class=\"comment\">// -&gt; 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><p>说明：官网中介绍的很详细，本文作为学习笔记，简单记录学习过程中的重点</p>\n<h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><blockquote>\n<p>单一状态树，可以认为 vuex 的所有状态都在 state 下面</p>\n</blockquote>\n<h4 id=\"获取\"><a href=\"#获取\" class=\"headerlink\" title=\"获取\"></a>获取</h4><ul>\n<li>单一状态<ul>\n<li>store.state.xxx</li>\n<li>子组件：this.$store.state.xxx</li>\n</ul>\n</li>\n<li>多状态<ul>\n<li>mapState 辅助函数，可以获取多个状态</li>\n<li>…mapState({}) 混入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h3><blockquote>\n<p>为了解决多个组件需要用到同一状态的情况，vuex 允许在 store 中定义 getter，接收 state 作为第一个参数，也可以接收其他 getter 作为第二个参数</p>\n</blockquote>\n<h4 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h4><ul>\n<li>通过属性访问<ul>\n<li>store.getters.xxx</li>\n<li>子组件：this.$store.getters.xxx</li>\n</ul>\n</li>\n<li>通过方法访问</li>\n<li>mapGetters 辅助函数：…mapGetters([])</li>\n</ul>\n<h3 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h3><blockquote>\n<p>更改 store 中状态的唯一方法。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(<span class=\"string\">'yourFunction'</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提交载荷<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, &#123;</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'increment'</span>,</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件中提交</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'xxx'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">...mapMutations([])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>【建议】使用常量替代 Mutation 事件类型</li>\n<li>【必须】Mutation 必须是同步函数</li>\n</ul>\n<h3 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h3><blockquote>\n<p>类似于 mutation。Action 提交的是 mutation，而不是直接变更状态，可以包含任意的异步操作</p>\n</blockquote>\n<h4 id=\"分发\"><a href=\"#分发\" class=\"headerlink\" title=\"分发\"></a>分发</h4><ul>\n<li>store.dispatch(‘increment’)</li>\n<li>组件中分发<ul>\n<li>this.$store.dispatch(‘xxx’)</li>\n<li>…mapActions([])</li>\n</ul>\n</li>\n<li>组合（结合 promsie）</li>\n</ul>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><blockquote>\n<p>Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块</p>\n</blockquote>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>其他关于项目结构、插件、测试等可以参考官网文档。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每日一言：在这个声音吵杂的世界里相遇<br>参考文档：<a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">https://vuex.vuejs.org/zh/</a></p>\n</blockquote>\n<h2 id=\"什么是-Vuex\"><a href=\"#什么是-Vuex\" class=\"headerlink\" title=\"什么是 Vuex\"></a>什么是 Vuex</h2><p>[摘自官网] Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>简单讲，是 Vue 的状态管理库。以一个单例模式管理组件的共享状态。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>一个中大型单页应用中</li>\n<li>跨组件、跨页面的数据</li>\n<li>跨复杂组件的数据</li>\n</ul>\n<h2 id=\"最简单的-store\"><a href=\"#最简单的-store\" class=\"headerlink\" title=\"最简单的 store\"></a>最简单的 store</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 摘自官网 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        increment (state) &#123;</span><br><span class=\"line\">        state.count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 触发变更 */</span></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(store.state.count) <span class=\"comment\">// -&gt; 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><p>说明：官网中介绍的很详细，本文作为学习笔记，简单记录学习过程中的重点</p>\n<h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><blockquote>\n<p>单一状态树，可以认为 vuex 的所有状态都在 state 下面</p>\n</blockquote>\n<h4 id=\"获取\"><a href=\"#获取\" class=\"headerlink\" title=\"获取\"></a>获取</h4><ul>\n<li>单一状态<ul>\n<li>store.state.xxx</li>\n<li>子组件：this.$store.state.xxx</li>\n</ul>\n</li>\n<li>多状态<ul>\n<li>mapState 辅助函数，可以获取多个状态</li>\n<li>…mapState({}) 混入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h3><blockquote>\n<p>为了解决多个组件需要用到同一状态的情况，vuex 允许在 store 中定义 getter，接收 state 作为第一个参数，也可以接收其他 getter 作为第二个参数</p>\n</blockquote>\n<h4 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h4><ul>\n<li>通过属性访问<ul>\n<li>store.getters.xxx</li>\n<li>子组件：this.$store.getters.xxx</li>\n</ul>\n</li>\n<li>通过方法访问</li>\n<li>mapGetters 辅助函数：…mapGetters([])</li>\n</ul>\n<h3 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h3><blockquote>\n<p>更改 store 中状态的唯一方法。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(<span class=\"string\">'yourFunction'</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提交载荷<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, &#123;</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'increment'</span>,</span><br><span class=\"line\">  amount: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件中提交</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'xxx'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">...mapMutations([])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>【建议】使用常量替代 Mutation 事件类型</li>\n<li>【必须】Mutation 必须是同步函数</li>\n</ul>\n<h3 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h3><blockquote>\n<p>类似于 mutation。Action 提交的是 mutation，而不是直接变更状态，可以包含任意的异步操作</p>\n</blockquote>\n<h4 id=\"分发\"><a href=\"#分发\" class=\"headerlink\" title=\"分发\"></a>分发</h4><ul>\n<li>store.dispatch(‘increment’)</li>\n<li>组件中分发<ul>\n<li>this.$store.dispatch(‘xxx’)</li>\n<li>…mapActions([])</li>\n</ul>\n</li>\n<li>组合（结合 promsie）</li>\n</ul>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><blockquote>\n<p>Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块</p>\n</blockquote>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>其他关于项目结构、插件、测试等可以参考官网文档。</p>\n"},{"title":"【学习笔记】vue-router 使用","date":"2018-09-27T04:54:18.000Z","_content":"\n> 参考文档: https://router.vuejs.org/zh/\n>\n> vue0router 源码: https://github.com/vuejs/vue-router\n\n# 简介\n\nVue Router 是 [Vue.js](https://cn.vuejs.org/) 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。[官方介绍]]\n\n# 使用\n\n### DOM API\n\n- router-link\n\n`router-link` 有很多属性, 比如 `to`, `replace` 和 `tag` 等, 可以[参考文档 router-link-props](https://router.vuejs.org/zh/api/#router-link-props) 一节\n\n```javascript\n    <router-link tag=\"li\" to=\"/foo\"></router-link>\n```\n\n- router-view\n\nrouter-view 是一个 functional 组件，渲染路径匹配到的视图组件, 可以简单的理解为将路由对应的组件渲染在 router-view 中. \n\n可以[参考官方效果展示](https://jsfiddle.net/6du90epg/7730/).\n\n分别点击右下角的 '/' 和 '/other', 可以看到页面中渲染了不同的视图\n\n主要原理是通过 `<router-view>` 的 name 属性, 配置了渲染的组件name\n\n然后在相应的 path 下配置将组件 name 映射到实际的组件\n\n```javascript\n/* 此段代码从官方效果展示复制过来, 主要为了解释下 router-view 工作 */\n/* html 部分 */\n<script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n\n<div id=\"app\">\n  <h1>Named Views</h1>\n  <ul>\n    <li>\n      <router-link to=\"/\">/</router-link>\n    </li>\n    <li>\n      <router-link to=\"/other\">/other</router-link>\n    </li>\n  </ul>\n  <router-view class=\"view one\">hhh</router-view>\n  <router-view class=\"view two\" name=\"a\"></router-view>\n  <router-view class=\"view three\" name=\"b\"></router-view>\n</div>\n\n/* js 部分 */\nconst Foo = { template: '<div>foo</div>' }\nconst Bar = { template: '<div>bar</div>' }\nconst Baz = { template: '<div>baz</div>' }\n\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [\n    { path: '/',\n      // a single route can define multiple named components\n      // which will be rendered into <router-view>s with corresponding names.\n      components: {\n        default: Foo,\n        a: Bar,\n        b: Baz\n      },                                                                                                                                               \n    },\n    {\n      path: '/other',\n      components: {\n        default: Baz,\n        a: Bar,\n        b: Foo\n      }\n    }\n  ]\n})\n\nnew Vue({\n\trouter,\n  el: '#app'\n})\n\n```\n\n### Router 构建选项\n\n一般在一个项目中会通过如下方法构建路由, 详细构建参数参考[官网-Router 构建选项](https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9) 一节.\n\n```js\n    new Router({\n        routes: routes,\n        modes: modes\n        ...\n    });\n```\n\n这里 `routes` 最为常用, 是一个对象数组, 每个字段解释如下:\n\n```js\nroutes = [\n    {\n        /**\n         * {string} 必须 路由\n         */\n        path: '',\n        /**\n         * {Component} 非必须 视图组件\n         */\n        component: '',\n        /**\n         * {string} 非必须 明明路由\n         */\n        name: '',\n        /**\n         * {Object} 非必须 命名视图组件\n         */\n        components: { [name: string]: Component };\n        /**\n         * {string/Location/Function} 非必须 重定向逻辑\n         */\n        redirect?: string | Location | Function;\n        /**\n         * {boolean/string/Function} 非必须 路由属性\n         */\n        props?: boolean | string | Function;\n        /**\n         * {string/Array} 非必须 别名\n         */\n        alias?: string | Array<string>;\n        /**\n         * {Array<RouteConfig>} 非必须 嵌套路由\n         */\n        children?: Array<RouteConfig>;\n        /**\n         * 非必须\n         */\n        beforeEnter?: (to: Route, from: Route, next: Function) => void;\n        /**\n         * {any} 非必须 感觉像是一些业务相关配置\n         */\n        meta?: any;\n\n        /**\n         * {boolean} 非必须 匹配规则是否大小写敏感？(默认值：false)\n         * 2.6.0+\n         */\n        caseSensitive?: boolean;\n        /**\n         * {Object} 非必须 编译正则的选项\n         * 2.6.0+\n         */\n        pathToRegexpOptions?: Object;\n    }, {\n        ...\n    }\n]\n```\n\n### Router 实例属性和实例方法\n\nRouter 的实例属性和实例方法, [官方文档](https://router.vuejs.org/zh/api/#router-%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7)介绍的很详细, 这里不做过多讲解, \n\n直接参考官方文档即可.","source":"_posts/vue-router-code.md","raw":"---\ntitle: 【学习笔记】vue-router 使用\ndate: 2018-09-27 12:54:18\ntags: ['javascript', 'vue', 'vue-router']\n---\n\n> 参考文档: https://router.vuejs.org/zh/\n>\n> vue0router 源码: https://github.com/vuejs/vue-router\n\n# 简介\n\nVue Router 是 [Vue.js](https://cn.vuejs.org/) 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。[官方介绍]]\n\n# 使用\n\n### DOM API\n\n- router-link\n\n`router-link` 有很多属性, 比如 `to`, `replace` 和 `tag` 等, 可以[参考文档 router-link-props](https://router.vuejs.org/zh/api/#router-link-props) 一节\n\n```javascript\n    <router-link tag=\"li\" to=\"/foo\"></router-link>\n```\n\n- router-view\n\nrouter-view 是一个 functional 组件，渲染路径匹配到的视图组件, 可以简单的理解为将路由对应的组件渲染在 router-view 中. \n\n可以[参考官方效果展示](https://jsfiddle.net/6du90epg/7730/).\n\n分别点击右下角的 '/' 和 '/other', 可以看到页面中渲染了不同的视图\n\n主要原理是通过 `<router-view>` 的 name 属性, 配置了渲染的组件name\n\n然后在相应的 path 下配置将组件 name 映射到实际的组件\n\n```javascript\n/* 此段代码从官方效果展示复制过来, 主要为了解释下 router-view 工作 */\n/* html 部分 */\n<script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n\n<div id=\"app\">\n  <h1>Named Views</h1>\n  <ul>\n    <li>\n      <router-link to=\"/\">/</router-link>\n    </li>\n    <li>\n      <router-link to=\"/other\">/other</router-link>\n    </li>\n  </ul>\n  <router-view class=\"view one\">hhh</router-view>\n  <router-view class=\"view two\" name=\"a\"></router-view>\n  <router-view class=\"view three\" name=\"b\"></router-view>\n</div>\n\n/* js 部分 */\nconst Foo = { template: '<div>foo</div>' }\nconst Bar = { template: '<div>bar</div>' }\nconst Baz = { template: '<div>baz</div>' }\n\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [\n    { path: '/',\n      // a single route can define multiple named components\n      // which will be rendered into <router-view>s with corresponding names.\n      components: {\n        default: Foo,\n        a: Bar,\n        b: Baz\n      },                                                                                                                                               \n    },\n    {\n      path: '/other',\n      components: {\n        default: Baz,\n        a: Bar,\n        b: Foo\n      }\n    }\n  ]\n})\n\nnew Vue({\n\trouter,\n  el: '#app'\n})\n\n```\n\n### Router 构建选项\n\n一般在一个项目中会通过如下方法构建路由, 详细构建参数参考[官网-Router 构建选项](https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9) 一节.\n\n```js\n    new Router({\n        routes: routes,\n        modes: modes\n        ...\n    });\n```\n\n这里 `routes` 最为常用, 是一个对象数组, 每个字段解释如下:\n\n```js\nroutes = [\n    {\n        /**\n         * {string} 必须 路由\n         */\n        path: '',\n        /**\n         * {Component} 非必须 视图组件\n         */\n        component: '',\n        /**\n         * {string} 非必须 明明路由\n         */\n        name: '',\n        /**\n         * {Object} 非必须 命名视图组件\n         */\n        components: { [name: string]: Component };\n        /**\n         * {string/Location/Function} 非必须 重定向逻辑\n         */\n        redirect?: string | Location | Function;\n        /**\n         * {boolean/string/Function} 非必须 路由属性\n         */\n        props?: boolean | string | Function;\n        /**\n         * {string/Array} 非必须 别名\n         */\n        alias?: string | Array<string>;\n        /**\n         * {Array<RouteConfig>} 非必须 嵌套路由\n         */\n        children?: Array<RouteConfig>;\n        /**\n         * 非必须\n         */\n        beforeEnter?: (to: Route, from: Route, next: Function) => void;\n        /**\n         * {any} 非必须 感觉像是一些业务相关配置\n         */\n        meta?: any;\n\n        /**\n         * {boolean} 非必须 匹配规则是否大小写敏感？(默认值：false)\n         * 2.6.0+\n         */\n        caseSensitive?: boolean;\n        /**\n         * {Object} 非必须 编译正则的选项\n         * 2.6.0+\n         */\n        pathToRegexpOptions?: Object;\n    }, {\n        ...\n    }\n]\n```\n\n### Router 实例属性和实例方法\n\nRouter 的实例属性和实例方法, [官方文档](https://router.vuejs.org/zh/api/#router-%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7)介绍的很详细, 这里不做过多讲解, \n\n直接参考官方文档即可.","slug":"vue-router-code","published":1,"updated":"2018-09-27T08:59:56.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvneto9001t8b05773v7zqp","content":"<blockquote>\n<p>参考文档: <a href=\"https://router.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">https://router.vuejs.org/zh/</a></p>\n<p>vue0router 源码: <a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue-router</a></p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Vue Router 是 <a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue.js</a> 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。[官方介绍]]</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h3 id=\"DOM-API\"><a href=\"#DOM-API\" class=\"headerlink\" title=\"DOM API\"></a>DOM API</h3><ul>\n<li>router-link</li>\n</ul>\n<p><code>router-link</code> 有很多属性, 比如 <code>to</code>, <code>replace</code> 和 <code>tag</code> 等, 可以<a href=\"https://router.vuejs.org/zh/api/#router-link-props\" target=\"_blank\" rel=\"noopener\">参考文档 router-link-props</a> 一节</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link tag=<span class=\"string\">\"li\"</span> to=<span class=\"string\">\"/foo\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>router-view</li>\n</ul>\n<p>router-view 是一个 functional 组件，渲染路径匹配到的视图组件, 可以简单的理解为将路由对应的组件渲染在 router-view 中. </p>\n<p>可以<a href=\"https://jsfiddle.net/6du90epg/7730/\" target=\"_blank\" rel=\"noopener\">参考官方效果展示</a>.</p>\n<p>分别点击右下角的 ‘/‘ 和 ‘/other’, 可以看到页面中渲染了不同的视图</p>\n<p>主要原理是通过 <code>&lt;router-view&gt;</code> 的 name 属性, 配置了渲染的组件name</p>\n<p>然后在相应的 path 下配置将组件 name 映射到实际的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 此段代码从官方效果展示复制过来, 主要为了解释下 router-view 工作 */</span></span><br><span class=\"line\"><span class=\"comment\">/* html 部分 */</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://unpkg.com/vue-router/dist/vue-router.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;h1&gt;Named Views&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;router-link to=\"/</span><span class=\"string\">\"&gt;/&lt;/router-link&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;router-link to=\"</span>/other<span class=\"string\">\"&gt;/other&lt;/router-link&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;router-view class=\"</span>view one<span class=\"string\">\"&gt;hhh&lt;/router-view&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;router-view class=\"</span>view two<span class=\"string\">\" name=\"</span>a<span class=\"string\">\"&gt;&lt;/router-view&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;router-view class=\"</span>view three<span class=\"string\">\" name=\"</span>b<span class=\"string\">\"&gt;&lt;/router-view&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">/* js 部分 */</span></span><br><span class=\"line\"><span class=\"string\">const Foo = &#123; template: '&lt;div&gt;foo&lt;/div&gt;' &#125;</span></span><br><span class=\"line\"><span class=\"string\">const Bar = &#123; template: '&lt;div&gt;bar&lt;/div&gt;' &#125;</span></span><br><span class=\"line\"><span class=\"string\">const Baz = &#123; template: '&lt;div&gt;baz&lt;/div&gt;' &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const router = new VueRouter(&#123;</span></span><br><span class=\"line\"><span class=\"string\">  mode: 'history',</span></span><br><span class=\"line\"><span class=\"string\">  routes: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123; path: '/',</span></span><br><span class=\"line\"><span class=\"string\">      // a single route can define multiple named components</span></span><br><span class=\"line\"><span class=\"string\">      // which will be rendered into &lt;router-view&gt;s with corresponding names.</span></span><br><span class=\"line\"><span class=\"string\">      components: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        default: Foo,</span></span><br><span class=\"line\"><span class=\"string\">        a: Bar,</span></span><br><span class=\"line\"><span class=\"string\">        b: Baz</span></span><br><span class=\"line\"><span class=\"string\">      &#125;,                                                                                                                                               </span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      path: '/other',</span></span><br><span class=\"line\"><span class=\"string\">      components: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        default: Baz,</span></span><br><span class=\"line\"><span class=\"string\">        a: Bar,</span></span><br><span class=\"line\"><span class=\"string\">        b: Foo</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"string\">\trouter,</span></span><br><span class=\"line\"><span class=\"string\">  el: '#app'</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Router-构建选项\"><a href=\"#Router-构建选项\" class=\"headerlink\" title=\"Router 构建选项\"></a>Router 构建选项</h3><p>一般在一个项目中会通过如下方法构建路由, 详细构建参数参考<a href=\"https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9\" target=\"_blank\" rel=\"noopener\">官网-Router 构建选项</a> 一节.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    routes: routes,</span><br><span class=\"line\">    modes: modes</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里 <code>routes</code> 最为常用, 是一个对象数组, 每个字段解释如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;string&#125; 必须 路由</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        path: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;Component&#125; 非必须 视图组件</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        component: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;string&#125; 非必须 明明路由</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        name: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;Object&#125; 非必须 命名视图组件</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        components: &#123; [name: string]: Component &#125;;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;string/Location/Function&#125; 非必须 重定向逻辑</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        redirect?: string | Location | <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;boolean/string/Function&#125; 非必须 路由属性</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        props?: boolean | string | <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;string/Array&#125; 非必须 别名</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        alias?: string | <span class=\"built_in\">Array</span>&lt;string&gt;;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;Array&lt;RouteConfig&gt;&#125; 非必须 嵌套路由</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        children?: <span class=\"built_in\">Array</span>&lt;RouteConfig&gt;;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 非必须</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        beforeEnter?: <span class=\"function\">(<span class=\"params\">to: Route, <span class=\"keyword\">from</span>: Route, next: <span class=\"built_in\">Function</span></span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;any&#125; 非必须 感觉像是一些业务相关配置</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        meta?: any;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;boolean&#125; 非必须 匹配规则是否大小写敏感？(默认值：false)</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.6.0+</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        caseSensitive?: boolean;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;Object&#125; 非必须 编译正则的选项</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.6.0+</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        pathToRegexpOptions?: <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"Router-实例属性和实例方法\"><a href=\"#Router-实例属性和实例方法\" class=\"headerlink\" title=\"Router 实例属性和实例方法\"></a>Router 实例属性和实例方法</h3><p>Router 的实例属性和实例方法, <a href=\"https://router.vuejs.org/zh/api/#router-%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener\">官方文档</a>介绍的很详细, 这里不做过多讲解, </p>\n<p>直接参考官方文档即可.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考文档: <a href=\"https://router.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">https://router.vuejs.org/zh/</a></p>\n<p>vue0router 源码: <a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue-router</a></p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Vue Router 是 <a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue.js</a> 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。[官方介绍]]</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h3 id=\"DOM-API\"><a href=\"#DOM-API\" class=\"headerlink\" title=\"DOM API\"></a>DOM API</h3><ul>\n<li>router-link</li>\n</ul>\n<p><code>router-link</code> 有很多属性, 比如 <code>to</code>, <code>replace</code> 和 <code>tag</code> 等, 可以<a href=\"https://router.vuejs.org/zh/api/#router-link-props\" target=\"_blank\" rel=\"noopener\">参考文档 router-link-props</a> 一节</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link tag=<span class=\"string\">\"li\"</span> to=<span class=\"string\">\"/foo\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>router-view</li>\n</ul>\n<p>router-view 是一个 functional 组件，渲染路径匹配到的视图组件, 可以简单的理解为将路由对应的组件渲染在 router-view 中. </p>\n<p>可以<a href=\"https://jsfiddle.net/6du90epg/7730/\" target=\"_blank\" rel=\"noopener\">参考官方效果展示</a>.</p>\n<p>分别点击右下角的 ‘/‘ 和 ‘/other’, 可以看到页面中渲染了不同的视图</p>\n<p>主要原理是通过 <code>&lt;router-view&gt;</code> 的 name 属性, 配置了渲染的组件name</p>\n<p>然后在相应的 path 下配置将组件 name 映射到实际的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 此段代码从官方效果展示复制过来, 主要为了解释下 router-view 工作 */</span></span><br><span class=\"line\"><span class=\"comment\">/* html 部分 */</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://unpkg.com/vue-router/dist/vue-router.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;h1&gt;Named Views&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;router-link to=\"/</span><span class=\"string\">\"&gt;/&lt;/router-link&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;router-link to=\"</span>/other<span class=\"string\">\"&gt;/other&lt;/router-link&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;router-view class=\"</span>view one<span class=\"string\">\"&gt;hhh&lt;/router-view&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;router-view class=\"</span>view two<span class=\"string\">\" name=\"</span>a<span class=\"string\">\"&gt;&lt;/router-view&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;router-view class=\"</span>view three<span class=\"string\">\" name=\"</span>b<span class=\"string\">\"&gt;&lt;/router-view&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">/* js 部分 */</span></span><br><span class=\"line\"><span class=\"string\">const Foo = &#123; template: '&lt;div&gt;foo&lt;/div&gt;' &#125;</span></span><br><span class=\"line\"><span class=\"string\">const Bar = &#123; template: '&lt;div&gt;bar&lt;/div&gt;' &#125;</span></span><br><span class=\"line\"><span class=\"string\">const Baz = &#123; template: '&lt;div&gt;baz&lt;/div&gt;' &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const router = new VueRouter(&#123;</span></span><br><span class=\"line\"><span class=\"string\">  mode: 'history',</span></span><br><span class=\"line\"><span class=\"string\">  routes: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123; path: '/',</span></span><br><span class=\"line\"><span class=\"string\">      // a single route can define multiple named components</span></span><br><span class=\"line\"><span class=\"string\">      // which will be rendered into &lt;router-view&gt;s with corresponding names.</span></span><br><span class=\"line\"><span class=\"string\">      components: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        default: Foo,</span></span><br><span class=\"line\"><span class=\"string\">        a: Bar,</span></span><br><span class=\"line\"><span class=\"string\">        b: Baz</span></span><br><span class=\"line\"><span class=\"string\">      &#125;,                                                                                                                                               </span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      path: '/other',</span></span><br><span class=\"line\"><span class=\"string\">      components: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        default: Baz,</span></span><br><span class=\"line\"><span class=\"string\">        a: Bar,</span></span><br><span class=\"line\"><span class=\"string\">        b: Foo</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"string\">\trouter,</span></span><br><span class=\"line\"><span class=\"string\">  el: '#app'</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Router-构建选项\"><a href=\"#Router-构建选项\" class=\"headerlink\" title=\"Router 构建选项\"></a>Router 构建选项</h3><p>一般在一个项目中会通过如下方法构建路由, 详细构建参数参考<a href=\"https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9\" target=\"_blank\" rel=\"noopener\">官网-Router 构建选项</a> 一节.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">    routes: routes,</span><br><span class=\"line\">    modes: modes</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里 <code>routes</code> 最为常用, 是一个对象数组, 每个字段解释如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;string&#125; 必须 路由</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        path: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;Component&#125; 非必须 视图组件</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        component: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;string&#125; 非必须 明明路由</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        name: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;Object&#125; 非必须 命名视图组件</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        components: &#123; [name: string]: Component &#125;;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;string/Location/Function&#125; 非必须 重定向逻辑</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        redirect?: string | Location | <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;boolean/string/Function&#125; 非必须 路由属性</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        props?: boolean | string | <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;string/Array&#125; 非必须 别名</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        alias?: string | <span class=\"built_in\">Array</span>&lt;string&gt;;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;Array&lt;RouteConfig&gt;&#125; 非必须 嵌套路由</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        children?: <span class=\"built_in\">Array</span>&lt;RouteConfig&gt;;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 非必须</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        beforeEnter?: <span class=\"function\">(<span class=\"params\">to: Route, <span class=\"keyword\">from</span>: Route, next: <span class=\"built_in\">Function</span></span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;any&#125; 非必须 感觉像是一些业务相关配置</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        meta?: any;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;boolean&#125; 非必须 匹配规则是否大小写敏感？(默认值：false)</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.6.0+</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        caseSensitive?: boolean;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &#123;Object&#125; 非必须 编译正则的选项</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.6.0+</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        pathToRegexpOptions?: <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"Router-实例属性和实例方法\"><a href=\"#Router-实例属性和实例方法\" class=\"headerlink\" title=\"Router 实例属性和实例方法\"></a>Router 实例属性和实例方法</h3><p>Router 的实例属性和实例方法, <a href=\"https://router.vuejs.org/zh/api/#router-%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener\">官方文档</a>介绍的很详细, 这里不做过多讲解, </p>\n<p>直接参考官方文档即可.</p>\n"},{"title":"webpack v4+ 打包优化学习笔记","date":"2018-09-14T13:08:03.000Z","_content":"\n## 打包优化的几种方式\n\n### 1. dll\n\n对于一些比较大的库，可以先进性打包后在引入\n\n### 2. happypack 多线程打包\n\n启用多线程打包，js 是单线程，所以启用子进程打包\n\n- 注意：项目比较小的时候，分配子进程所耗费的时候反而会增加打包时间，降低打包效率\n\n```javascript\n/* webpack.config.js */\n\n```\n\n### 3. tree-shaking\n\nmodule 改成 production，此时打包过程中，没有 import 的function 不会被打包， 从容减少打包后文件的大小\n\n- 注意 node exports.a 写法不会进行 tree-shakingstree-shakings\n\n### 4. 避免重复打包\n\n```javascript\noutput: {\n    filename: [name].js,\n},\noptimization: {\n    splitChunks: {\n        cacheGroups: {\n            common: {\n                chunks: 'initial',\n                minChunks: 2,\n                minSize: 0\n            },\n            vendor: {\n                test: /node_modules/, // 一般用来限制第三方插件多次打包\n                chunks: 'initial',\n                minChunks: 2,\n                minSize: 0,\n                priority: 10\n            }\n        }\n    }\n}\n```\n\n### 5. \n\n> 参考链接：https://webpack.docschina.org/plugins/module-concatenation-plugin\n```\nlet ModuleConcatenationPlugin\n```\n\n### 6. 懒加载\n\n> 参考文档：https://router.vuejs.org/guide/advanced/lazy-loading.html#grouping-components-in-the-same-chunk","source":"_posts/webpack.md","raw":"---\ntitle: webpack v4+ 打包优化学习笔记\ndate: 2018-09-14 21:08:03\ntags: ['javascript', 'webpack']\n---\n\n## 打包优化的几种方式\n\n### 1. dll\n\n对于一些比较大的库，可以先进性打包后在引入\n\n### 2. happypack 多线程打包\n\n启用多线程打包，js 是单线程，所以启用子进程打包\n\n- 注意：项目比较小的时候，分配子进程所耗费的时候反而会增加打包时间，降低打包效率\n\n```javascript\n/* webpack.config.js */\n\n```\n\n### 3. tree-shaking\n\nmodule 改成 production，此时打包过程中，没有 import 的function 不会被打包， 从容减少打包后文件的大小\n\n- 注意 node exports.a 写法不会进行 tree-shakingstree-shakings\n\n### 4. 避免重复打包\n\n```javascript\noutput: {\n    filename: [name].js,\n},\noptimization: {\n    splitChunks: {\n        cacheGroups: {\n            common: {\n                chunks: 'initial',\n                minChunks: 2,\n                minSize: 0\n            },\n            vendor: {\n                test: /node_modules/, // 一般用来限制第三方插件多次打包\n                chunks: 'initial',\n                minChunks: 2,\n                minSize: 0,\n                priority: 10\n            }\n        }\n    }\n}\n```\n\n### 5. \n\n> 参考链接：https://webpack.docschina.org/plugins/module-concatenation-plugin\n```\nlet ModuleConcatenationPlugin\n```\n\n### 6. 懒加载\n\n> 参考文档：https://router.vuejs.org/guide/advanced/lazy-loading.html#grouping-components-in-the-same-chunk","slug":"webpack","published":1,"updated":"2018-09-18T02:31:16.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetoa001v8b05ji6yd7ky","content":"<h2 id=\"打包优化的几种方式\"><a href=\"#打包优化的几种方式\" class=\"headerlink\" title=\"打包优化的几种方式\"></a>打包优化的几种方式</h2><h3 id=\"1-dll\"><a href=\"#1-dll\" class=\"headerlink\" title=\"1. dll\"></a>1. dll</h3><p>对于一些比较大的库，可以先进性打包后在引入</p>\n<h3 id=\"2-happypack-多线程打包\"><a href=\"#2-happypack-多线程打包\" class=\"headerlink\" title=\"2. happypack 多线程打包\"></a>2. happypack 多线程打包</h3><p>启用多线程打包，js 是单线程，所以启用子进程打包</p>\n<ul>\n<li>注意：项目比较小的时候，分配子进程所耗费的时候反而会增加打包时间，降低打包效率</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* webpack.config.js */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-tree-shaking\"><a href=\"#3-tree-shaking\" class=\"headerlink\" title=\"3. tree-shaking\"></a>3. tree-shaking</h3><p>module 改成 production，此时打包过程中，没有 import 的function 不会被打包， 从容减少打包后文件的大小</p>\n<ul>\n<li>注意 node exports.a 写法不会进行 tree-shakingstree-shakings</li>\n</ul>\n<h3 id=\"4-避免重复打包\"><a href=\"#4-避免重复打包\" class=\"headerlink\" title=\"4. 避免重复打包\"></a>4. 避免重复打包</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: [name].js,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">        cacheGroups: &#123;</span><br><span class=\"line\">            common: &#123;</span><br><span class=\"line\">                chunks: <span class=\"string\">'initial'</span>,</span><br><span class=\"line\">                minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">                minSize: <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            vendor: &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/node_modules/</span>, <span class=\"comment\">// 一般用来限制第三方插件多次打包</span></span><br><span class=\"line\">                chunks: <span class=\"string\">'initial'</span>,</span><br><span class=\"line\">                minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">                minSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">                priority: <span class=\"number\">10</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h3><blockquote>\n<p>参考链接：<a href=\"https://webpack.docschina.org/plugins/module-concatenation-plugin\" target=\"_blank\" rel=\"noopener\">https://webpack.docschina.org/plugins/module-concatenation-plugin</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ModuleConcatenationPlugin</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"6-懒加载\"><a href=\"#6-懒加载\" class=\"headerlink\" title=\"6. 懒加载\"></a>6. 懒加载</h3><blockquote>\n<p>参考文档：<a href=\"https://router.vuejs.org/guide/advanced/lazy-loading.html#grouping-components-in-the-same-chunk\" target=\"_blank\" rel=\"noopener\">https://router.vuejs.org/guide/advanced/lazy-loading.html#grouping-components-in-the-same-chunk</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"打包优化的几种方式\"><a href=\"#打包优化的几种方式\" class=\"headerlink\" title=\"打包优化的几种方式\"></a>打包优化的几种方式</h2><h3 id=\"1-dll\"><a href=\"#1-dll\" class=\"headerlink\" title=\"1. dll\"></a>1. dll</h3><p>对于一些比较大的库，可以先进性打包后在引入</p>\n<h3 id=\"2-happypack-多线程打包\"><a href=\"#2-happypack-多线程打包\" class=\"headerlink\" title=\"2. happypack 多线程打包\"></a>2. happypack 多线程打包</h3><p>启用多线程打包，js 是单线程，所以启用子进程打包</p>\n<ul>\n<li>注意：项目比较小的时候，分配子进程所耗费的时候反而会增加打包时间，降低打包效率</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* webpack.config.js */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-tree-shaking\"><a href=\"#3-tree-shaking\" class=\"headerlink\" title=\"3. tree-shaking\"></a>3. tree-shaking</h3><p>module 改成 production，此时打包过程中，没有 import 的function 不会被打包， 从容减少打包后文件的大小</p>\n<ul>\n<li>注意 node exports.a 写法不会进行 tree-shakingstree-shakings</li>\n</ul>\n<h3 id=\"4-避免重复打包\"><a href=\"#4-避免重复打包\" class=\"headerlink\" title=\"4. 避免重复打包\"></a>4. 避免重复打包</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: [name].js,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">        cacheGroups: &#123;</span><br><span class=\"line\">            common: &#123;</span><br><span class=\"line\">                chunks: <span class=\"string\">'initial'</span>,</span><br><span class=\"line\">                minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">                minSize: <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            vendor: &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/node_modules/</span>, <span class=\"comment\">// 一般用来限制第三方插件多次打包</span></span><br><span class=\"line\">                chunks: <span class=\"string\">'initial'</span>,</span><br><span class=\"line\">                minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">                minSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">                priority: <span class=\"number\">10</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h3><blockquote>\n<p>参考链接：<a href=\"https://webpack.docschina.org/plugins/module-concatenation-plugin\" target=\"_blank\" rel=\"noopener\">https://webpack.docschina.org/plugins/module-concatenation-plugin</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ModuleConcatenationPlugin</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"6-懒加载\"><a href=\"#6-懒加载\" class=\"headerlink\" title=\"6. 懒加载\"></a>6. 懒加载</h3><blockquote>\n<p>参考文档：<a href=\"https://router.vuejs.org/guide/advanced/lazy-loading.html#grouping-components-in-the-same-chunk\" target=\"_blank\" rel=\"noopener\">https://router.vuejs.org/guide/advanced/lazy-loading.html#grouping-components-in-the-same-chunk</a></p>\n</blockquote>\n"},{"title":"周将的诗","date":"2018-10-23T11:23:37.000Z","_content":"\n### 三行情诗\n\n> 我梦见我老了\n> 那些说做我拐杖的人\n> 一个都没有来\n\n### 迷途人\n\n> 我在沙漠给你写信\n> 飞尘灼日以及没有回声的黑夜\n> 有一天笔没有墨了\n> 我也走不出这一片土地了\n\n### 守旧\n\n> 你是深山的游客\n> 边走边爱 四海为家 生性多情\n> 我是集市里的养猫者\n> 不看路上 不换爱人","source":"_posts/zhoujiang.md","raw":"---\ntitle: 周将的诗\ndate: 2018-10-23 19:23:37\ntags: ['随笔', '碎片']\n---\n\n### 三行情诗\n\n> 我梦见我老了\n> 那些说做我拐杖的人\n> 一个都没有来\n\n### 迷途人\n\n> 我在沙漠给你写信\n> 飞尘灼日以及没有回声的黑夜\n> 有一天笔没有墨了\n> 我也走不出这一片土地了\n\n### 守旧\n\n> 你是深山的游客\n> 边走边爱 四海为家 生性多情\n> 我是集市里的养猫者\n> 不看路上 不换爱人","slug":"zhoujiang","published":1,"updated":"2018-10-26T06:27:42.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnvnetob001y8b05qy6ax9yz","content":"<h3 id=\"三行情诗\"><a href=\"#三行情诗\" class=\"headerlink\" title=\"三行情诗\"></a>三行情诗</h3><blockquote>\n<p>我梦见我老了<br>那些说做我拐杖的人<br>一个都没有来</p>\n</blockquote>\n<h3 id=\"迷途人\"><a href=\"#迷途人\" class=\"headerlink\" title=\"迷途人\"></a>迷途人</h3><blockquote>\n<p>我在沙漠给你写信<br>飞尘灼日以及没有回声的黑夜<br>有一天笔没有墨了<br>我也走不出这一片土地了</p>\n</blockquote>\n<h3 id=\"守旧\"><a href=\"#守旧\" class=\"headerlink\" title=\"守旧\"></a>守旧</h3><blockquote>\n<p>你是深山的游客<br>边走边爱 四海为家 生性多情<br>我是集市里的养猫者<br>不看路上 不换爱人</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"三行情诗\"><a href=\"#三行情诗\" class=\"headerlink\" title=\"三行情诗\"></a>三行情诗</h3><blockquote>\n<p>我梦见我老了<br>那些说做我拐杖的人<br>一个都没有来</p>\n</blockquote>\n<h3 id=\"迷途人\"><a href=\"#迷途人\" class=\"headerlink\" title=\"迷途人\"></a>迷途人</h3><blockquote>\n<p>我在沙漠给你写信<br>飞尘灼日以及没有回声的黑夜<br>有一天笔没有墨了<br>我也走不出这一片土地了</p>\n</blockquote>\n<h3 id=\"守旧\"><a href=\"#守旧\" class=\"headerlink\" title=\"守旧\"></a>守旧</h3><blockquote>\n<p>你是深山的游客<br>边走边爱 四海为家 生性多情<br>我是集市里的养猫者<br>不看路上 不换爱人</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjnvnetmu00008b05a0sfncad","tag_id":"cjnvnetn300038b05z2p4lr47","_id":"cjnvnetnf000c8b05yh98rele"},{"post_id":"cjnvnetmu00008b05a0sfncad","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetnh000e8b05aok89kl9"},{"post_id":"cjnvnetn100028b05kexja5zr","tag_id":"cjnvnetn300038b05z2p4lr47","_id":"cjnvnetnp000n8b05inzy1b2x"},{"post_id":"cjnvnetn100028b05kexja5zr","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetnq000p8b05vaae1yj7"},{"post_id":"cjnvnetn100028b05kexja5zr","tag_id":"cjnvnetnl000i8b05ia7k51kg","_id":"cjnvnetnr000s8b05t9kaja9t"},{"post_id":"cjnvnetn500048b05n79oj4u9","tag_id":"cjnvnetn300038b05z2p4lr47","_id":"cjnvnetnt000w8b05jr4s7djf"},{"post_id":"cjnvnetn500048b05n79oj4u9","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetnu000y8b055staprho"},{"post_id":"cjnvnetn600058b057i7l1yqo","tag_id":"cjnvnetn300038b05z2p4lr47","_id":"cjnvnetny00148b05xaurmobg"},{"post_id":"cjnvnetn600058b057i7l1yqo","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetnz00168b05yxltlesu"},{"post_id":"cjnvnetn600058b057i7l1yqo","tag_id":"cjnvnetnu000z8b05gtbn7cwm","_id":"cjnvneto000198b05tw0a3090"},{"post_id":"cjnvnetn800068b05ktlsy7q0","tag_id":"cjnvnetn300038b05z2p4lr47","_id":"cjnvneto3001d8b05ofrjnuwo"},{"post_id":"cjnvnetn800068b05ktlsy7q0","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvneto4001f8b05iwo2n3hi"},{"post_id":"cjnvnetn800068b05ktlsy7q0","tag_id":"cjnvnetnz00178b05bx08ym49","_id":"cjnvneto5001i8b05aezquscn"},{"post_id":"cjnvnetn900088b05doqytzkq","tag_id":"cjnvnetn300038b05z2p4lr47","_id":"cjnvneto6001k8b05trnx5x6v"},{"post_id":"cjnvnetn900088b05doqytzkq","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvneto7001n8b05d1y2ibpd"},{"post_id":"cjnvnetn900088b05doqytzkq","tag_id":"cjnvnetnl000i8b05ia7k51kg","_id":"cjnvneto8001p8b05bl6pcnjj"},{"post_id":"cjnvnetna00098b05j4de1q8v","tag_id":"cjnvnetn300038b05z2p4lr47","_id":"cjnvneto9001s8b05gqn51nk6"},{"post_id":"cjnvnetna00098b05j4de1q8v","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetoa001u8b05cv25qog0"},{"post_id":"cjnvnetna00098b05j4de1q8v","tag_id":"cjnvnetnl000i8b05ia7k51kg","_id":"cjnvnetob001x8b05kgxjizl7"},{"post_id":"cjnvnetne000b8b05y1nmw4qu","tag_id":"cjnvnetn300038b05z2p4lr47","_id":"cjnvnetoc001z8b05h29b5su6"},{"post_id":"cjnvnetne000b8b05y1nmw4qu","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetoe00218b05rswy3xq5"},{"post_id":"cjnvnetne000b8b05y1nmw4qu","tag_id":"cjnvnetnz00178b05bx08ym49","_id":"cjnvnetoe00228b05td10myd7"},{"post_id":"cjnvnetng000d8b057xyvqnen","tag_id":"cjnvneto9001r8b0506w3pnut","_id":"cjnvnetof00248b05kdl3f8pa"},{"post_id":"cjnvnetng000d8b057xyvqnen","tag_id":"cjnvnetob001w8b052rgq2o8y","_id":"cjnvnetof00258b05wwjfej86"},{"post_id":"cjnvnetni000g8b059fowuhx0","tag_id":"cjnvnetoe00208b05hst5iwpi","_id":"cjnvnetog00278b0552uyuc9h"},{"post_id":"cjnvnetni000g8b059fowuhx0","tag_id":"cjnvnetof00238b05rmmagvqu","_id":"cjnvnetog00288b05kulm7qa2"},{"post_id":"cjnvnetnk000h8b05gevn5sbv","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetoh002a8b05g7skuoto"},{"post_id":"cjnvnetnk000h8b05gevn5sbv","tag_id":"cjnvnetof00268b051jsd6b81","_id":"cjnvnetoh002b8b05cdk9imzy"},{"post_id":"cjnvnetnm000j8b05of2ryxpf","tag_id":"cjnvnetog00298b05gemv3lt6","_id":"cjnvnetoi002d8b05pkggz5fi"},{"post_id":"cjnvnetno000m8b05pqestx1a","tag_id":"cjnvnetoe00208b05hst5iwpi","_id":"cjnvnetoj002g8b059ctiibgk"},{"post_id":"cjnvnetno000m8b05pqestx1a","tag_id":"cjnvnetof00238b05rmmagvqu","_id":"cjnvnetoj002h8b05s9iskmz5"},{"post_id":"cjnvnetnp000o8b05r7mybj1k","tag_id":"cjnvnetoj002f8b057xl89hc5","_id":"cjnvnetoj002j8b05nm0vezsi"},{"post_id":"cjnvnetnq000r8b05hdmau6ho","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetol002n8b05amocvvkv"},{"post_id":"cjnvnetnq000r8b05hdmau6ho","tag_id":"cjnvnetoj002i8b05sryp5p8t","_id":"cjnvnetol002o8b058ebxcr5k"},{"post_id":"cjnvnetnq000r8b05hdmau6ho","tag_id":"cjnvnetok002k8b052mxzpnmf","_id":"cjnvnetom002q8b055nkxj71n"},{"post_id":"cjnvnetnq000r8b05hdmau6ho","tag_id":"cjnvnetof00268b051jsd6b81","_id":"cjnvnetom002r8b05bvyowsos"},{"post_id":"cjnvnetnr000t8b05v438d16h","tag_id":"cjnvnetoe00208b05hst5iwpi","_id":"cjnvneton002t8b05riz5gjoh"},{"post_id":"cjnvnetnr000t8b05v438d16h","tag_id":"cjnvnetof00238b05rmmagvqu","_id":"cjnvneton002u8b05yhpb1t7e"},{"post_id":"cjnvnetns000v8b05ufj3ohja","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvneton002w8b05olmr2h79"},{"post_id":"cjnvnetns000v8b05ufj3ohja","tag_id":"cjnvnetom002s8b05z7r658ko","_id":"cjnvnetoo002x8b05s16hpojq"},{"post_id":"cjnvnetnt000x8b05cfjgd8wl","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetop00308b0592jxibx9"},{"post_id":"cjnvnetnt000x8b05cfjgd8wl","tag_id":"cjnvneton002v8b05snd0es7o","_id":"cjnvnetop00318b0584ad56p8"},{"post_id":"cjnvnetnt000x8b05cfjgd8wl","tag_id":"cjnvnetoo002y8b05umzb9fzd","_id":"cjnvnetoq00338b056o6xviuv"},{"post_id":"cjnvnetnv00108b05orx7v9bq","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetor00358b05cxs24s5v"},{"post_id":"cjnvnetnv00108b05orx7v9bq","tag_id":"cjnvnetop002z8b05egqlbidr","_id":"cjnvnetos00368b05li8b2t9c"},{"post_id":"cjnvnetnv00108b05orx7v9bq","tag_id":"cjnvnetom002s8b05z7r658ko","_id":"cjnvnetos00388b050b3flt1y"},{"post_id":"cjnvnetnw00118b05w50b8fro","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetot003a8b05t9sbudil"},{"post_id":"cjnvnetnw00118b05w50b8fro","tag_id":"cjnvnetor00348b05xiubaqzs","_id":"cjnvnetou003b8b059tdh441r"},{"post_id":"cjnvnetnw00118b05w50b8fro","tag_id":"cjnvnetos00378b05yts3h1xm","_id":"cjnvnetou003d8b051h70qpor"},{"post_id":"cjnvnetnx00138b05rc71k10t","tag_id":"cjnvnetof00238b05rmmagvqu","_id":"cjnvnetov003f8b05zabzv7v2"},{"post_id":"cjnvnetnx00138b05rc71k10t","tag_id":"cjnvnetou003c8b05og9ams4m","_id":"cjnvnetov003g8b05b37v515k"},{"post_id":"cjnvnetny00158b05qr91hm88","tag_id":"cjnvnetou003e8b05q4hmocji","_id":"cjnvnetow003j8b05r0d074rl"},{"post_id":"cjnvnetny00158b05qr91hm88","tag_id":"cjnvnetov003h8b05eag7tjas","_id":"cjnvnetox003k8b05unhsvmo9"},{"post_id":"cjnvnetnz00188b05pka7qlrq","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetoy003m8b05s5hzrm5m"},{"post_id":"cjnvnetnz00188b05pka7qlrq","tag_id":"cjnvnetoj002i8b05sryp5p8t","_id":"cjnvnetoy003n8b05h1oxoyyp"},{"post_id":"cjnvneto1001a8b05dzycpp5g","tag_id":"cjnvnetoe00208b05hst5iwpi","_id":"cjnvnetp0003q8b05fdkrcv23"},{"post_id":"cjnvneto1001a8b05dzycpp5g","tag_id":"cjnvnetof00238b05rmmagvqu","_id":"cjnvnetp0003r8b05wb125lpi"},{"post_id":"cjnvneto2001b8b05tmwhbilf","tag_id":"cjnvnetoz003p8b05wrhqmqd9","_id":"cjnvnetp2003v8b05oagcw2y4"},{"post_id":"cjnvneto2001b8b05tmwhbilf","tag_id":"cjnvnetp0003s8b05laps5jmd","_id":"cjnvnetp2003w8b05z7bowtes"},{"post_id":"cjnvneto2001b8b05tmwhbilf","tag_id":"cjnvnetp1003t8b05qatd0qds","_id":"cjnvnetp3003y8b05m0mtyiz9"},{"post_id":"cjnvneto3001e8b05g3125emo","tag_id":"cjnvnetn300038b05z2p4lr47","_id":"cjnvnetp700408b05e9s07idh"},{"post_id":"cjnvneto3001e8b05g3125emo","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetp700418b05pcy3cy0y"},{"post_id":"cjnvneto3001e8b05g3125emo","tag_id":"cjnvnetp2003u8b052br1inn6","_id":"cjnvnetp800438b05ixma1zow"},{"post_id":"cjnvneto3001e8b05g3125emo","tag_id":"cjnvnetp2003x8b05cq6om3zo","_id":"cjnvnetp800448b05to34b0m0"},{"post_id":"cjnvneto4001g8b051ycivdje","tag_id":"cjnvnetoe00208b05hst5iwpi","_id":"cjnvnetp900468b05fgxe4ri4"},{"post_id":"cjnvneto4001g8b051ycivdje","tag_id":"cjnvnetof00238b05rmmagvqu","_id":"cjnvnetp900478b05aj984ru1"},{"post_id":"cjnvneto5001j8b05a0sz4e5p","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetpa004a8b05v7kfbw03"},{"post_id":"cjnvneto5001j8b05a0sz4e5p","tag_id":"cjnvnetp800458b05dl7m6aam","_id":"cjnvnetpa004b8b05mvxm70h7"},{"post_id":"cjnvneto5001j8b05a0sz4e5p","tag_id":"cjnvnetp900488b05z3d4wtve","_id":"cjnvnetpb004d8b05ixlbfwa2"},{"post_id":"cjnvneto6001l8b059amywm85","tag_id":"cjnvnetov003h8b05eag7tjas","_id":"cjnvnetpb004e8b05qjgcsth1"},{"post_id":"cjnvneto7001o8b054lakrzwg","tag_id":"cjnvnetpa004c8b05chfaj0va","_id":"cjnvnetpc004i8b05j1tk38oo"},{"post_id":"cjnvneto7001o8b054lakrzwg","tag_id":"cjnvnetpb004f8b05ckimn2cm","_id":"cjnvnetpc004j8b05ypgi6i52"},{"post_id":"cjnvneto7001o8b054lakrzwg","tag_id":"cjnvnetpc004g8b05p3384ywt","_id":"cjnvnetpc004l8b05nes6ibm2"},{"post_id":"cjnvneto8001q8b05883tfygj","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetpd004n8b05ex8umsnn"},{"post_id":"cjnvneto8001q8b05883tfygj","tag_id":"cjnvnetp800458b05dl7m6aam","_id":"cjnvnetpd004o8b0538myui4s"},{"post_id":"cjnvneto8001q8b05883tfygj","tag_id":"cjnvnetpc004k8b05fupfvhr4","_id":"cjnvnetpd004q8b05ejxc3ojn"},{"post_id":"cjnvneto9001t8b05773v7zqp","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetpd004s8b05tyax7vz7"},{"post_id":"cjnvneto9001t8b05773v7zqp","tag_id":"cjnvnetp800458b05dl7m6aam","_id":"cjnvnetpe004t8b05wdt43iks"},{"post_id":"cjnvneto9001t8b05773v7zqp","tag_id":"cjnvnetpd004p8b05n5uc4zro","_id":"cjnvnetpe004v8b050ddul2k1"},{"post_id":"cjnvnetoa001v8b05ji6yd7ky","tag_id":"cjnvnetn900078b05wniuq1md","_id":"cjnvnetpe004w8b05htetkncg"},{"post_id":"cjnvnetoa001v8b05ji6yd7ky","tag_id":"cjnvnetpd004r8b05d3bsh34w","_id":"cjnvnetpe004y8b05u0cq7vxh"},{"post_id":"cjnvnetob001y8b05qy6ax9yz","tag_id":"cjnvnetoe00208b05hst5iwpi","_id":"cjnvnetpf004z8b050e5coyxg"},{"post_id":"cjnvnetob001y8b05qy6ax9yz","tag_id":"cjnvnetof00238b05rmmagvqu","_id":"cjnvnetpf00508b05sm75ypdy"}],"Tag":[{"name":"leetcode","_id":"cjnvnetn300038b05z2p4lr47"},{"name":"javascript","_id":"cjnvnetn900078b05wniuq1md"},{"name":"字符串","_id":"cjnvnetnl000i8b05ia7k51kg"},{"name":"数学","_id":"cjnvnetnu000z8b05gtbn7cwm"},{"name":"数组","_id":"cjnvnetnz00178b05bx08ym49"},{"name":"服务","_id":"cjnvneto9001r8b0506w3pnut"},{"name":"后端","_id":"cjnvnetob001w8b052rgq2o8y"},{"name":"随笔","_id":"cjnvnetoe00208b05hst5iwpi"},{"name":"碎片","_id":"cjnvnetof00238b05rmmagvqu"},{"name":"generator","_id":"cjnvnetof00268b051jsd6b81"},{"name":"shell","_id":"cjnvnetog00298b05gemv3lt6"},{"name":"Git","_id":"cjnvnetoj002f8b057xl89hc5"},{"name":"promise","_id":"cjnvnetoj002i8b05sryp5p8t"},{"name":"async/await","_id":"cjnvnetok002k8b052mxzpnmf"},{"name":"面试","_id":"cjnvnetom002s8b05z7r658ko"},{"name":"树","_id":"cjnvneton002v8b05snd0es7o"},{"name":"数据结构","_id":"cjnvnetoo002y8b05umzb9fzd"},{"name":"原型","_id":"cjnvnetop002z8b05egqlbidr"},{"name":"lodash","_id":"cjnvnetor00348b05xiubaqzs"},{"name":"源码","_id":"cjnvnetos00378b05yts3h1xm"},{"name":"记事","_id":"cjnvnetou003c8b05og9ams4m"},{"name":"node","_id":"cjnvnetou003e8b05q4hmocji"},{"name":"sass","_id":"cjnvnetov003h8b05eag7tjas"},{"name":"css","_id":"cjnvnetoz003p8b05wrhqmqd9"},{"name":"伪元素","_id":"cjnvnetp0003s8b05laps5jmd"},{"name":"伪类","_id":"cjnvnetp1003t8b05qatd0qds"},{"name":"整数","_id":"cjnvnetp2003u8b052br1inn6"},{"name":"去重","_id":"cjnvnetp2003x8b05cq6om3zo"},{"name":"vue","_id":"cjnvnetp800458b05dl7m6aam"},{"name":"mixin","_id":"cjnvnetp900488b05z3d4wtve"},{"name":"护肤","_id":"cjnvnetpa004c8b05chfaj0va"},{"name":"面膜","_id":"cjnvnetpb004f8b05ckimn2cm"},{"name":"台湾","_id":"cjnvnetpc004g8b05p3384ywt"},{"name":"vuex","_id":"cjnvnetpc004k8b05fupfvhr4"},{"name":"vue-router","_id":"cjnvnetpd004p8b05n5uc4zro"},{"name":"webpack","_id":"cjnvnetpd004r8b05d3bsh34w"}]}}